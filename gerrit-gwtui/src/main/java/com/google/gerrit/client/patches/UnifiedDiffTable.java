begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|CONTEXT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|INSERT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
operator|.
name|DisplayMethod
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|EditList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|EditList
operator|.
name|Hunk
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseHtmlFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|UnifiedDiffTable
specifier|public
class|class
name|UnifiedDiffTable
extends|extends
name|AbstractPatchContentTable
block|{
DECL|field|PC
specifier|private
specifier|static
specifier|final
name|int
name|PC
init|=
literal|3
decl_stmt|;
DECL|field|BY_DATE
specifier|private
specifier|static
specifier|final
name|Comparator
argument_list|<
name|PatchLineComment
argument_list|>
name|BY_DATE
init|=
operator|new
name|Comparator
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|PatchLineComment
name|o1
parameter_list|,
specifier|final
name|PatchLineComment
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|isFileCommentBorderRowExist
specifier|protected
name|boolean
name|isFileCommentBorderRowExist
decl_stmt|;
comment|// Cursors.
DECL|field|rowOfTableHeaderB
specifier|protected
name|int
name|rowOfTableHeaderB
decl_stmt|;
DECL|field|borderRowOfFileComment
specifier|protected
name|int
name|borderRowOfFileComment
decl_stmt|;
annotation|@
name|Override
DECL|method|onCellDoubleClick (final int row, final int column)
specifier|protected
name|void
name|onCellDoubleClick
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|>
name|C_ARROW
operator|&&
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|pl
init|=
operator|(
name|PatchLine
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|pl
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
case|case
name|CONTEXT
case|:
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|pl
operator|.
name|getLineA
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|pl
operator|.
name|getLineB
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE
case|:
break|break;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|updateCursor (final PatchLineComment newComment)
specifier|protected
name|void
name|updateCursor
parameter_list|(
specifier|final
name|PatchLineComment
name|newComment
parameter_list|)
block|{
if|if
condition|(
name|newComment
operator|.
name|getLine
argument_list|()
operator|==
name|R_HEAD
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|newComment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|newComment
operator|.
name|getSide
argument_list|()
condition|)
block|{
case|case
name|FILE_SIDE_A
case|:
if|if
condition|(
name|idSideA
operator|==
literal|null
operator|&&
name|idSideB
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|rowOfTableHeaderB
operator|++
expr_stmt|;
name|borderRowOfFileComment
operator|++
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|FILE_SIDE_B
case|:
if|if
condition|(
name|idSideA
operator|!=
literal|null
operator|&&
name|idSideA
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|rowOfTableHeaderB
operator|++
expr_stmt|;
name|borderRowOfFileComment
operator|++
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|idSideB
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|borderRowOfFileComment
operator|++
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onCellSingleClick (int row, int column)
specifier|protected
name|void
name|onCellSingleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|super
operator|.
name|onCellSingleClick
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|column
operator|==
literal|1
operator|||
name|column
operator|==
literal|2
condition|)
block|{
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|table
operator|.
name|getText
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
argument_list|)
condition|)
block|{
name|onCellDoubleClick
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|destroyCommentRow (final int row)
specifier|protected
name|void
name|destroyCommentRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|super
operator|.
name|destroyCommentRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rowOfTableHeaderB
operator|+
literal|1
operator|==
name|row
operator|&&
name|row
operator|+
literal|1
operator|==
name|borderRowOfFileComment
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|isFileCommentBorderRowExist
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (CommentEditorPanel panel)
specifier|public
name|void
name|remove
parameter_list|(
name|CommentEditorPanel
name|panel
parameter_list|)
block|{
name|super
operator|.
name|remove
argument_list|(
name|panel
argument_list|)
expr_stmt|;
if|if
condition|(
name|panel
operator|.
name|getComment
argument_list|()
operator|.
name|getLine
argument_list|()
operator|==
name|AbstractPatchContentTable
operator|.
name|R_HEAD
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|panel
operator|.
name|getComment
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|panel
operator|.
name|getComment
argument_list|()
operator|.
name|getSide
argument_list|()
condition|)
block|{
case|case
name|FILE_SIDE_A
case|:
if|if
condition|(
name|idSideA
operator|==
literal|null
operator|&&
name|idSideB
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|rowOfTableHeaderB
operator|--
expr_stmt|;
name|borderRowOfFileComment
operator|--
expr_stmt|;
return|return;
block|}
break|break;
case|case
name|FILE_SIDE_B
case|:
if|if
condition|(
name|idSideA
operator|!=
literal|null
operator|&&
name|idSideA
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|rowOfTableHeaderB
operator|--
expr_stmt|;
name|borderRowOfFileComment
operator|--
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|idSideB
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
name|borderRowOfFileComment
operator|--
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onInsertComment (final PatchLine pl)
specifier|protected
name|void
name|onInsertComment
parameter_list|(
specifier|final
name|PatchLine
name|pl
parameter_list|)
block|{
specifier|final
name|int
name|row
init|=
name|getCurrentRow
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|pl
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
case|case
name|CONTEXT
case|:
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|pl
operator|.
name|getLineA
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|pl
operator|.
name|getLineB
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE
case|:
break|break;
block|}
block|}
DECL|method|appendImgTag (SafeHtmlBuilder nc, String url)
specifier|private
name|void
name|appendImgTag
parameter_list|(
name|SafeHtmlBuilder
name|nc
parameter_list|,
name|String
name|url
parameter_list|)
block|{
name|nc
operator|.
name|openElement
argument_list|(
literal|"img"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setAttribute
argument_list|(
literal|"src"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|nc
operator|.
name|closeElement
argument_list|(
literal|"img"
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileCommentEditorOnSideA ()
specifier|protected
name|void
name|createFileCommentEditorOnSideA
parameter_list|()
block|{
name|createCommentEditor
argument_list|(
name|R_HEAD
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|R_HEAD
argument_list|,
name|FILE_SIDE_A
argument_list|)
expr_stmt|;
return|return;
block|}
DECL|method|createFileCommentEditorOnSideB ()
specifier|protected
name|void
name|createFileCommentEditorOnSideB
parameter_list|()
block|{
name|createCommentEditor
argument_list|(
name|rowOfTableHeaderB
operator|+
literal|1
argument_list|,
name|PC
argument_list|,
name|R_HEAD
argument_list|,
name|FILE_SIDE_B
argument_list|)
expr_stmt|;
name|createFileCommentBorderRow
argument_list|()
expr_stmt|;
block|}
DECL|method|populateTableHeader (final PatchScript script, final PatchSetDetail detail)
specifier|private
name|void
name|populateTableHeader
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|PatchSetDetail
name|detail
parameter_list|)
block|{
name|initHeaders
argument_list|(
name|script
argument_list|,
name|detail
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|R_HEAD
argument_list|,
name|PC
argument_list|,
name|headerSideA
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|rowOfTableHeaderB
argument_list|,
name|PC
argument_list|,
name|headerSideB
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|R_HEAD
argument_list|,
name|PC
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|unifiedTableHeader
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|rowOfTableHeaderB
argument_list|,
name|PC
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|unifiedTableHeader
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add icons to lineNumber column header
if|if
condition|(
name|headerSideA
operator|.
name|isFileOrCommitMessage
argument_list|()
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|R_HEAD
argument_list|,
literal|1
argument_list|,
name|iconA
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|headerSideB
operator|.
name|isFileOrCommitMessage
argument_list|()
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|rowOfTableHeaderB
argument_list|,
literal|2
argument_list|,
name|iconB
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|allocateTableHeader (SafeHtmlBuilder nc)
specifier|private
name|void
name|allocateTableHeader
parameter_list|(
name|SafeHtmlBuilder
name|nc
parameter_list|)
block|{
name|rowOfTableHeaderB
operator|=
literal|1
expr_stmt|;
name|borderRowOfFileComment
operator|=
literal|2
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|R_HEAD
init|;
name|i
operator|<
name|borderRowOfFileComment
condition|;
name|i
operator|++
control|)
block|{
name|openTableHeaderLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|padLineNumberOnTableHeaderForSideA
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|padLineNumberOnTableHeaderForSideB
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|nc
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|render (final PatchScript script, final PatchSetDetail detail)
specifier|protected
name|void
name|render
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|PatchSetDetail
name|detail
parameter_list|)
block|{
specifier|final
name|SafeHtmlBuilder
name|nc
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|allocateTableHeader
argument_list|(
name|nc
argument_list|)
expr_stmt|;
comment|// Display the patch header
for|for
control|(
specifier|final
name|String
name|line
range|:
name|script
operator|.
name|getPatchHeader
argument_list|()
control|)
block|{
name|appendFileHeader
argument_list|(
name|nc
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ArrayList
argument_list|<
name|PatchLine
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchLine
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|script
operator|.
name|getDisplayMethodA
argument_list|()
operator|==
name|DisplayMethod
operator|.
name|IMG
operator|||
name|script
operator|.
name|getDisplayMethodB
argument_list|()
operator|==
name|DisplayMethod
operator|.
name|IMG
condition|)
block|{
name|appendImageDifferences
argument_list|(
name|script
argument_list|,
name|nc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isDisplayBinary
condition|)
block|{
if|if
condition|(
name|hasDifferences
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|appendTextDifferences
argument_list|(
name|script
argument_list|,
name|nc
argument_list|,
name|lines
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|hasDifferences
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|appendNoDifferences
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
name|resetHtml
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|populateTableHeader
argument_list|(
name|script
argument_list|,
name|detail
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDifferences
argument_list|(
name|script
argument_list|)
condition|)
block|{
name|initScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isDisplayBinary
condition|)
block|{
name|int
name|row
init|=
name|script
operator|.
name|getPatchHeader
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|PatchLine
argument_list|>
name|iLine
init|=
name|lines
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iLine
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|PatchLine
name|l
init|=
name|iLine
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|n
decl_stmt|;
switch|switch
condition|(
name|l
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|CONTEXT
case|:
name|n
operator|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextCONTEXT
argument_list|()
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|n
operator|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextDELETE
argument_list|()
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|n
operator|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextINSERT
argument_list|()
expr_stmt|;
break|break;
default|default:
continue|continue;
block|}
while|while
condition|(
operator|!
name|fmt
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|,
name|PC
argument_list|)
operator|.
name|contains
argument_list|(
name|n
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
name|setRowItem
argument_list|(
name|row
operator|++
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|appendImageDifferences (final PatchScript script, final SafeHtmlBuilder nc)
specifier|private
name|void
name|appendImageDifferences
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|SafeHtmlBuilder
name|nc
parameter_list|)
block|{
specifier|final
name|String
name|rawBase
init|=
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"cat/"
decl_stmt|;
name|nc
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|nc
operator|.
name|setAttribute
argument_list|(
literal|"valign"
argument_list|,
literal|"center"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|setAttribute
argument_list|(
literal|"align"
argument_list|,
literal|"center"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|getDisplayMethodA
argument_list|()
operator|==
name|DisplayMethod
operator|.
name|IMG
condition|)
block|{
if|if
condition|(
name|idSideA
operator|==
literal|null
condition|)
block|{
name|appendImgTag
argument_list|(
name|nc
argument_list|,
name|rawBase
operator|+
name|KeyUtil
operator|.
name|encode
argument_list|(
name|patchKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"^1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Patch
operator|.
name|Key
name|k
init|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideA
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|appendImgTag
argument_list|(
name|nc
argument_list|,
name|rawBase
operator|+
name|KeyUtil
operator|.
name|encode
argument_list|(
name|k
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"^0"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|script
operator|.
name|getDisplayMethodB
argument_list|()
operator|==
name|DisplayMethod
operator|.
name|IMG
condition|)
block|{
name|appendImgTag
argument_list|(
name|nc
argument_list|,
name|rawBase
operator|+
name|KeyUtil
operator|.
name|encode
argument_list|(
name|patchKey
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"^0"
argument_list|)
expr_stmt|;
block|}
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|appendTextDifferences (final PatchScript script, final SafeHtmlBuilder nc, final ArrayList<PatchLine> lines)
specifier|private
name|void
name|appendTextDifferences
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|SafeHtmlBuilder
name|nc
parameter_list|,
specifier|final
name|ArrayList
argument_list|<
name|PatchLine
argument_list|>
name|lines
parameter_list|)
block|{
specifier|final
name|SparseHtmlFile
name|a
init|=
name|getSparseHtmlFileA
argument_list|(
name|script
argument_list|)
decl_stmt|;
specifier|final
name|SparseHtmlFile
name|b
init|=
name|getSparseHtmlFileB
argument_list|(
name|script
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|syntaxHighlighting
init|=
name|script
operator|.
name|getDiffPrefs
argument_list|()
operator|.
name|isSyntaxHighlighting
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|EditList
operator|.
name|Hunk
name|hunk
range|:
name|script
operator|.
name|getHunks
argument_list|()
control|)
block|{
name|appendHunkHeader
argument_list|(
name|nc
argument_list|,
name|hunk
argument_list|)
expr_stmt|;
while|while
condition|(
name|hunk
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|hunk
operator|.
name|isContextLine
argument_list|()
condition|)
block|{
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|appendLineNumberForSideA
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|appendLineNumberForSideB
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
expr_stmt|;
name|appendLineText
argument_list|(
name|nc
argument_list|,
literal|false
argument_list|,
name|CONTEXT
argument_list|,
name|a
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incBoth
argument_list|()
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|CONTEXT
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hunk
operator|.
name|isDeletedA
argument_list|()
condition|)
block|{
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|appendLineNumberForSideA
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|padLineNumberForSideB
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|syntaxHighlighting
argument_list|,
name|DELETE
argument_list|,
name|a
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incA
argument_list|()
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|DELETE
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|.
name|size
argument_list|()
operator|==
name|hunk
operator|.
name|getCurA
argument_list|()
operator|&&
name|script
operator|.
name|getA
argument_list|()
operator|.
name|isMissingNewlineAtEnd
argument_list|()
condition|)
block|{
name|appendNoLF
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|hunk
operator|.
name|isInsertedB
argument_list|()
condition|)
block|{
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|padLineNumberForSideA
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|appendLineNumberForSideB
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
expr_stmt|;
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|syntaxHighlighting
argument_list|,
name|INSERT
argument_list|,
name|b
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incB
argument_list|()
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|INSERT
argument_list|,
operator|-
literal|1
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|size
argument_list|()
operator|==
name|hunk
operator|.
name|getCurB
argument_list|()
operator|&&
name|script
operator|.
name|getB
argument_list|()
operator|.
name|isMissingNewlineAtEnd
argument_list|()
condition|)
block|{
name|appendNoLF
argument_list|(
name|nc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|display (final CommentDetail cd, boolean expandComments)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|CommentDetail
name|cd
parameter_list|,
name|boolean
name|expandComments
parameter_list|)
block|{
if|if
condition|(
name|cd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|setAccountInfoCache
argument_list|(
name|cd
operator|.
name|getAccounts
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
control|)
block|{
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|fora
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|forb
decl_stmt|;
if|if
condition|(
name|row
operator|==
name|R_HEAD
condition|)
block|{
name|fora
operator|=
name|cd
operator|.
name|getForA
argument_list|(
name|R_HEAD
argument_list|)
expr_stmt|;
name|forb
operator|=
name|cd
operator|.
name|getForB
argument_list|(
name|R_HEAD
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|fora
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|=
name|insert
argument_list|(
name|fora
argument_list|,
name|row
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
block|}
name|rowOfTableHeaderB
operator|=
name|row
expr_stmt|;
name|borderRowOfFileComment
operator|=
name|row
operator|+
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|forb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|++
expr_stmt|;
comment|// Skip the Header of sideB.
name|row
operator|=
name|insert
argument_list|(
name|forb
argument_list|,
name|row
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
name|borderRowOfFileComment
operator|=
name|row
expr_stmt|;
name|createFileCommentBorderRow
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|pLine
init|=
operator|(
name|PatchLine
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|fora
operator|=
name|cd
operator|.
name|getForA
argument_list|(
name|pLine
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|forb
operator|=
name|cd
operator|.
name|getForB
argument_list|(
name|pLine
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|fora
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|forb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|all
operator|.
name|clear
argument_list|()
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|fora
argument_list|)
expr_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|forb
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|all
argument_list|,
name|BY_DATE
argument_list|)
expr_stmt|;
name|row
operator|=
name|insert
argument_list|(
name|all
argument_list|,
name|row
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|fora
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|=
name|insert
argument_list|(
name|fora
argument_list|,
name|row
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|forb
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|row
operator|=
name|insert
argument_list|(
name|forb
argument_list|,
name|row
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|row
operator|++
expr_stmt|;
continue|continue;
block|}
block|}
block|}
DECL|method|defaultStyle (final int row, final CellFormatter fmt)
specifier|private
name|void
name|defaultStyle
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|CellFormatter
name|fmt
parameter_list|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
operator|-
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
operator|-
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightBorder
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
operator|-
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insertRow (final int row)
specifier|protected
name|void
name|insertRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|super
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|defaultStyle
argument_list|(
name|row
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPatchScreenType ()
specifier|protected
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
block|{
return|return
name|PatchScreen
operator|.
name|Type
operator|.
name|UNIFIED
return|;
block|}
DECL|method|insert (final List<PatchLineComment> in, int row, boolean expandComment)
specifier|private
name|int
name|insert
parameter_list|(
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|in
parameter_list|,
name|int
name|row
parameter_list|,
name|boolean
name|expandComment
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|ci
init|=
name|in
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|PatchLineComment
name|c
init|=
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getLine
argument_list|()
operator|==
name|R_HEAD
condition|)
block|{
name|insertFileCommentRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|bindComment
argument_list|(
name|row
argument_list|,
name|PC
argument_list|,
name|c
argument_list|,
operator|!
name|ci
operator|.
name|hasNext
argument_list|()
argument_list|,
name|expandComment
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
annotation|@
name|Override
DECL|method|insertFileCommentRow (final int row)
specifier|protected
name|void
name|insertFileCommentRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCellOfFileCommentRow
argument_list|()
argument_list|)
expr_stmt|;
name|defaultStyle
argument_list|(
name|row
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cellsNextToFileComment
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
operator|-
literal|2
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cellsNextToFileComment
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|PC
operator|-
literal|1
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cellsNextToFileComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createFileCommentBorderRow ()
specifier|private
name|void
name|createFileCommentBorderRow
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isFileCommentBorderRowExist
condition|)
block|{
name|isFileCommentBorderRowExist
operator|=
literal|true
expr_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|borderRowOfFileComment
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|borderRowOfFileComment
argument_list|,
name|C_ARROW
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCellOfFileCommentRow
argument_list|()
argument_list|)
expr_stmt|;
name|defaultStyle
argument_list|(
name|borderRowOfFileComment
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|iconCell
init|=
name|fmt
operator|.
name|getElement
argument_list|(
name|borderRowOfFileComment
argument_list|,
name|C_ARROW
argument_list|)
decl_stmt|;
name|UIObject
operator|.
name|setStyleName
argument_list|(
name|DOM
operator|.
name|getParent
argument_list|(
name|iconCell
argument_list|)
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileCommentBorder
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|appendFileHeader (final SafeHtmlBuilder m, final String line)
specifier|private
name|void
name|appendFileHeader
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|String
name|line
parameter_list|)
block|{
name|openLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideA
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideB
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextFileHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|closeLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
DECL|method|appendHunkHeader (final SafeHtmlBuilder m, final Hunk hunk)
specifier|private
name|void
name|appendHunkHeader
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Hunk
name|hunk
parameter_list|)
block|{
name|openLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideA
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideB
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextHunkHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"@@ -"
argument_list|)
expr_stmt|;
name|appendRange
argument_list|(
name|m
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
operator|+
literal|1
argument_list|,
name|hunk
operator|.
name|getEndA
argument_list|()
operator|-
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" +"
argument_list|)
expr_stmt|;
name|appendRange
argument_list|(
name|m
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
operator|+
literal|1
argument_list|,
name|hunk
operator|.
name|getEndB
argument_list|()
operator|-
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|" @@"
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|closeLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
DECL|method|appendRange (final SafeHtmlBuilder m, final int begin, final int cnt)
specifier|private
name|void
name|appendRange
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|int
name|begin
parameter_list|,
specifier|final
name|int
name|cnt
parameter_list|)
block|{
switch|switch
condition|(
name|cnt
condition|)
block|{
case|case
literal|0
case|:
name|m
operator|.
name|append
argument_list|(
name|begin
operator|-
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|",0"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|m
operator|.
name|append
argument_list|(
name|begin
argument_list|)
expr_stmt|;
break|break;
default|default:
name|m
operator|.
name|append
argument_list|(
name|begin
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|appendLineText (final SafeHtmlBuilder m, boolean syntaxHighlighting, final PatchLine.Type type, final SparseHtmlFile src, final int i)
specifier|private
name|void
name|appendLineText
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
name|boolean
name|syntaxHighlighting
parameter_list|,
specifier|final
name|PatchLine
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|SparseHtmlFile
name|src
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
specifier|final
name|SafeHtml
name|text
init|=
name|src
operator|.
name|getSafeHtmlLine
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CONTEXT
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextCONTEXT
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextDELETE
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|syntaxHighlighting
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineDELETE
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextINSERT
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|syntaxHighlighting
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineINSERT
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
break|break;
case|case
name|REPLACE
case|:
break|break;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendNoLF (final SafeHtmlBuilder m)
specifier|private
name|void
name|appendNoLF
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|openLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideA
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|padLineNumberForSideB
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffTextNoLF
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
literal|"\\ No newline at end of file"
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|closeLine
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
DECL|method|openLine (final SafeHtmlBuilder m)
specifier|private
name|void
name|openLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"valign"
argument_list|,
literal|"top"
argument_list|)
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|openTableHeaderLine (final SafeHtmlBuilder m)
specifier|private
name|void
name|openTableHeaderLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|closeLine (final SafeHtmlBuilder m)
specifier|private
name|void
name|closeLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|padLineNumberForSideB (final SafeHtmlBuilder m)
specifier|private
name|void
name|padLineNumberForSideB
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|padLineNumberForSideA (final SafeHtmlBuilder m)
specifier|private
name|void
name|padLineNumberForSideA
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightBorder
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineNumberForSideB (final SafeHtmlBuilder m, final int idx)
specifier|private
name|void
name|appendLineNumberForSideB
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|SafeHtml
operator|.
name|asis
argument_list|(
literal|"<a href=\"javascript:void(0)\">"
operator|+
operator|(
name|idx
operator|+
literal|1
operator|)
operator|+
literal|"</a>"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineNumberForSideA (final SafeHtmlBuilder m, final int idx)
specifier|private
name|void
name|appendLineNumberForSideA
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|int
name|idx
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightBorder
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|SafeHtml
operator|.
name|asis
argument_list|(
literal|"<a href=\"javascript:void(0)\">"
operator|+
operator|(
name|idx
operator|+
literal|1
operator|)
operator|+
literal|"</a>"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|padLineNumberOnTableHeaderForSideB (final SafeHtmlBuilder m)
specifier|private
name|void
name|padLineNumberOnTableHeaderForSideB
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|padLineNumberOnTableHeaderForSideA (final SafeHtmlBuilder m)
specifier|private
name|void
name|padLineNumberOnTableHeaderForSideA
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightBorder
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

