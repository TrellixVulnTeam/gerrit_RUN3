begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.rpc
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|RpcStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|RequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|StatusCodeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|RemoteJsonException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|ServerUnavailableException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|JsonConstants
import|;
end_import

begin_comment
comment|/** Makes a REST API call to the server. */
end_comment

begin_class
DECL|class|RestApi
specifier|public
class|class
name|RestApi
block|{
comment|/**    * Expected JSON content body prefix that prevents XSSI.    *<p>    * The server always includes this line as the first line of the response    * content body when the response body is formatted as JSON. It gets inserted    * by the server to prevent the resource from being imported into another    * domain's page using a&lt;script&gt; tag. This line must be removed before    * the JSON can be parsed.    */
DECL|field|JSON_MAGIC
specifier|private
specifier|static
specifier|final
name|String
name|JSON_MAGIC
init|=
literal|")]}'\n"
decl_stmt|;
DECL|field|url
specifier|private
name|StringBuilder
name|url
decl_stmt|;
DECL|field|hasQueryParams
specifier|private
name|boolean
name|hasQueryParams
decl_stmt|;
comment|/**    * Initialize a new API call.    *<p>    * By default the JSON format will be selected by including an HTTP Accept    * header in the request.    *    * @param name URL of the REST resource to access, e.g. {@code "/projects/"}    *        to list accessible projects from the server.    */
DECL|method|RestApi (String name)
specifier|public
name|RestApi
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|url
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
argument_list|)
expr_stmt|;
name|url
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|addParameter (String name, String value)
specifier|public
name|RestApi
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
name|addParameterRaw
argument_list|(
name|name
argument_list|,
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addParameterTrue (String name)
specifier|public
name|RestApi
name|addParameterTrue
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|addParameterRaw
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|addParameter (String name, boolean value)
specifier|public
name|RestApi
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
return|return
name|addParameterRaw
argument_list|(
name|name
argument_list|,
name|value
condition|?
literal|"t"
else|:
literal|"f"
argument_list|)
return|;
block|}
DECL|method|addParameter (String name, int value)
specifier|public
name|RestApi
name|addParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
return|return
name|addParameterRaw
argument_list|(
name|name
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
DECL|method|addParameterRaw (String name, String value)
specifier|public
name|RestApi
name|addParameterRaw
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|hasQueryParams
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|url
operator|.
name|append
argument_list|(
literal|"?"
argument_list|)
expr_stmt|;
name|hasQueryParams
operator|=
literal|true
expr_stmt|;
block|}
name|url
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|url
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|send (final AsyncCallback<T> cb)
specifier|public
parameter_list|<
name|T
extends|extends
name|JavaScriptObject
parameter_list|>
name|void
name|send
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|T
argument_list|>
name|cb
parameter_list|)
block|{
name|RequestBuilder
name|req
init|=
operator|new
name|RequestBuilder
argument_list|(
name|RequestBuilder
operator|.
name|GET
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|req
operator|.
name|setHeader
argument_list|(
literal|"Accept"
argument_list|,
name|JsonConstants
operator|.
name|JSON_TYPE
argument_list|)
expr_stmt|;
name|req
operator|.
name|setCallback
argument_list|(
operator|new
name|RequestCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResponseReceived
parameter_list|(
name|Request
name|req
parameter_list|,
name|Response
name|res
parameter_list|)
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcComplete
argument_list|()
expr_stmt|;
name|int
name|status
init|=
name|res
operator|.
name|getStatusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|200
condition|)
block|{
if|if
condition|(
operator|(
literal|400
operator|<=
name|status
operator|&&
name|status
operator|<
literal|500
operator|)
operator|&&
name|isTextBody
argument_list|(
name|res
argument_list|)
condition|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|RemoteJsonException
argument_list|(
name|res
operator|.
name|getText
argument_list|()
argument_list|,
name|status
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|StatusCodeException
argument_list|(
name|status
argument_list|,
name|res
operator|.
name|getStatusText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|isJsonBody
argument_list|(
name|res
argument_list|)
condition|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|RemoteJsonException
argument_list|(
literal|"Invalid JSON"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|json
init|=
name|res
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|json
operator|.
name|startsWith
argument_list|(
name|JSON_MAGIC
argument_list|)
condition|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|RemoteJsonException
argument_list|(
literal|"Invalid JSON"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|T
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|Natives
operator|.
name|parseJSON
argument_list|(
name|json
operator|.
name|substring
argument_list|(
name|JSON_MAGIC
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|RemoteJsonException
argument_list|(
literal|"Invalid JSON"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|cb
operator|.
name|onSuccess
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onError
parameter_list|(
name|Request
name|req
parameter_list|,
name|Throwable
name|err
parameter_list|)
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcComplete
argument_list|()
expr_stmt|;
if|if
condition|(
name|err
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"XmlHttpRequest.status"
argument_list|)
condition|)
block|{
name|cb
operator|.
name|onFailure
argument_list|(
operator|new
name|ServerUnavailableException
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cb
operator|.
name|onFailure
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcStart
argument_list|()
expr_stmt|;
name|req
operator|.
name|send
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RequestException
name|e
parameter_list|)
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcComplete
argument_list|()
expr_stmt|;
name|cb
operator|.
name|onFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|isJsonBody (Response res)
specifier|private
specifier|static
name|boolean
name|isJsonBody
parameter_list|(
name|Response
name|res
parameter_list|)
block|{
return|return
name|isContentType
argument_list|(
name|res
argument_list|,
name|JsonConstants
operator|.
name|JSON_TYPE
argument_list|)
return|;
block|}
DECL|method|isTextBody (Response res)
specifier|private
specifier|static
name|boolean
name|isTextBody
parameter_list|(
name|Response
name|res
parameter_list|)
block|{
return|return
name|isContentType
argument_list|(
name|res
argument_list|,
literal|"text/plain"
argument_list|)
return|;
block|}
DECL|method|isContentType (Response res, String want)
specifier|private
specifier|static
name|boolean
name|isContentType
parameter_list|(
name|Response
name|res
parameter_list|,
name|String
name|want
parameter_list|)
block|{
name|String
name|type
init|=
name|res
operator|.
name|getHeader
argument_list|(
literal|"Content-Type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|semi
init|=
name|type
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semi
operator|>=
literal|0
condition|)
block|{
name|type
operator|=
name|type
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semi
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
return|return
name|want
operator|.
name|equals
argument_list|(
name|type
argument_list|)
return|;
block|}
block|}
end_class

end_unit

