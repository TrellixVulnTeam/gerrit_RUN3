begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|DiffPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|ChangeScreen2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ReviewInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
operator|.
name|Span
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|LineMapper
operator|.
name|LineOnOtherInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|PaddingManager
operator|.
name|LinePaddingWidgetWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|PaddingManager
operator|.
name|PaddingWidgetWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|SkippedLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NativeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SimplePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|ShowHelpCommand
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|BeforeSelectionChangeHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|GutterClickHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineClassWhere
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineHandle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|RenderLineHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|Viewport
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineCharacter
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineWidget
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|ModeInjector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Rect
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
operator|.
name|FromTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|SideBySide2
specifier|public
class|class
name|SideBySide2
extends|extends
name|Screen
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|FlowPanel
argument_list|,
name|SideBySide2
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|EMPTY
specifier|private
specifier|static
specifier|final
name|JsArrayString
name|EMPTY
init|=
name|JavaScriptObject
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|header
name|Header
name|header
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|diffTable
name|DiffTable
name|diffTable
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|startSide
specifier|private
specifier|final
name|DisplaySide
name|startSide
decl_stmt|;
DECL|field|startLine
specifier|private
specifier|final
name|int
name|startLine
decl_stmt|;
DECL|field|prefs
specifier|private
name|DiffPreferences
name|prefs
decl_stmt|;
DECL|field|cmA
specifier|private
name|CodeMirror
name|cmA
decl_stmt|;
DECL|field|cmB
specifier|private
name|CodeMirror
name|cmB
decl_stmt|;
DECL|field|scrollingGlue
specifier|private
name|ScrollSynchronizer
name|scrollingGlue
decl_stmt|;
DECL|field|resizeHandler
specifier|private
name|HandlerRegistration
name|resizeHandler
decl_stmt|;
DECL|field|publishedBase
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|publishedBase
decl_stmt|;
DECL|field|publishedRevision
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|publishedRevision
decl_stmt|;
DECL|field|draftsBase
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|draftsBase
decl_stmt|;
DECL|field|draftsRevision
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|draftsRevision
decl_stmt|;
DECL|field|diff
specifier|private
name|DiffInfo
name|diff
decl_stmt|;
DECL|field|largeFile
specifier|private
name|boolean
name|largeFile
decl_stmt|;
DECL|field|mapper
specifier|private
name|LineMapper
name|mapper
decl_stmt|;
DECL|field|markers
specifier|private
name|List
argument_list|<
name|TextMarker
argument_list|>
name|markers
decl_stmt|;
DECL|field|undoLineClass
specifier|private
name|List
argument_list|<
name|Runnable
argument_list|>
name|undoLineClass
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|publishedMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
name|publishedMap
decl_stmt|;
DECL|field|lineActiveBoxMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
name|lineActiveBoxMap
decl_stmt|;
DECL|field|linePublishedBoxesMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|List
argument_list|<
name|PublishedBox
argument_list|>
argument_list|>
name|linePublishedBoxesMap
decl_stmt|;
DECL|field|linePaddingManagerMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
name|linePaddingManagerMap
decl_stmt|;
DECL|field|linePaddingOnOtherSideMap
specifier|private
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|LinePaddingWidgetWrapper
argument_list|>
name|linePaddingOnOtherSideMap
decl_stmt|;
DECL|field|diffChunks
specifier|private
name|List
argument_list|<
name|DiffChunkInfo
argument_list|>
name|diffChunks
decl_stmt|;
DECL|field|skipBars
specifier|private
name|Set
argument_list|<
name|SkipBar
argument_list|>
name|skipBars
decl_stmt|;
DECL|field|unsaved
specifier|private
name|Set
argument_list|<
name|DraftBox
argument_list|>
name|unsaved
decl_stmt|;
DECL|field|keysNavigation
specifier|private
name|KeyCommandSet
name|keysNavigation
decl_stmt|;
DECL|field|keysAction
specifier|private
name|KeyCommandSet
name|keysAction
decl_stmt|;
DECL|field|keysComment
specifier|private
name|KeyCommandSet
name|keysComment
decl_stmt|;
DECL|field|handlers
specifier|private
name|List
argument_list|<
name|HandlerRegistration
argument_list|>
name|handlers
decl_stmt|;
DECL|field|deferred
specifier|private
name|List
argument_list|<
name|Runnable
argument_list|>
name|deferred
decl_stmt|;
DECL|field|prefsAction
specifier|private
name|PreferencesAction
name|prefsAction
decl_stmt|;
DECL|field|reloadVersionId
specifier|private
name|int
name|reloadVersionId
decl_stmt|;
DECL|method|SideBySide2 ( PatchSet.Id base, PatchSet.Id revision, String path, DisplaySide startSide, int startLine)
specifier|public
name|SideBySide2
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|DisplaySide
name|startSide
parameter_list|,
name|int
name|startLine
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|revision
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|startSide
operator|=
name|startSide
expr_stmt|;
name|this
operator|.
name|startLine
operator|=
name|startLine
expr_stmt|;
name|prefs
operator|=
name|DiffPreferences
operator|.
name|create
argument_list|(
name|Gerrit
operator|.
name|getAccountDiffPreference
argument_list|()
argument_list|)
expr_stmt|;
name|unsaved
operator|=
operator|new
name|HashSet
argument_list|<
name|DraftBox
argument_list|>
argument_list|()
expr_stmt|;
name|handlers
operator|=
operator|new
name|ArrayList
argument_list|<
name|HandlerRegistration
argument_list|>
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// TODO: Re-implement necessary GlobalKey bindings.
name|addDomHandler
argument_list|(
name|GlobalKey
operator|.
name|STOP_PROPAGATION
argument_list|,
name|KeyPressEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|keysNavigation
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|=
operator|new
name|Header
argument_list|(
name|keysNavigation
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|diffTable
operator|=
operator|new
name|DiffTable
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|CallbackGroup
name|cmGroup
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|CodeMirror
operator|.
name|initLibrary
argument_list|(
name|cmGroup
operator|.
name|add
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|modeInjectorCb
init|=
name|group
operator|.
name|add
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
decl_stmt|;
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|cmGroup
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|diff
operator|=
name|diffInfo
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|largeFile
operator|=
name|isLargeFile
argument_list|(
name|diffInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|largeFile
condition|)
block|{
name|modeInjectorCb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|injectMode
argument_list|(
name|diffInfo
argument_list|,
name|modeInjectorCb
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|modeInjectorCb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|CommentApi
operator|.
name|comments
argument_list|(
name|base
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|getCommentCallback
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CommentApi
operator|.
name|comments
argument_list|(
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|getCommentCallback
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|CommentApi
operator|.
name|drafts
argument_list|(
name|base
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|getCommentCallback
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CommentApi
operator|.
name|drafts
argument_list|(
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|getCommentCallback
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RestApi
name|call
init|=
name|ChangeApi
operator|.
name|detail
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeList
operator|.
name|addOptions
argument_list|(
name|call
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|get
argument_list|(
name|group
operator|.
name|add
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|list
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|setUpPatchSetNav
argument_list|(
name|list
argument_list|,
name|diff
argument_list|)
expr_stmt|;
name|header
operator|.
name|setChangeInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|changeId
argument_list|,
name|group
operator|.
name|addFinal
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|(
name|SideBySide2
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
name|ConfigInfoCache
operator|.
name|Entry
name|result
parameter_list|)
block|{
name|commentLinkProcessor
operator|=
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
name|display
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|hideTopMenu
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|height
init|=
name|getCodeMirrorHeight
argument_list|()
decl_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmA
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|cmB
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|sidePanel
operator|.
name|adjustGutters
argument_list|(
name|cmB
argument_list|)
expr_stmt|;
if|if
condition|(
name|startSide
operator|!=
literal|null
operator|&&
name|startLine
operator|>
literal|0
condition|)
block|{
name|int
name|line
init|=
name|startLine
operator|-
literal|1
decl_stmt|;
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|startSide
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|lineAtHeight
argument_list|(
name|height
operator|-
literal|20
argument_list|)
operator|<
name|line
condition|)
block|{
name|cm
operator|.
name|scrollToY
argument_list|(
name|cm
operator|.
name|heightAtLine
argument_list|(
name|line
argument_list|,
literal|"local"
argument_list|)
operator|-
literal|0.5
operator|*
name|height
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diff
operator|.
name|meta_b
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|line
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|diffChunks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DiffChunkInfo
name|d
init|=
name|diffChunks
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|d
operator|.
name|getSide
argument_list|()
argument_list|)
decl_stmt|;
name|line
operator|=
name|d
operator|.
name|getStart
argument_list|()
expr_stmt|;
if|if
condition|(
name|cm
operator|.
name|lineAtHeight
argument_list|(
name|height
operator|-
literal|20
argument_list|)
operator|<
name|line
condition|)
block|{
name|cm
operator|.
name|scrollToY
argument_list|(
name|cm
operator|.
name|heightAtLine
argument_list|(
name|line
argument_list|,
literal|"local"
argument_list|)
operator|-
literal|0.5
operator|*
name|height
argument_list|)
expr_stmt|;
block|}
block|}
name|cmB
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cmA
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
name|autoReview
argument_list|()
expr_stmt|;
name|prefetchNextFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
name|saveAllDrafts
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|removeKeyHandlerRegs
argument_list|()
expr_stmt|;
if|if
condition|(
name|resizeHandler
operator|!=
literal|null
condition|)
block|{
name|resizeHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|resizeHandler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cmA
operator|!=
literal|null
condition|)
block|{
name|cmA
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmB
operator|!=
literal|null
condition|)
block|{
name|cmB
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prefsAction
operator|!=
literal|null
condition|)
block|{
name|prefsAction
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeyHandlerRegs ()
specifier|private
name|void
name|removeKeyHandlerRegs
parameter_list|()
block|{
for|for
control|(
name|HandlerRegistration
name|h
range|:
name|handlers
control|)
block|{
name|h
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
name|handlers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|registerCmEvents (final CodeMirror cm)
specifier|private
name|void
name|registerCmEvents
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
name|cm
operator|.
name|on
argument_list|(
literal|"beforeSelectionChange"
argument_list|,
name|onSelectionChange
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"cursorActivity"
argument_list|,
name|updateActiveLine
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"gutterClick"
argument_list|,
name|onGutterClick
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"renderLine"
argument_list|,
name|resizeLinePadding
argument_list|(
name|getSideFromCm
argument_list|(
name|cm
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"viewportChange"
argument_list|,
name|adjustGutters
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"focus"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|updateActiveLine
argument_list|(
name|cm
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addKeyMap
argument_list|(
name|KeyMap
operator|.
name|create
argument_list|()
operator|.
name|on
argument_list|(
literal|"'a'"
argument_list|,
name|upToChange
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"'u'"
argument_list|,
name|upToChange
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"'r'"
argument_list|,
name|toggleReviewed
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"'o'"
argument_list|,
name|toggleOpenBox
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Enter"
argument_list|,
name|toggleOpenBox
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"'c'"
argument_list|,
name|insertNewDraft
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"N"
argument_list|,
name|maybeNextVimSearch
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"P"
argument_list|,
name|diffChunkNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|PREV
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-O"
argument_list|,
name|openClosePublished
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-Left"
argument_list|,
name|moveCursorToSide
argument_list|(
name|cm
argument_list|,
name|DisplaySide
operator|.
name|A
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-Right"
argument_list|,
name|moveCursorToSide
argument_list|(
name|cm
argument_list|,
name|DisplaySide
operator|.
name|B
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"'i'"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
switch|switch
condition|(
name|getIntraLineStatus
argument_list|()
condition|)
block|{
case|case
name|OFF
case|:
case|case
name|OK
case|:
name|toggleShowIntraline
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"["
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
operator|(
name|header
operator|.
name|hasPrev
argument_list|()
condition|?
name|header
operator|.
name|prev
else|:
name|header
operator|.
name|up
operator|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"]"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
operator|(
name|header
operator|.
name|hasNext
argument_list|()
condition|?
name|header
operator|.
name|next
else|:
name|header
operator|.
name|up
operator|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"','"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|prefsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-/"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
operator|new
name|ShowHelpCommand
argument_list|()
operator|.
name|onKeyPress
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Space"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CodeMirror
operator|.
name|handleVimKey
argument_list|(
name|cm
argument_list|,
literal|"<PageDown>"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Ctrl-A"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|execCommand
argument_list|(
literal|"selectAll"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onSelectionChange (final CodeMirror cm)
specifier|private
name|BeforeSelectionChangeHandler
name|onSelectionChange
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|BeforeSelectionChangeHandler
argument_list|()
block|{
specifier|private
name|Image
name|icon
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|LineCharacter
name|anchor
parameter_list|,
name|LineCharacter
name|head
parameter_list|)
block|{
if|if
condition|(
name|anchor
operator|==
name|head
operator|||
operator|(
name|anchor
operator|.
name|getLine
argument_list|()
operator|==
name|head
operator|.
name|getLine
argument_list|()
operator|&&
name|anchor
operator|.
name|getCh
argument_list|()
operator|==
name|head
operator|.
name|getCh
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|icon
operator|!=
literal|null
condition|)
block|{
name|icon
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|icon
operator|==
literal|null
condition|)
block|{
name|init
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
name|icon
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Rect
name|r
init|=
name|cm
operator|.
name|charCoords
argument_list|(
name|head
argument_list|,
literal|"local"
argument_list|)
decl_stmt|;
name|Style
name|s
init|=
name|icon
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
decl_stmt|;
name|s
operator|.
name|setTop
argument_list|(
call|(
name|int
call|)
argument_list|(
name|r
operator|.
name|top
argument_list|()
operator|-
name|icon
operator|.
name|getOffsetHeight
argument_list|()
operator|+
literal|2
argument_list|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|s
operator|.
name|setLeft
argument_list|(
call|(
name|int
call|)
argument_list|(
name|r
operator|.
name|right
argument_list|()
operator|-
name|icon
operator|.
name|getOffsetWidth
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|LineCharacter
name|anchor
parameter_list|)
block|{
name|icon
operator|=
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|draftComments
argument_list|()
argument_list|)
expr_stmt|;
name|icon
operator|.
name|setTitle
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|commentInsert
argument_list|()
argument_list|)
expr_stmt|;
name|icon
operator|.
name|setStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|insertCommentIcon
argument_list|()
argument_list|)
expr_stmt|;
name|icon
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|icon
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|insertNewDraft
argument_list|(
name|cm
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addWidget
argument_list|(
name|anchor
argument_list|,
name|icon
operator|.
name|getElement
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToChangeCommand2
argument_list|(
name|revision
argument_list|,
literal|0
argument_list|,
literal|'u'
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|lineNext
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|linePrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'n'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkNext2
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'p'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkPrev2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionActions
argument_list|()
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ENTER
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'o'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'o'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandAllCommentsOnCurrentLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleReviewed
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|toggleReviewed
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'a'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|openReply
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|upToChange
argument_list|(
literal|true
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|','
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|showPreferences
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|prefsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OFF
operator|||
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OK
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'i'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleIntraline
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|toggleShowIntraline
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'c'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentInsert
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|commentEditorSet
argument_list|()
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'s'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentSaveDraft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ESCAPE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentCancelEdit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keysComment
operator|=
literal|null
expr_stmt|;
block|}
name|removeKeyHandlerRegs
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keysComment
operator|!=
literal|null
condition|)
block|{
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysAction
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getCommentCallback ( final DisplaySide side, final boolean toDrafts)
specifier|private
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|getCommentCallback
parameter_list|(
specifier|final
name|DisplaySide
name|side
parameter_list|,
specifier|final
name|boolean
name|toDrafts
parameter_list|)
block|{
return|return
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
init|=
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|toDrafts
condition|)
block|{
if|if
condition|(
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|)
block|{
name|draftsBase
operator|=
name|in
expr_stmt|;
block|}
else|else
block|{
name|draftsRevision
operator|=
name|in
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|)
block|{
name|publishedBase
operator|=
name|in
expr_stmt|;
block|}
else|else
block|{
name|publishedRevision
operator|=
name|in
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|display (final DiffInfo diffInfo)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|lineActiveBoxMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
argument_list|()
expr_stmt|;
name|linePublishedBoxesMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|List
argument_list|<
name|PublishedBox
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|linePaddingManagerMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
argument_list|()
expr_stmt|;
if|if
condition|(
name|publishedBase
operator|!=
literal|null
operator|||
name|publishedRevision
operator|!=
literal|null
condition|)
block|{
name|publishedMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|setShowTabs
argument_list|(
name|prefs
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|showLineNumbers
argument_list|()
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmA
operator|=
name|createCodeMirror
argument_list|(
name|diffInfo
operator|.
name|meta_a
argument_list|()
argument_list|,
name|diffInfo
operator|.
name|text_a
argument_list|()
argument_list|,
name|diffTable
operator|.
name|cmA
argument_list|)
expr_stmt|;
name|cmB
operator|=
name|createCodeMirror
argument_list|(
name|diffInfo
operator|.
name|meta_b
argument_list|()
argument_list|,
name|diffInfo
operator|.
name|text_b
argument_list|()
argument_list|,
name|diffTable
operator|.
name|cmB
argument_list|)
expr_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Estimate initial CM3 height, fixed up in onShowView.
name|int
name|height
init|=
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
operator|(
name|Gerrit
operator|.
name|getHeaderFooterHeight
argument_list|()
operator|+
literal|18
operator|)
decl_stmt|;
name|cmA
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|diffInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|publishedBase
operator|!=
literal|null
condition|)
block|{
name|renderPublished
argument_list|(
name|publishedBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishedRevision
operator|!=
literal|null
condition|)
block|{
name|renderPublished
argument_list|(
name|publishedRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|draftsBase
operator|!=
literal|null
condition|)
block|{
name|renderDrafts
argument_list|(
name|draftsBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|draftsRevision
operator|!=
literal|null
condition|)
block|{
name|renderDrafts
argument_list|(
name|draftsRevision
argument_list|)
expr_stmt|;
block|}
name|renderSkips
argument_list|(
name|prefs
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registerCmEvents
argument_list|(
name|cmA
argument_list|)
expr_stmt|;
name|registerCmEvents
argument_list|(
name|cmB
argument_list|)
expr_stmt|;
name|prefsAction
operator|=
operator|new
name|PreferencesAction
argument_list|(
name|this
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|scrollingGlue
operator|=
name|GWT
operator|.
name|create
argument_list|(
name|ScrollSynchronizer
operator|.
name|class
argument_list|)
expr_stmt|;
name|scrollingGlue
operator|.
name|init
argument_list|(
name|diffTable
argument_list|,
name|cmA
argument_list|,
name|cmB
argument_list|,
name|mapper
argument_list|)
expr_stmt|;
name|header
operator|.
name|init
argument_list|(
name|prefsAction
argument_list|)
expr_stmt|;
name|resizeHandler
operator|=
name|Window
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|resizeCodeMirror
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|largeFile
operator|&&
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleFixedDelay
argument_list|(
operator|new
name|RepeatingCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
operator|&&
name|isAttached
argument_list|()
condition|)
block|{
name|setSyntaxHighlighting
argument_list|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createCodeMirror ( DiffInfo.FileMeta meta, String contents, Element parent)
specifier|private
name|CodeMirror
name|createCodeMirror
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|,
name|String
name|contents
parameter_list|,
name|Element
name|parent
parameter_list|)
block|{
name|Configuration
name|cfg
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorBlinkRate"
argument_list|,
literal|0
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorHeight"
argument_list|,
literal|0.85
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineNumbers"
argument_list|,
name|prefs
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"tabSize"
argument_list|,
name|prefs
operator|.
name|tabSize
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"mode"
argument_list|,
name|largeFile
condition|?
literal|null
else|:
name|getContentType
argument_list|(
name|meta
argument_list|)
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineWrapping"
argument_list|,
literal|false
argument_list|)
operator|.
name|set
argument_list|(
literal|"styleSelectedText"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"showTrailingSpace"
argument_list|,
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"keyMap"
argument_list|,
literal|"vim_ro"
argument_list|)
operator|.
name|set
argument_list|(
literal|"value"
argument_list|,
name|meta
operator|!=
literal|null
condition|?
name|contents
else|:
literal|""
argument_list|)
decl_stmt|;
return|return
name|CodeMirror
operator|.
name|create
argument_list|(
name|parent
argument_list|,
name|cfg
argument_list|)
return|;
block|}
DECL|method|getIntraLineStatus ()
name|DiffInfo
operator|.
name|IntraLineStatus
name|getIntraLineStatus
parameter_list|()
block|{
return|return
name|diff
operator|.
name|intraline_status
argument_list|()
return|;
block|}
DECL|method|setShowTabs (boolean b)
name|void
name|setShowTabs
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setShowLineNumbers (boolean b)
name|void
name|setShowLineNumbers
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setShowIntraline (boolean b)
name|void
name|setShowIntraline
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|&&
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OFF
condition|)
block|{
name|reloadDiffInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
condition|)
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|noIntraline
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|noIntraline
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toggleShowIntraline ()
specifier|private
name|void
name|toggleShowIntraline
parameter_list|()
block|{
name|prefs
operator|.
name|intralineDifference
argument_list|(
operator|!
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|prefsAction
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|setSyntaxHighlighting (boolean b)
name|void
name|setSyntaxHighlighting
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|injectMode
argument_list|(
name|diff
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|prefs
operator|.
name|syntaxHighlighting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setContext (final int context)
name|void
name|setContext
parameter_list|(
specifier|final
name|int
name|context
parameter_list|)
block|{
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|renderSkips
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setExpandAllComments (boolean b)
name|void
name|setExpandAllComments
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
for|for
control|(
name|PublishedBox
name|box
range|:
name|publishedMap
operator|.
name|values
argument_list|()
control|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|render (DiffInfo diff)
specifier|private
name|void
name|render
parameter_list|(
name|DiffInfo
name|diff
parameter_list|)
block|{
name|JsArray
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|diff
operator|.
name|content
argument_list|()
decl_stmt|;
name|header
operator|.
name|setNoDiff
argument_list|(
name|regions
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
operator|(
name|regions
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|regions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|ab
argument_list|()
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|mapper
operator|=
operator|new
name|LineMapper
argument_list|()
expr_stmt|;
name|markers
operator|=
operator|new
name|ArrayList
argument_list|<
name|TextMarker
argument_list|>
argument_list|()
expr_stmt|;
name|undoLineClass
operator|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
expr_stmt|;
name|linePaddingOnOtherSideMap
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|LinePaddingWidgetWrapper
argument_list|>
argument_list|()
expr_stmt|;
name|diffChunks
operator|=
operator|new
name|ArrayList
argument_list|<
name|DiffChunkInfo
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|diffColor
init|=
name|diff
operator|.
name|meta_a
argument_list|()
operator|==
literal|null
operator|||
name|diff
operator|.
name|meta_b
argument_list|()
operator|==
literal|null
condition|?
name|DiffTable
operator|.
name|style
operator|.
name|intralineBg
argument_list|()
else|:
name|DiffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Region
name|current
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|origLineA
init|=
name|mapper
operator|.
name|getLineA
argument_list|()
decl_stmt|;
name|int
name|origLineB
init|=
name|mapper
operator|.
name|getLineB
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|ab
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Common
name|mapper
operator|.
name|appendCommon
argument_list|(
name|current
operator|.
name|ab
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Insert, Delete or Edit
name|JsArrayString
name|currentA
init|=
name|current
operator|.
name|a
argument_list|()
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|current
operator|.
name|a
argument_list|()
decl_stmt|;
name|JsArrayString
name|currentB
init|=
name|current
operator|.
name|b
argument_list|()
operator|==
literal|null
condition|?
name|EMPTY
else|:
name|current
operator|.
name|b
argument_list|()
decl_stmt|;
name|int
name|aLength
init|=
name|currentA
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|bLength
init|=
name|currentB
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|color
init|=
name|currentA
operator|==
name|EMPTY
operator|||
name|currentB
operator|==
name|EMPTY
condition|?
name|diffColor
else|:
name|DiffTable
operator|.
name|style
operator|.
name|intralineBg
argument_list|()
decl_stmt|;
name|colorLines
argument_list|(
name|cmA
argument_list|,
name|color
argument_list|,
name|origLineA
argument_list|,
name|aLength
argument_list|)
expr_stmt|;
name|colorLines
argument_list|(
name|cmB
argument_list|,
name|color
argument_list|,
name|origLineB
argument_list|,
name|bLength
argument_list|)
expr_stmt|;
name|int
name|commonCnt
init|=
name|Math
operator|.
name|min
argument_list|(
name|aLength
argument_list|,
name|bLength
argument_list|)
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
name|commonCnt
argument_list|)
expr_stmt|;
if|if
condition|(
name|aLength
operator|<
name|bLength
condition|)
block|{
comment|// Edit with insertion
name|int
name|insertCnt
init|=
name|bLength
operator|-
name|aLength
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
name|insertCnt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aLength
operator|>
name|bLength
condition|)
block|{
comment|// Edit with deletion
name|int
name|deleteCnt
init|=
name|aLength
operator|-
name|bLength
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
name|deleteCnt
argument_list|)
expr_stmt|;
block|}
name|int
name|chunkEndA
init|=
name|mapper
operator|.
name|getLineA
argument_list|()
operator|-
literal|1
decl_stmt|;
name|int
name|chunkEndB
init|=
name|mapper
operator|.
name|getLineB
argument_list|()
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|aLength
operator|>
literal|0
condition|)
block|{
name|addDiffChunkAndPadding
argument_list|(
name|cmB
argument_list|,
name|chunkEndB
argument_list|,
name|chunkEndA
argument_list|,
name|aLength
argument_list|,
name|bLength
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bLength
operator|>
literal|0
condition|)
block|{
name|addDiffChunkAndPadding
argument_list|(
name|cmA
argument_list|,
name|chunkEndA
argument_list|,
name|chunkEndB
argument_list|,
name|bLength
argument_list|,
name|aLength
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|markEdit
argument_list|(
name|cmA
argument_list|,
name|currentA
argument_list|,
name|current
operator|.
name|edit_a
argument_list|()
argument_list|,
name|origLineA
argument_list|)
expr_stmt|;
name|markEdit
argument_list|(
name|cmB
argument_list|,
name|currentB
argument_list|,
name|current
operator|.
name|edit_b
argument_list|()
argument_list|,
name|origLineB
argument_list|)
expr_stmt|;
if|if
condition|(
name|aLength
operator|==
literal|0
condition|)
block|{
name|diffTable
operator|.
name|sidePanel
operator|.
name|addGutter
argument_list|(
name|cmB
argument_list|,
name|origLineB
argument_list|,
name|SidePanel
operator|.
name|GutterType
operator|.
name|INSERT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bLength
operator|==
literal|0
condition|)
block|{
name|diffTable
operator|.
name|sidePanel
operator|.
name|addGutter
argument_list|(
name|cmA
argument_list|,
name|origLineA
argument_list|,
name|SidePanel
operator|.
name|GutterType
operator|.
name|DELETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|sidePanel
operator|.
name|addGutter
argument_list|(
name|cmB
argument_list|,
name|origLineB
argument_list|,
name|SidePanel
operator|.
name|GutterType
operator|.
name|EDIT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|addNewDraft (CodeMirror cm, int line, FromTo fromTo)
specifier|private
name|DraftBox
name|addNewDraft
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|line
parameter_list|,
name|FromTo
name|fromTo
parameter_list|)
block|{
name|DisplaySide
name|side
init|=
name|getSideFromCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
return|return
name|addDraftBox
argument_list|(
name|CommentInfo
operator|.
name|createRange
argument_list|(
name|path
argument_list|,
name|getStoredSideFromDisplaySide
argument_list|(
name|side
argument_list|)
argument_list|,
name|line
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|CommentRange
operator|.
name|create
argument_list|(
name|fromTo
argument_list|)
argument_list|)
argument_list|,
name|side
argument_list|)
return|;
block|}
DECL|method|createReply (CommentInfo replyTo)
name|CommentInfo
name|createReply
parameter_list|(
name|CommentInfo
name|replyTo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|replyTo
operator|.
name|has_line
argument_list|()
operator|&&
name|replyTo
operator|.
name|range
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|CommentInfo
operator|.
name|createFile
argument_list|(
name|path
argument_list|,
name|replyTo
operator|.
name|side
argument_list|()
argument_list|,
name|replyTo
operator|.
name|id
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CommentInfo
operator|.
name|createRange
argument_list|(
name|path
argument_list|,
name|replyTo
operator|.
name|side
argument_list|()
argument_list|,
name|replyTo
operator|.
name|line
argument_list|()
argument_list|,
name|replyTo
operator|.
name|id
argument_list|()
argument_list|,
literal|null
argument_list|,
name|replyTo
operator|.
name|range
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|addDraftBox (CommentInfo info, DisplaySide side)
name|DraftBox
name|addDraftBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
name|DisplaySide
name|side
parameter_list|)
block|{
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
specifier|final
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|cm
argument_list|,
name|side
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|id
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|box
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|box
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
return|return
name|box
return|;
block|}
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|box
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
DECL|method|addCommentBox (CommentInfo info, final CommentBox box)
name|CommentBox
name|addCommentBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
specifier|final
name|CommentBox
name|box
parameter_list|)
block|{
name|diffTable
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|DisplaySide
name|side
init|=
name|box
operator|.
name|getSide
argument_list|()
decl_stmt|;
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
name|CodeMirror
name|other
init|=
name|otherCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// CommentInfo is 1-based, but CM is 0-based
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|PaddingManager
name|manager
decl_stmt|;
if|if
condition|(
name|linePaddingManagerMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|manager
operator|=
name|linePaddingManagerMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Estimated height at 28px, fixed by deferring after display
name|manager
operator|=
operator|new
name|PaddingManager
argument_list|(
name|addPaddingWidget
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|linePaddingManagerMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
name|int
name|lineToPad
init|=
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|side
argument_list|,
name|line
argument_list|)
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|LineHandle
name|otherHandle
init|=
name|other
operator|.
name|getLineHandle
argument_list|(
name|lineToPad
argument_list|)
decl_stmt|;
name|DiffChunkInfo
name|myChunk
init|=
name|getDiffChunk
argument_list|(
name|side
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|DiffChunkInfo
name|otherChunk
init|=
name|getDiffChunk
argument_list|(
name|getSideFromCm
argument_list|(
name|other
argument_list|)
argument_list|,
name|lineToPad
argument_list|)
decl_stmt|;
name|PaddingManager
name|otherManager
decl_stmt|;
if|if
condition|(
name|linePaddingManagerMap
operator|.
name|containsKey
argument_list|(
name|otherHandle
argument_list|)
condition|)
block|{
name|otherManager
operator|=
name|linePaddingManagerMap
operator|.
name|get
argument_list|(
name|otherHandle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherManager
operator|=
operator|new
name|PaddingManager
argument_list|(
name|addPaddingWidget
argument_list|(
name|other
argument_list|,
name|lineToPad
argument_list|,
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|linePaddingManagerMap
operator|.
name|put
argument_list|(
name|otherHandle
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|myChunk
operator|==
literal|null
operator|&&
name|otherChunk
operator|==
literal|null
operator|)
operator|||
operator|(
name|myChunk
operator|!=
literal|null
operator|&&
name|otherChunk
operator|!=
literal|null
operator|)
condition|)
block|{
name|PaddingManager
operator|.
name|link
argument_list|(
name|manager
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|manager
operator|.
name|getCurrentCount
argument_list|()
decl_stmt|;
name|manager
operator|.
name|insert
argument_list|(
name|box
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"insertAt"
argument_list|,
name|index
argument_list|)
operator|.
name|set
argument_list|(
literal|"noHScroll"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LineWidget
name|boxWidget
init|=
name|addLineWidget
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
name|box
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|box
operator|.
name|setPaddingManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|box
operator|.
name|setSelfWidgetWrapper
argument_list|(
operator|new
name|PaddingWidgetWrapper
argument_list|(
name|boxWidget
argument_list|,
name|box
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|otherChunk
operator|==
literal|null
condition|)
block|{
name|box
operator|.
name|setDiffChunkInfo
argument_list|(
name|myChunk
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|setGutterWrapper
argument_list|(
name|diffTable
operator|.
name|sidePanel
operator|.
name|addGutter
argument_list|(
name|cm
argument_list|,
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|,
name|box
operator|instanceof
name|DraftBox
condition|?
name|SidePanel
operator|.
name|GutterType
operator|.
name|DRAFT
else|:
name|SidePanel
operator|.
name|GutterType
operator|.
name|COMMENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|box
operator|instanceof
name|DraftBox
condition|)
block|{
name|boxWidget
operator|.
name|onRedraw
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DraftBox
name|draftBox
init|=
operator|(
name|DraftBox
operator|)
name|box
decl_stmt|;
if|if
condition|(
name|draftBox
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|draftBox
operator|.
name|editArea
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|box
return|;
block|}
DECL|method|removeDraft (DraftBox box, int line)
name|void
name|removeDraft
parameter_list|(
name|DraftBox
name|box
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|LineHandle
name|handle
init|=
name|getCmFromSide
argument_list|(
name|box
operator|.
name|getSide
argument_list|()
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lineActiveBoxMap
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|linePublishedBoxesMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
name|linePublishedBoxesMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unsaved
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|updateUnsaved (DraftBox box, boolean isUnsaved)
name|void
name|updateUnsaved
parameter_list|(
name|DraftBox
name|box
parameter_list|,
name|boolean
name|isUnsaved
parameter_list|)
block|{
if|if
condition|(
name|isUnsaved
condition|)
block|{
name|unsaved
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsaved
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveAllDrafts (CallbackGroup cb)
specifier|private
name|void
name|saveAllDrafts
parameter_list|(
name|CallbackGroup
name|cb
parameter_list|)
block|{
for|for
control|(
name|DraftBox
name|box
range|:
name|unsaved
control|)
block|{
name|box
operator|.
name|save
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addFileCommentBox (CommentBox box)
name|void
name|addFileCommentBox
parameter_list|(
name|CommentBox
name|box
parameter_list|)
block|{
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFileCommentBox (DraftBox box)
name|void
name|removeFileCommentBox
parameter_list|(
name|DraftBox
name|box
parameter_list|)
block|{
name|diffTable
operator|.
name|onRemoveDraftBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|sortComment (JsArray<CommentInfo> unsorted)
specifier|private
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sortComment
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|unsorted
parameter_list|)
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
operator|new
name|ArrayList
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|unsorted
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|sorted
operator|.
name|add
argument_list|(
name|unsorted
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|sorted
argument_list|,
operator|new
name|Comparator
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|CommentInfo
name|o1
parameter_list|,
name|CommentInfo
name|o2
parameter_list|)
block|{
return|return
name|o1
operator|.
name|updated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|updated
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|sorted
return|;
block|}
DECL|method|renderPublished (JsArray<CommentInfo> published)
specifier|private
name|void
name|renderPublished
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|published
parameter_list|)
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
name|sortComment
argument_list|(
name|published
argument_list|)
decl_stmt|;
for|for
control|(
name|CommentInfo
name|info
range|:
name|sorted
control|)
block|{
name|DisplaySide
name|side
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|)
block|{
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|side
operator|=
name|DisplaySide
operator|.
name|A
expr_stmt|;
block|}
else|else
block|{
name|side
operator|=
name|published
operator|==
name|publishedBase
condition|?
name|DisplaySide
operator|.
name|A
else|:
name|DisplaySide
operator|.
name|B
expr_stmt|;
block|}
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
name|PublishedBox
name|box
init|=
operator|new
name|PublishedBox
argument_list|(
name|this
argument_list|,
name|cm
argument_list|,
name|side
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|expandAllComments
argument_list|()
condition|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|publishedMap
operator|.
name|put
argument_list|(
name|info
operator|.
name|id
argument_list|()
argument_list|,
name|box
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|linePublishedBoxesMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|linePublishedBoxesMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|PublishedBox
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|linePublishedBoxesMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderDrafts (JsArray<CommentInfo> drafts)
specifier|private
name|void
name|renderDrafts
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|drafts
parameter_list|)
block|{
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|sorted
init|=
name|sortComment
argument_list|(
name|drafts
argument_list|)
decl_stmt|;
for|for
control|(
name|CommentInfo
name|info
range|:
name|sorted
control|)
block|{
name|DisplaySide
name|side
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|)
block|{
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
continue|continue;
block|}
name|side
operator|=
name|DisplaySide
operator|.
name|A
expr_stmt|;
block|}
else|else
block|{
name|side
operator|=
name|drafts
operator|==
name|draftsBase
condition|?
name|DisplaySide
operator|.
name|A
else|:
name|DisplaySide
operator|.
name|B
expr_stmt|;
block|}
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|getCmFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|side
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|expandAllComments
argument_list|()
condition|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publishedBase
operator|!=
literal|null
operator|||
name|publishedRevision
operator|!=
literal|null
condition|)
block|{
name|PublishedBox
name|replyToBox
init|=
name|publishedMap
operator|.
name|get
argument_list|(
name|info
operator|.
name|in_reply_to
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|replyToBox
operator|!=
literal|null
condition|)
block|{
name|replyToBox
operator|.
name|registerReplyBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|getCmFromSide
argument_list|(
name|side
argument_list|)
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderSkips (int context)
specifier|private
name|void
name|renderSkips
parameter_list|(
name|int
name|context
parameter_list|)
block|{
name|clearSkipBars
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|==
name|AccountDiffPreference
operator|.
name|WHOLE_FILE_CONTEXT
condition|)
block|{
return|return;
block|}
name|JsArray
argument_list|<
name|Region
argument_list|>
name|regions
init|=
name|diff
operator|.
name|content
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|skips
init|=
operator|new
name|ArrayList
argument_list|<
name|SkippedLine
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|lineA
init|=
literal|0
decl_stmt|,
name|lineB
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|regions
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Region
name|current
init|=
name|regions
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|.
name|ab
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|len
init|=
name|current
operator|.
name|ab
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|len
operator|>
name|context
operator|+
literal|1
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|len
operator|-
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|==
name|regions
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|len
operator|>
name|context
operator|+
literal|1
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|lineA
operator|+
name|context
argument_list|,
name|lineB
operator|+
name|context
argument_list|,
name|len
operator|-
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|len
operator|>
literal|2
operator|*
name|context
operator|+
literal|1
condition|)
block|{
name|skips
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|lineA
operator|+
name|context
argument_list|,
name|lineB
operator|+
name|context
argument_list|,
name|len
operator|-
literal|2
operator|*
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|lineA
operator|+=
name|len
expr_stmt|;
name|lineB
operator|+=
name|len
expr_stmt|;
block|}
else|else
block|{
name|lineA
operator|+=
name|current
operator|.
name|a
argument_list|()
operator|!=
literal|null
condition|?
name|current
operator|.
name|a
argument_list|()
operator|.
name|length
argument_list|()
else|:
literal|0
expr_stmt|;
name|lineB
operator|+=
name|current
operator|.
name|b
argument_list|()
operator|!=
literal|null
condition|?
name|current
operator|.
name|b
argument_list|()
operator|.
name|length
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
block|}
comment|// TODO: This is not optimal, but shouldn't be too costly in most cases.
comment|// Maybe rewrite after done keeping track of diff chunk positions.
name|skipBars
operator|=
operator|new
name|HashSet
argument_list|<
name|SkipBar
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|CommentBox
name|box
range|:
name|lineActiveBoxMap
operator|.
name|values
argument_list|()
control|)
block|{
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|SkippedLine
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SkippedLine
name|skip
range|:
name|skips
control|)
block|{
name|CommentInfo
name|info
init|=
name|box
operator|.
name|getCommentInfo
argument_list|()
decl_stmt|;
name|int
name|startLine
init|=
name|box
operator|.
name|getSide
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|skip
operator|.
name|getStartA
argument_list|()
else|:
name|skip
operator|.
name|getStartB
argument_list|()
decl_stmt|;
name|int
name|boxLine
init|=
name|info
operator|.
name|line
argument_list|()
decl_stmt|;
name|int
name|deltaBefore
init|=
name|boxLine
operator|-
name|startLine
decl_stmt|;
name|int
name|deltaAfter
init|=
name|startLine
operator|+
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|boxLine
decl_stmt|;
if|if
condition|(
name|deltaBefore
operator|<
operator|-
name|context
operator|||
name|deltaAfter
operator|<
operator|-
name|context
condition|)
block|{
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
comment|// Size guaranteed to be greater than 1
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
operator|&&
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|SkippedLine
name|before
init|=
operator|new
name|SkippedLine
argument_list|(
name|skip
operator|.
name|getStartA
argument_list|()
argument_list|,
name|skip
operator|.
name|getStartB
argument_list|()
argument_list|,
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|deltaAfter
operator|-
name|context
argument_list|)
decl_stmt|;
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|reduceSize
argument_list|(
name|deltaAfter
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|temp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|skips
operator|=
name|temp
expr_stmt|;
block|}
for|for
control|(
name|SkippedLine
name|skip
range|:
name|skips
control|)
block|{
name|SkipBar
name|barA
init|=
name|renderSkipHelper
argument_list|(
name|cmA
argument_list|,
name|skip
argument_list|)
decl_stmt|;
name|SkipBar
name|barB
init|=
name|renderSkipHelper
argument_list|(
name|cmB
argument_list|,
name|skip
argument_list|)
decl_stmt|;
name|SkipBar
operator|.
name|link
argument_list|(
name|barA
argument_list|,
name|barB
argument_list|)
expr_stmt|;
name|skipBars
operator|.
name|add
argument_list|(
name|barA
argument_list|)
expr_stmt|;
name|skipBars
operator|.
name|add
argument_list|(
name|barB
argument_list|)
expr_stmt|;
if|if
condition|(
name|skip
operator|.
name|getStartA
argument_list|()
operator|==
literal|0
operator|||
name|skip
operator|.
name|getStartB
argument_list|()
operator|==
literal|0
condition|)
block|{
name|barA
operator|.
name|upArrow
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|barB
operator|.
name|upArrow
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|skip
operator|.
name|getStartA
argument_list|()
operator|+
name|skip
operator|.
name|getSize
argument_list|()
operator|==
name|lineA
operator|||
name|skip
operator|.
name|getStartB
argument_list|()
operator|+
name|skip
operator|.
name|getSize
argument_list|()
operator|==
name|lineB
condition|)
block|{
name|barA
operator|.
name|downArrow
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|barB
operator|.
name|downArrow
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|clearSkipBars ()
specifier|private
name|void
name|clearSkipBars
parameter_list|()
block|{
if|if
condition|(
name|skipBars
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SkipBar
name|bar
range|:
name|skipBars
control|)
block|{
name|bar
operator|.
name|expandAll
argument_list|()
expr_stmt|;
block|}
name|skipBars
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|clearMarkers ()
specifier|private
name|void
name|clearMarkers
parameter_list|()
block|{
if|if
condition|(
name|markers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|TextMarker
name|m
range|:
name|markers
control|)
block|{
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|markers
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|undoLineClass
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Runnable
name|r
range|:
name|undoLineClass
control|)
block|{
name|r
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
name|undoLineClass
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|linePaddingOnOtherSideMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|LinePaddingWidgetWrapper
name|x
range|:
name|linePaddingOnOtherSideMap
operator|.
name|values
argument_list|()
control|)
block|{
name|x
operator|.
name|getWidget
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|linePaddingOnOtherSideMap
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|remove (SkipBar bar)
name|void
name|remove
parameter_list|(
name|SkipBar
name|bar
parameter_list|)
block|{
name|skipBars
operator|.
name|remove
argument_list|(
name|bar
argument_list|)
expr_stmt|;
block|}
DECL|method|checkAndAddSkip (List<SkippedLine> list, SkippedLine toAdd)
specifier|private
name|void
name|checkAndAddSkip
parameter_list|(
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|list
parameter_list|,
name|SkippedLine
name|toAdd
parameter_list|)
block|{
if|if
condition|(
name|toAdd
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toAdd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderSkipHelper (CodeMirror cm, SkippedLine skip)
specifier|private
name|SkipBar
name|renderSkipHelper
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|SkippedLine
name|skip
parameter_list|)
block|{
name|int
name|size
init|=
name|skip
operator|.
name|getSize
argument_list|()
decl_stmt|;
name|int
name|markStart
init|=
name|cm
operator|==
name|cmA
condition|?
name|skip
operator|.
name|getStartA
argument_list|()
else|:
name|skip
operator|.
name|getStartB
argument_list|()
decl_stmt|;
name|int
name|markEnd
init|=
name|markStart
operator|+
name|size
operator|-
literal|1
decl_stmt|;
name|SkipBar
name|bar
init|=
operator|new
name|SkipBar
argument_list|(
name|this
argument_list|,
name|cm
argument_list|)
decl_stmt|;
name|diffTable
operator|.
name|add
argument_list|(
name|bar
argument_list|)
expr_stmt|;
name|Configuration
name|markerConfig
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"collapsed"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"inclusiveLeft"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"inclusiveRight"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|lineWidgetConfig
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"noHScroll"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|markStart
operator|==
literal|0
condition|)
block|{
name|bar
operator|.
name|setWidget
argument_list|(
name|addLineWidget
argument_list|(
name|cm
argument_list|,
name|markEnd
operator|+
literal|1
argument_list|,
name|bar
argument_list|,
name|lineWidgetConfig
operator|.
name|set
argument_list|(
literal|"above"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bar
operator|.
name|setWidget
argument_list|(
name|addLineWidget
argument_list|(
name|cm
argument_list|,
name|markStart
operator|-
literal|1
argument_list|,
name|bar
argument_list|,
name|lineWidgetConfig
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bar
operator|.
name|setMarker
argument_list|(
name|cm
operator|.
name|markText
argument_list|(
name|CodeMirror
operator|.
name|pos
argument_list|(
name|markStart
argument_list|,
literal|0
argument_list|)
argument_list|,
name|CodeMirror
operator|.
name|pos
argument_list|(
name|markEnd
argument_list|)
argument_list|,
name|markerConfig
argument_list|)
argument_list|,
name|size
argument_list|)
expr_stmt|;
return|return
name|bar
return|;
block|}
DECL|method|otherCm (CodeMirror me)
specifier|private
name|CodeMirror
name|otherCm
parameter_list|(
name|CodeMirror
name|me
parameter_list|)
block|{
return|return
name|me
operator|==
name|cmA
condition|?
name|cmB
else|:
name|cmA
return|;
block|}
DECL|method|getPatchSetIdFromSide (DisplaySide side)
specifier|private
name|PatchSet
operator|.
name|Id
name|getPatchSetIdFromSide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|!=
literal|null
condition|?
name|base
else|:
name|revision
return|;
block|}
DECL|method|getCmFromSide (DisplaySide side)
specifier|private
name|CodeMirror
name|getCmFromSide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|cmA
else|:
name|cmB
return|;
block|}
DECL|method|getSideFromCm (CodeMirror cm)
specifier|private
name|DisplaySide
name|getSideFromCm
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
name|cm
operator|==
name|cmA
condition|?
name|DisplaySide
operator|.
name|A
else|:
name|DisplaySide
operator|.
name|B
return|;
block|}
DECL|method|getStoredSideFromDisplaySide (DisplaySide side)
name|Side
name|getStoredSideFromDisplaySide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|==
literal|null
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
return|;
block|}
DECL|method|markEdit (CodeMirror cm, JsArrayString lines, JsArray<Span> edits, int startLine)
specifier|private
name|void
name|markEdit
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|JsArrayString
name|lines
parameter_list|,
name|JsArray
argument_list|<
name|Span
argument_list|>
name|edits
parameter_list|,
name|int
name|startLine
parameter_list|)
block|{
if|if
condition|(
name|edits
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|EditIterator
name|iter
init|=
operator|new
name|EditIterator
argument_list|(
name|lines
argument_list|,
name|startLine
argument_list|)
decl_stmt|;
name|Configuration
name|intralineBgOpt
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"className"
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|intralineBg
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Configuration
name|diffOpt
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"className"
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LineCharacter
name|last
init|=
name|CodeMirror
operator|.
name|pos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|edits
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Span
name|span
init|=
name|edits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|LineCharacter
name|from
init|=
name|iter
operator|.
name|advance
argument_list|(
name|span
operator|.
name|skip
argument_list|()
argument_list|)
decl_stmt|;
name|LineCharacter
name|to
init|=
name|iter
operator|.
name|advance
argument_list|(
name|span
operator|.
name|mark
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|fromLine
init|=
name|from
operator|.
name|getLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|last
operator|.
name|getLine
argument_list|()
operator|==
name|fromLine
condition|)
block|{
name|markers
operator|.
name|add
argument_list|(
name|cm
operator|.
name|markText
argument_list|(
name|last
argument_list|,
name|from
argument_list|,
name|intralineBgOpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|markers
operator|.
name|add
argument_list|(
name|cm
operator|.
name|markText
argument_list|(
name|CodeMirror
operator|.
name|pos
argument_list|(
name|fromLine
argument_list|,
literal|0
argument_list|)
argument_list|,
name|from
argument_list|,
name|intralineBgOpt
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|markers
operator|.
name|add
argument_list|(
name|cm
operator|.
name|markText
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|diffOpt
argument_list|)
argument_list|)
expr_stmt|;
name|last
operator|=
name|to
expr_stmt|;
name|colorLines
argument_list|(
name|cm
argument_list|,
name|LineClassWhere
operator|.
name|BACKGROUND
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|diff
argument_list|()
argument_list|,
name|fromLine
argument_list|,
name|to
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|colorLines (CodeMirror cm, String color, int line, int cnt)
specifier|private
name|void
name|colorLines
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|String
name|color
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
name|colorLines
argument_list|(
name|cm
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|color
argument_list|,
name|line
argument_list|,
name|line
operator|+
name|cnt
argument_list|)
expr_stmt|;
block|}
DECL|method|colorLines (final CodeMirror cm, final LineClassWhere where, final String className, final int start, final int end)
specifier|private
name|void
name|colorLines
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|,
specifier|final
name|LineClassWhere
name|where
parameter_list|,
specifier|final
name|String
name|className
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
block|{
if|if
condition|(
name|start
operator|<
name|end
condition|)
block|{
for|for
control|(
name|int
name|line
init|=
name|start
init|;
name|line
operator|<
name|end
condition|;
name|line
operator|++
control|)
block|{
name|cm
operator|.
name|addLineClass
argument_list|(
name|line
argument_list|,
name|where
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
name|undoLineClass
operator|.
name|add
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|line
init|=
name|start
init|;
name|line
operator|<
name|end
condition|;
name|line
operator|++
control|)
block|{
name|cm
operator|.
name|removeLineClass
argument_list|(
name|line
argument_list|,
name|where
argument_list|,
name|className
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addDiffChunkAndPadding (CodeMirror cmToPad, int lineToPad, int lineOnOther, int chunkSize, boolean edit)
specifier|private
name|void
name|addDiffChunkAndPadding
parameter_list|(
name|CodeMirror
name|cmToPad
parameter_list|,
name|int
name|lineToPad
parameter_list|,
name|int
name|lineOnOther
parameter_list|,
name|int
name|chunkSize
parameter_list|,
name|boolean
name|edit
parameter_list|)
block|{
name|CodeMirror
name|otherCm
init|=
name|otherCm
argument_list|(
name|cmToPad
argument_list|)
decl_stmt|;
name|linePaddingOnOtherSideMap
operator|.
name|put
argument_list|(
name|otherCm
operator|.
name|getLineHandle
argument_list|(
name|lineOnOther
argument_list|)
argument_list|,
operator|new
name|LinePaddingWidgetWrapper
argument_list|(
name|addPaddingWidget
argument_list|(
name|cmToPad
argument_list|,
name|lineToPad
argument_list|,
literal|0
argument_list|,
name|Unit
operator|.
name|EM
argument_list|,
literal|null
argument_list|)
argument_list|,
name|lineToPad
argument_list|,
name|chunkSize
argument_list|)
argument_list|)
expr_stmt|;
name|diffChunks
operator|.
name|add
argument_list|(
operator|new
name|DiffChunkInfo
argument_list|(
name|getSideFromCm
argument_list|(
name|otherCm
argument_list|)
argument_list|,
name|lineOnOther
operator|-
name|chunkSize
operator|+
literal|1
argument_list|,
name|lineOnOther
argument_list|,
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addPaddingWidget (CodeMirror cm, int line, double height, Unit unit, Integer index)
specifier|private
name|PaddingWidgetWrapper
name|addPaddingWidget
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|line
parameter_list|,
name|double
name|height
parameter_list|,
name|Unit
name|unit
parameter_list|,
name|Integer
name|index
parameter_list|)
block|{
name|SimplePanel
name|padding
init|=
operator|new
name|SimplePanel
argument_list|()
decl_stmt|;
name|padding
operator|.
name|setStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|padding
argument_list|()
argument_list|)
expr_stmt|;
name|padding
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|height
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"above"
argument_list|,
name|line
operator|==
operator|-
literal|1
argument_list|)
operator|.
name|set
argument_list|(
literal|"noHScroll"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|config
operator|=
name|config
operator|.
name|set
argument_list|(
literal|"insertAt"
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
name|LineWidget
name|widget
init|=
name|addLineWidget
argument_list|(
name|cm
argument_list|,
name|line
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|line
argument_list|,
name|padding
argument_list|,
name|config
argument_list|)
decl_stmt|;
return|return
operator|new
name|PaddingWidgetWrapper
argument_list|(
name|widget
argument_list|,
name|padding
operator|.
name|getElement
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * A LineWidget needs to be added to diffTable in order to respond to browser    * events, but CodeMirror doesn't render the widget until the containing line    * is scrolled into viewportMargin, causing it to appear at the bottom of the    * DOM upon loading. Fix by hiding the widget until it is first scrolled into    * view (when CodeMirror fires a "redraw" event on the widget).    */
DECL|method|addLineWidget (CodeMirror cm, int line, final Widget widget, Configuration options)
specifier|private
name|LineWidget
name|addLineWidget
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|line
parameter_list|,
specifier|final
name|Widget
name|widget
parameter_list|,
name|Configuration
name|options
parameter_list|)
block|{
name|widget
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|LineWidget
name|lineWidget
init|=
name|cm
operator|.
name|addLineWidget
argument_list|(
name|line
argument_list|,
name|widget
operator|.
name|getElement
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|lineWidget
operator|.
name|onFirstRedraw
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|widget
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|lineWidget
return|;
block|}
DECL|method|clearActiveLine (CodeMirror cm)
specifier|private
name|void
name|clearActiveLine
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
if|if
condition|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|LineHandle
name|activeLine
init|=
name|cm
operator|.
name|getActiveLine
argument_list|()
decl_stmt|;
name|cm
operator|.
name|removeLineClass
argument_list|(
name|activeLine
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setActiveLine
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|adjustGutters (final CodeMirror cm)
specifier|private
name|Runnable
name|adjustGutters
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Viewport
name|fromTo
init|=
name|cm
operator|.
name|getViewport
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|fromTo
operator|.
name|getTo
argument_list|()
operator|-
name|fromTo
operator|.
name|getFrom
argument_list|()
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|getOldViewportSize
argument_list|()
operator|==
name|size
condition|)
block|{
return|return;
block|}
name|cm
operator|.
name|setOldViewportSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|sidePanel
operator|.
name|adjustGutters
argument_list|(
name|cmB
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|updateActiveLine (final CodeMirror cm)
specifier|private
name|Runnable
name|updateActiveLine
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|other
init|=
name|otherCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|/**          * The rendering of active lines has to be deferred. Reflow          * caused by adding and removing styles chokes Firefox when arrow          * key (or j/k) is held down. Performance on Chrome is fine          * without the deferral.          */
name|defer
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandleVisualStart
argument_list|(
name|cm
operator|.
name|getCursor
argument_list|(
literal|"end"
argument_list|)
operator|.
name|getLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
operator|&&
name|cm
operator|.
name|getActiveLine
argument_list|()
operator|.
name|equals
argument_list|(
name|handle
argument_list|)
condition|)
block|{
return|return;
block|}
name|clearActiveLine
argument_list|(
name|cm
argument_list|)
expr_stmt|;
name|clearActiveLine
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setActiveLine
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addLineClass
argument_list|(
name|handle
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
name|LineOnOtherInfo
name|info
init|=
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|getSideFromCm
argument_list|(
name|cm
argument_list|)
argument_list|,
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isAligned
argument_list|()
condition|)
block|{
name|LineHandle
name|oLineHandle
init|=
name|other
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|getLine
argument_list|()
argument_list|)
decl_stmt|;
name|other
operator|.
name|setActiveLine
argument_list|(
name|oLineHandle
argument_list|)
expr_stmt|;
name|other
operator|.
name|addLineClass
argument_list|(
name|oLineHandle
argument_list|,
name|LineClassWhere
operator|.
name|WRAP
argument_list|,
name|DiffTable
operator|.
name|style
operator|.
name|activeLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|onGutterClick (final CodeMirror cm)
specifier|private
name|GutterClickHandler
name|onGutterClick
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|GutterClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CodeMirror
name|instance
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|gutter
parameter_list|,
name|NativeEvent
name|clickEvent
parameter_list|)
block|{
if|if
condition|(
name|clickEvent
operator|.
name|getButton
argument_list|()
operator|==
name|NativeEvent
operator|.
name|BUTTON_LEFT
operator|&&
operator|!
name|clickEvent
operator|.
name|getMetaKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getAltKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getShiftKey
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
operator|&&
name|cm
operator|.
name|getLineNumber
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
operator|==
name|line
operator|)
condition|)
block|{
name|cm
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|insertNewDraft
argument_list|(
name|cm
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|insertNewDraft (final CodeMirror cm)
specifier|private
name|Runnable
name|insertNewDraft
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getActiveLine
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|CommentBox
name|box
init|=
name|lineActiveBoxMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|FromTo
name|fromTo
init|=
name|cm
operator|.
name|getSelectedRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|somethingSelected
argument_list|()
condition|)
block|{
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|addNewDraft
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
name|fromTo
operator|.
name|getTo
argument_list|()
operator|.
name|getLine
argument_list|()
operator|==
name|line
condition|?
name|fromTo
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setSelection
argument_list|(
name|cm
operator|.
name|getCursor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
name|lineActiveBoxMap
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|addNewDraft
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|box
operator|instanceof
name|DraftBox
condition|)
block|{
operator|(
operator|(
name|DraftBox
operator|)
name|box
operator|)
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|PublishedBox
operator|)
name|box
operator|)
operator|.
name|doReply
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|toggleOpenBox (final CodeMirror cm)
specifier|private
name|Runnable
name|toggleOpenBox
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CommentBox
name|box
init|=
name|lineActiveBoxMap
operator|.
name|get
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|!=
literal|null
condition|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
operator|!
name|box
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|upToChange (final boolean openReplyBox)
specifier|private
name|Runnable
name|upToChange
parameter_list|(
specifier|final
name|boolean
name|openReplyBox
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|unsaved
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|goUpToChange
argument_list|(
name|openReplyBox
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|saveAllDrafts
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|goUpToChange
argument_list|(
name|openReplyBox
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|goUpToChange (boolean openReplyBox)
specifier|private
name|void
name|goUpToChange
parameter_list|(
name|boolean
name|openReplyBox
parameter_list|)
block|{
name|String
name|b
init|=
name|base
operator|!=
literal|null
condition|?
name|String
operator|.
name|valueOf
argument_list|(
name|base
operator|.
name|get
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|rev
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|revision
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|changeId
argument_list|,
name|rev
argument_list|)
argument_list|,
operator|new
name|ChangeScreen2
argument_list|(
name|changeId
argument_list|,
name|b
argument_list|,
name|rev
argument_list|,
name|openReplyBox
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|openClosePublished (final CodeMirror cm)
specifier|private
name|Runnable
name|openClosePublished
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
name|linePublishedBoxesMap
operator|.
name|get
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|open
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PublishedBox
name|box
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|box
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|open
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|PublishedBox
name|box
range|:
name|list
control|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
name|open
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|toggleReviewed ()
specifier|private
name|Runnable
name|toggleReviewed
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|header
operator|.
name|setReviewed
argument_list|(
operator|!
name|header
operator|.
name|isReviewed
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|moveCursorToSide (final CodeMirror cmSrc, DisplaySide sideDst)
specifier|private
name|Runnable
name|moveCursorToSide
parameter_list|(
specifier|final
name|CodeMirror
name|cmSrc
parameter_list|,
name|DisplaySide
name|sideDst
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|cmDst
init|=
name|getCmFromSide
argument_list|(
name|sideDst
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmDst
operator|==
name|cmSrc
condition|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{         }
block|}
return|;
block|}
specifier|final
name|DisplaySide
name|sideSrc
init|=
name|getSideFromCm
argument_list|(
name|cmSrc
argument_list|)
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cmSrc
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|cmDst
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|sideSrc
argument_list|,
name|cmSrc
operator|.
name|getLineNumber
argument_list|(
name|cmSrc
operator|.
name|getActiveLine
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cmDst
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|maybeNextVimSearch (final CodeMirror cm)
specifier|private
name|Runnable
name|maybeNextVimSearch
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|hasVimSearchHighlight
argument_list|()
condition|)
block|{
name|CodeMirror
operator|.
name|handleVimKey
argument_list|(
name|cm
argument_list|,
literal|"n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffChunkNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|NEXT
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|diffChunkNav (final CodeMirror cm, final Direction dir)
specifier|private
name|Runnable
name|diffChunkNav
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|,
specifier|final
name|Direction
name|dir
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|line
init|=
name|cm
operator|.
name|hasActiveLine
argument_list|()
condition|?
name|cm
operator|.
name|getLineNumber
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
else|:
literal|0
decl_stmt|;
name|int
name|res
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffChunks
argument_list|,
operator|new
name|DiffChunkInfo
argument_list|(
name|getSideFromCm
argument_list|(
name|cm
argument_list|)
argument_list|,
name|line
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
name|getDiffChunkComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
condition|)
block|{
name|res
operator|=
operator|-
name|res
operator|-
operator|(
name|dir
operator|==
name|Direction
operator|.
name|PREV
condition|?
literal|1
else|:
literal|2
operator|)
expr_stmt|;
block|}
name|res
operator|=
name|res
operator|+
operator|(
name|dir
operator|==
name|Direction
operator|.
name|PREV
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
operator|||
name|diffChunks
operator|.
name|size
argument_list|()
operator|<=
name|res
condition|)
block|{
return|return;
block|}
name|DiffChunkInfo
name|lookUp
init|=
name|diffChunks
operator|.
name|get
argument_list|(
name|res
argument_list|)
decl_stmt|;
comment|// If edit, skip the deletion chunk and set focus on the insertion one.
if|if
condition|(
name|lookUp
operator|.
name|isEdit
argument_list|()
operator|&&
name|lookUp
operator|.
name|getSide
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
condition|)
block|{
name|res
operator|=
name|res
operator|+
operator|(
name|dir
operator|==
name|Direction
operator|.
name|PREV
condition|?
operator|-
literal|1
else|:
literal|1
operator|)
expr_stmt|;
if|if
condition|(
name|res
operator|<
literal|0
operator|||
name|diffChunks
operator|.
name|size
argument_list|()
operator|<=
name|res
condition|)
block|{
return|return;
block|}
block|}
name|DiffChunkInfo
name|target
init|=
name|diffChunks
operator|.
name|get
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|CodeMirror
name|targetCm
init|=
name|getCmFromSide
argument_list|(
name|target
operator|.
name|getSide
argument_list|()
argument_list|)
decl_stmt|;
name|targetCm
operator|.
name|setCursor
argument_list|(
name|LineCharacter
operator|.
name|create
argument_list|(
name|target
operator|.
name|getStart
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|targetCm
operator|.
name|focus
argument_list|()
expr_stmt|;
name|targetCm
operator|.
name|scrollToY
argument_list|(
name|targetCm
operator|.
name|heightAtLine
argument_list|(
name|target
operator|.
name|getStart
argument_list|()
argument_list|,
literal|"local"
argument_list|)
operator|-
literal|0.5
operator|*
name|cmB
operator|.
name|getScrollbarV
argument_list|()
operator|.
name|getClientHeight
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
comment|/**    * Diff chunks are ordered by their starting lines. If it's a deletion,    * use its corresponding line on the revision side for comparison. In    * the edit case, put the deletion chunk right before the insertion chunk.    * This placement guarantees well-ordering.    */
DECL|method|getDiffChunkComparator ()
specifier|private
name|Comparator
argument_list|<
name|DiffChunkInfo
argument_list|>
name|getDiffChunkComparator
parameter_list|()
block|{
return|return
operator|new
name|Comparator
argument_list|<
name|DiffChunkInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DiffChunkInfo
name|o1
parameter_list|,
name|DiffChunkInfo
name|o2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|.
name|getSide
argument_list|()
operator|==
name|o2
operator|.
name|getSide
argument_list|()
condition|)
block|{
return|return
name|o1
operator|.
name|getStart
argument_list|()
operator|-
name|o2
operator|.
name|getStart
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|.
name|getSide
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
condition|)
block|{
name|int
name|comp
init|=
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|o1
operator|.
name|getSide
argument_list|()
argument_list|,
name|o1
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getLine
argument_list|()
operator|-
name|o2
operator|.
name|getStart
argument_list|()
decl_stmt|;
return|return
name|comp
operator|==
literal|0
condition|?
operator|-
literal|1
else|:
name|comp
return|;
block|}
else|else
block|{
name|int
name|comp
init|=
name|o1
operator|.
name|getStart
argument_list|()
operator|-
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|o2
operator|.
name|getSide
argument_list|()
argument_list|,
name|o2
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getLine
argument_list|()
decl_stmt|;
return|return
name|comp
operator|==
literal|0
condition|?
literal|1
else|:
name|comp
return|;
block|}
block|}
block|}
return|;
block|}
DECL|method|getDiffChunk (DisplaySide side, int line)
specifier|private
name|DiffChunkInfo
name|getDiffChunk
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|int
name|res
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|diffChunks
argument_list|,
operator|new
name|DiffChunkInfo
argument_list|(
name|side
argument_list|,
name|line
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|// Dummy DiffChunkInfo
name|getDiffChunkComparator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|>=
literal|0
condition|)
block|{
return|return
name|diffChunks
operator|.
name|get
argument_list|(
name|res
argument_list|)
return|;
block|}
else|else
block|{
comment|// The line might be within a DiffChunk
name|res
operator|=
operator|-
name|res
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|res
operator|>
literal|0
condition|)
block|{
name|DiffChunkInfo
name|info
init|=
name|diffChunks
operator|.
name|get
argument_list|(
name|res
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|getSide
argument_list|()
operator|==
name|side
operator|&&
name|info
operator|.
name|getStart
argument_list|()
operator|<=
name|line
operator|&&
name|line
operator|<=
name|info
operator|.
name|getEnd
argument_list|()
condition|)
block|{
return|return
name|info
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|defer (Runnable thunk)
name|void
name|defer
parameter_list|(
name|Runnable
name|thunk
parameter_list|)
block|{
if|if
condition|(
name|deferred
operator|==
literal|null
condition|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Runnable
argument_list|>
argument_list|()
decl_stmt|;
name|deferred
operator|=
name|list
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|deferred
operator|=
literal|null
expr_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|Runnable
name|thunk
range|:
name|list
control|)
block|{
name|thunk
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|deferred
operator|.
name|add
argument_list|(
name|thunk
argument_list|)
expr_stmt|;
block|}
DECL|method|resizePaddingOnOtherSide (DisplaySide mySide, int line)
name|void
name|resizePaddingOnOtherSide
parameter_list|(
name|DisplaySide
name|mySide
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|mySide
argument_list|)
decl_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
specifier|final
name|LinePaddingWidgetWrapper
name|otherWrapper
init|=
name|linePaddingOnOtherSideMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|double
name|myChunkHeight
init|=
name|cm
operator|.
name|heightAtLine
argument_list|(
name|line
operator|+
literal|1
argument_list|)
operator|-
name|cm
operator|.
name|heightAtLine
argument_list|(
name|line
operator|-
name|otherWrapper
operator|.
name|getChunkLength
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|Element
name|otherPadding
init|=
name|otherWrapper
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|otherPaddingHeight
init|=
name|otherPadding
operator|.
name|getOffsetHeight
argument_list|()
decl_stmt|;
name|CodeMirror
name|otherCm
init|=
name|otherCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|int
name|otherLine
init|=
name|otherWrapper
operator|.
name|getOtherLine
argument_list|()
decl_stmt|;
name|LineHandle
name|other
init|=
name|otherCm
operator|.
name|getLineHandle
argument_list|(
name|otherLine
argument_list|)
decl_stmt|;
if|if
condition|(
name|linePaddingOnOtherSideMap
operator|.
name|containsKey
argument_list|(
name|other
argument_list|)
condition|)
block|{
name|LinePaddingWidgetWrapper
name|myWrapper
init|=
name|linePaddingOnOtherSideMap
operator|.
name|get
argument_list|(
name|other
argument_list|)
decl_stmt|;
name|Element
name|myPadding
init|=
name|linePaddingOnOtherSideMap
operator|.
name|get
argument_list|(
name|other
argument_list|)
operator|.
name|getElement
argument_list|()
decl_stmt|;
name|int
name|myPaddingHeight
init|=
name|myPadding
operator|.
name|getOffsetHeight
argument_list|()
decl_stmt|;
name|myChunkHeight
operator|-=
name|myPaddingHeight
expr_stmt|;
name|double
name|otherChunkHeight
init|=
name|otherCm
operator|.
name|heightAtLine
argument_list|(
name|otherLine
operator|+
literal|1
argument_list|)
operator|-
name|otherCm
operator|.
name|heightAtLine
argument_list|(
name|otherLine
operator|-
name|myWrapper
operator|.
name|getChunkLength
argument_list|()
operator|+
literal|1
argument_list|)
operator|-
name|otherPaddingHeight
decl_stmt|;
name|double
name|delta
init|=
name|myChunkHeight
operator|-
name|otherChunkHeight
decl_stmt|;
if|if
condition|(
name|delta
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|myPaddingHeight
operator|!=
literal|0
condition|)
block|{
name|setHeightInPx
argument_list|(
name|myPadding
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|myWrapper
operator|.
name|getWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|otherPaddingHeight
operator|!=
name|delta
condition|)
block|{
name|setHeightInPx
argument_list|(
name|otherPadding
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|otherWrapper
operator|.
name|getWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|myPaddingHeight
operator|!=
operator|-
name|delta
condition|)
block|{
name|setHeightInPx
argument_list|(
name|myPadding
argument_list|,
operator|-
name|delta
argument_list|)
expr_stmt|;
name|myWrapper
operator|.
name|getWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|otherPaddingHeight
operator|!=
literal|0
condition|)
block|{
name|setHeightInPx
argument_list|(
name|otherPadding
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|otherWrapper
operator|.
name|getWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|otherPaddingHeight
operator|!=
name|myChunkHeight
condition|)
block|{
name|setHeightInPx
argument_list|(
name|otherPadding
argument_list|,
name|myChunkHeight
argument_list|)
expr_stmt|;
name|otherWrapper
operator|.
name|getWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
block|}
comment|// TODO: Maybe integrate this with PaddingManager.
DECL|method|resizeLinePadding (final DisplaySide side)
specifier|private
name|RenderLineHandler
name|resizeLinePadding
parameter_list|(
specifier|final
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
operator|new
name|RenderLineHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
specifier|final
name|CodeMirror
name|instance
parameter_list|,
specifier|final
name|LineHandle
name|handle
parameter_list|,
name|Element
name|element
parameter_list|)
block|{
if|if
condition|(
name|lineActiveBoxMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|lineActiveBoxMap
operator|.
name|get
argument_list|(
name|handle
argument_list|)
operator|.
name|resizePaddingWidget
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|linePaddingOnOtherSideMap
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|defer
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resizePaddingOnOtherSide
argument_list|(
name|side
argument_list|,
name|instance
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|resizeCodeMirror ()
name|void
name|resizeCodeMirror
parameter_list|()
block|{
name|int
name|height
init|=
name|getCodeMirrorHeight
argument_list|()
decl_stmt|;
name|cmA
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|sidePanel
operator|.
name|adjustGutters
argument_list|(
name|cmB
argument_list|)
expr_stmt|;
block|}
DECL|method|getCodeMirrorHeight ()
specifier|private
name|int
name|getCodeMirrorHeight
parameter_list|()
block|{
name|int
name|rest
init|=
name|Gerrit
operator|.
name|getHeaderFooterHeight
argument_list|()
operator|+
name|header
operator|.
name|getOffsetHeight
argument_list|()
operator|+
name|diffTable
operator|.
name|getHeaderHeight
argument_list|()
operator|+
literal|5
decl_stmt|;
comment|// Estimate
return|return
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|rest
return|;
block|}
DECL|method|setHeightInPx (Element ele, double height)
specifier|static
name|void
name|setHeightInPx
parameter_list|(
name|Element
name|ele
parameter_list|,
name|double
name|height
parameter_list|)
block|{
name|ele
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|height
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
block|}
DECL|method|getContentType (DiffInfo.FileMeta meta)
specifier|private
name|String
name|getContentType
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|)
block|{
return|return
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
operator|&&
name|meta
operator|!=
literal|null
operator|&&
name|meta
operator|.
name|content_type
argument_list|()
operator|!=
literal|null
condition|?
name|ModeInjector
operator|.
name|getContentType
argument_list|(
name|meta
operator|.
name|content_type
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
DECL|method|injectMode (DiffInfo diffInfo, AsyncCallback<Void> cb)
specifier|private
name|void
name|injectMode
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|,
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|cb
parameter_list|)
block|{
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diffInfo
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diffInfo
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrefs ()
name|DiffPreferences
name|getPrefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
DECL|method|getCmA ()
name|CodeMirror
name|getCmA
parameter_list|()
block|{
return|return
name|cmA
return|;
block|}
DECL|method|getCmB ()
name|CodeMirror
name|getCmB
parameter_list|()
block|{
return|return
name|cmB
return|;
block|}
DECL|method|operation (final Runnable apply)
name|void
name|operation
parameter_list|(
specifier|final
name|Runnable
name|apply
parameter_list|)
block|{
name|cmA
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmB
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|apply
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|autoReview ()
specifier|private
name|void
name|autoReview
parameter_list|()
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
name|prefs
operator|.
name|autoReview
argument_list|()
condition|)
block|{
name|ChangeApi
operator|.
name|revision
argument_list|(
name|revision
argument_list|)
operator|.
name|view
argument_list|(
literal|"files"
argument_list|)
operator|.
name|id
argument_list|(
name|path
argument_list|)
operator|.
name|view
argument_list|(
literal|"reviewed"
argument_list|)
operator|.
name|background
argument_list|()
operator|.
name|put
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|ReviewInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ReviewInfo
name|result
parameter_list|)
block|{
name|header
operator|.
name|reviewed
operator|.
name|setValue
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|prefetchNextFile ()
specifier|private
name|void
name|prefetchNextFile
parameter_list|()
block|{
name|String
name|nextPath
init|=
name|header
operator|.
name|getNextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPath
operator|!=
literal|null
condition|)
block|{
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|nextPath
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|info
parameter_list|)
block|{
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|info
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|info
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reloadDiffInfo ()
name|void
name|reloadDiffInfo
parameter_list|()
block|{
specifier|final
name|int
name|id
init|=
operator|++
name|reloadVersionId
decl_stmt|;
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|reloadVersionId
operator|&&
name|isAttached
argument_list|()
condition|)
block|{
name|diff
operator|=
name|diffInfo
expr_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|clearSkipBars
argument_list|()
expr_stmt|;
name|clearMarkers
argument_list|()
expr_stmt|;
name|diffTable
operator|.
name|sidePanel
operator|.
name|clearDiffGutters
argument_list|()
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|renderSkips
argument_list|(
name|prefs
operator|.
name|context
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|isLargeFile (DiffInfo diffInfo)
specifier|private
specifier|static
name|boolean
name|isLargeFile
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
return|return
operator|(
name|diffInfo
operator|.
name|meta_a
argument_list|()
operator|!=
literal|null
operator|&&
name|diffInfo
operator|.
name|meta_a
argument_list|()
operator|.
name|lines
argument_list|()
operator|>
literal|500
operator|)
operator|||
operator|(
name|diffInfo
operator|.
name|meta_b
argument_list|()
operator|!=
literal|null
operator|&&
name|diffInfo
operator|.
name|meta_b
argument_list|()
operator|.
name|lines
argument_list|()
operator|>
literal|500
operator|)
return|;
block|}
block|}
end_class

end_unit

