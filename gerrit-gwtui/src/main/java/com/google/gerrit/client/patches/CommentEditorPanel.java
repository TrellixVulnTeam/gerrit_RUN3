begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|DoubleClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|DoubleClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|NpTextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|common
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_class
DECL|class|CommentEditorPanel
specifier|public
class|class
name|CommentEditorPanel
extends|extends
name|CommentPanel
implements|implements
name|ClickHandler
implements|,
name|DoubleClickHandler
block|{
DECL|field|INITIAL_COLS
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_COLS
init|=
literal|60
decl_stmt|;
DECL|field|INITIAL_LINES
specifier|private
specifier|static
specifier|final
name|int
name|INITIAL_LINES
init|=
literal|5
decl_stmt|;
DECL|field|MAX_LINES
specifier|private
specifier|static
specifier|final
name|int
name|MAX_LINES
init|=
literal|30
decl_stmt|;
DECL|field|NULL_CALLBACK
specifier|private
specifier|static
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|NULL_CALLBACK
init|=
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{         }
block|}
decl_stmt|;
DECL|field|comment
specifier|private
name|PatchLineComment
name|comment
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|NpTextArea
name|text
decl_stmt|;
DECL|field|edit
specifier|private
specifier|final
name|Button
name|edit
decl_stmt|;
DECL|field|save
specifier|private
specifier|final
name|Button
name|save
decl_stmt|;
DECL|field|cancel
specifier|private
specifier|final
name|Button
name|cancel
decl_stmt|;
DECL|field|discard
specifier|private
specifier|final
name|Button
name|discard
decl_stmt|;
DECL|field|expandTimer
specifier|private
specifier|final
name|Timer
name|expandTimer
decl_stmt|;
DECL|method|CommentEditorPanel (final PatchLineComment plc, final CommentLinkProcessor commentLinkProcessor)
specifier|public
name|CommentEditorPanel
parameter_list|(
specifier|final
name|PatchLineComment
name|plc
parameter_list|,
specifier|final
name|CommentLinkProcessor
name|commentLinkProcessor
parameter_list|)
block|{
name|super
argument_list|(
name|commentLinkProcessor
argument_list|)
expr_stmt|;
name|comment
operator|=
name|plc
expr_stmt|;
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentEditorPanel
argument_list|()
argument_list|)
expr_stmt|;
name|setAuthorNameText
argument_list|(
name|Gerrit
operator|.
name|getUserAccountInfo
argument_list|()
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|draft
argument_list|()
argument_list|)
expr_stmt|;
name|setMessageText
argument_list|(
name|plc
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|addDoubleClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|expandTimer
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|expandText
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|text
operator|=
operator|new
name|NpTextArea
argument_list|()
expr_stmt|;
name|text
operator|.
name|setText
argument_list|(
name|comment
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|text
operator|.
name|setCharacterWidth
argument_list|(
name|INITIAL_COLS
argument_list|)
expr_stmt|;
name|text
operator|.
name|setVisibleLines
argument_list|(
name|INITIAL_LINES
argument_list|)
expr_stmt|;
name|text
operator|.
name|setSpellCheck
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|addKeyDownHandler
argument_list|(
operator|new
name|KeyDownHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
specifier|final
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|(
name|event
operator|.
name|isControlKeyDown
argument_list|()
operator|||
name|event
operator|.
name|isMetaKeyDown
argument_list|()
operator|)
operator|&&
operator|!
name|event
operator|.
name|isAltKeyDown
argument_list|()
operator|&&
operator|!
name|event
operator|.
name|isShiftKeyDown
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
condition|)
block|{
case|case
literal|'s'
case|:
case|case
literal|'S'
case|:
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|onSave
argument_list|(
name|NULL_CALLBACK
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|expandTimer
operator|.
name|schedule
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addContent
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|edit
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|edit
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonEdit
argument_list|()
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|save
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|save
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonSave
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|cancel
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|cancel
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonCancel
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
name|discard
operator|=
operator|new
name|Button
argument_list|()
expr_stmt|;
name|discard
operator|.
name|setText
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonDiscard
argument_list|()
argument_list|)
expr_stmt|;
name|discard
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|discard
argument_list|)
expr_stmt|;
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNew
argument_list|()
condition|)
block|{
name|edit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|render
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|expandText ()
specifier|private
name|void
name|expandText
parameter_list|()
block|{
specifier|final
name|double
name|cols
init|=
name|text
operator|.
name|getCharacterWidth
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
literal|2
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|line
range|:
name|text
operator|.
name|getText
argument_list|()
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
control|)
block|{
name|rows
operator|+=
name|Math
operator|.
name|ceil
argument_list|(
operator|(
literal|1.0
operator|+
name|line
operator|.
name|length
argument_list|()
operator|)
operator|/
name|cols
argument_list|)
expr_stmt|;
block|}
name|rows
operator|=
name|Math
operator|.
name|max
argument_list|(
name|INITIAL_LINES
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|rows
argument_list|,
name|MAX_LINES
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|.
name|getVisibleLines
argument_list|()
operator|!=
name|rows
condition|)
block|{
name|text
operator|.
name|setVisibleLines
argument_list|(
name|rows
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|edit ()
specifier|private
name|void
name|edit
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|setText
argument_list|(
name|comment
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|expandText
argument_list|()
expr_stmt|;
name|stateEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|text
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|render ()
specifier|private
name|void
name|render
parameter_list|()
block|{
specifier|final
name|Timestamp
name|on
init|=
name|comment
operator|.
name|getWrittenOn
argument_list|()
decl_stmt|;
name|setDateText
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|draftSaved
argument_list|(
operator|new
name|java
operator|.
name|util
operator|.
name|Date
argument_list|(
name|on
operator|.
name|getTime
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setMessageText
argument_list|(
name|comment
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|stateEdit
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|stateEdit (final boolean inEdit)
specifier|private
name|void
name|stateEdit
parameter_list|(
specifier|final
name|boolean
name|inEdit
parameter_list|)
block|{
name|expandTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|setMessageTextVisible
argument_list|(
operator|!
name|inEdit
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setVisible
argument_list|(
operator|!
name|inEdit
argument_list|)
expr_stmt|;
if|if
condition|(
name|inEdit
condition|)
block|{
name|text
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|.
name|setFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|save
operator|.
name|setVisible
argument_list|(
name|inEdit
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setVisible
argument_list|(
name|inEdit
operator|&&
operator|!
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setVisible
argument_list|(
name|inEdit
argument_list|)
expr_stmt|;
block|}
DECL|method|setFocus (final boolean take)
name|void
name|setFocus
parameter_list|(
specifier|final
name|boolean
name|take
parameter_list|)
block|{
if|if
condition|(
name|take
operator|&&
operator|!
name|isOpen
argument_list|()
condition|)
block|{
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|text
operator|.
name|setFocus
argument_list|(
name|take
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|take
condition|)
block|{
name|edit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|isNew ()
name|boolean
name|isNew
parameter_list|()
block|{
return|return
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
operator|==
literal|null
return|;
block|}
DECL|method|getComment ()
specifier|public
name|PatchLineComment
name|getComment
parameter_list|()
block|{
return|return
name|comment
return|;
block|}
annotation|@
name|Override
DECL|method|onDoubleClick (final DoubleClickEvent event)
specifier|public
name|void
name|onDoubleClick
parameter_list|(
specifier|final
name|DoubleClickEvent
name|event
parameter_list|)
block|{
name|edit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClick (final ClickEvent event)
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|Widget
name|sender
init|=
operator|(
name|Widget
operator|)
name|event
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|sender
operator|==
name|edit
condition|)
block|{
name|edit
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sender
operator|==
name|save
condition|)
block|{
name|onSave
argument_list|(
name|NULL_CALLBACK
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sender
operator|==
name|cancel
condition|)
block|{
name|render
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sender
operator|==
name|discard
condition|)
block|{
name|onDiscard
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|saveDraft (AsyncCallback<VoidResult> onSave)
specifier|public
name|void
name|saveDraft
parameter_list|(
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|onSave
parameter_list|)
block|{
if|if
condition|(
name|isOpen
argument_list|()
operator|&&
name|text
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|onSave
argument_list|(
name|onSave
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|onSave
operator|.
name|onSuccess
argument_list|(
name|VoidResult
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onSave (final AsyncCallback<VoidResult> onSave)
specifier|private
name|void
name|onSave
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|onSave
parameter_list|)
block|{
name|expandTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
specifier|final
name|String
name|txt
init|=
name|text
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|txt
argument_list|)
condition|)
block|{
return|return;
block|}
name|comment
operator|.
name|setMessage
argument_list|(
name|txt
argument_list|)
expr_stmt|;
name|text
operator|.
name|setFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|wasNew
init|=
name|isNew
argument_list|()
decl_stmt|;
name|GerritCallback
argument_list|<
name|CommentInfo
argument_list|>
name|cb
init|=
operator|new
name|GerritCallback
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CommentInfo
name|result
parameter_list|)
block|{
name|notifyDraftDelta
argument_list|(
name|wasNew
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|comment
operator|=
name|toComment
argument_list|(
name|psId
argument_list|,
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|render
argument_list|()
expr_stmt|;
name|onSave
operator|.
name|onSuccess
argument_list|(
name|VoidResult
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|onSave
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|CommentInfo
name|input
init|=
name|toInput
argument_list|(
name|comment
argument_list|)
decl_stmt|;
if|if
condition|(
name|wasNew
condition|)
block|{
name|CommentApi
operator|.
name|createDraft
argument_list|(
name|psId
argument_list|,
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CommentApi
operator|.
name|updateDraft
argument_list|(
name|psId
argument_list|,
name|input
operator|.
name|id
argument_list|()
argument_list|,
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyDraftDelta (final int delta)
specifier|private
name|void
name|notifyDraftDelta
parameter_list|(
specifier|final
name|int
name|delta
parameter_list|)
block|{
name|CommentEditorContainer
name|c
init|=
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|notifyDraftDelta
argument_list|(
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onDiscard ()
specifier|private
name|void
name|onDiscard
parameter_list|()
block|{
name|expandTimer
operator|.
name|cancel
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNew
argument_list|()
condition|)
block|{
name|text
operator|.
name|setFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|removeUI
argument_list|()
expr_stmt|;
return|return;
block|}
name|text
operator|.
name|setFocus
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|CommentApi
operator|.
name|deleteDraft
argument_list|(
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|JavaScriptObject
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|JavaScriptObject
name|result
parameter_list|)
block|{
name|notifyDraftDelta
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|removeUI
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|text
operator|.
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|discard
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|removeUI ()
specifier|private
name|void
name|removeUI
parameter_list|()
block|{
name|CommentEditorContainer
name|c
init|=
name|getContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContainer ()
specifier|private
name|CommentEditorContainer
name|getContainer
parameter_list|()
block|{
name|Widget
name|p
init|=
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CommentEditorContainer
condition|)
block|{
return|return
operator|(
name|CommentEditorContainer
operator|)
name|p
return|;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|toInput (PatchLineComment c)
specifier|public
specifier|static
name|CommentInfo
name|toInput
parameter_list|(
name|PatchLineComment
name|c
parameter_list|)
block|{
name|CommentInfo
name|i
init|=
name|CommentInfo
operator|.
name|createObject
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
name|i
operator|.
name|id
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|path
argument_list|(
name|c
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|side
argument_list|(
name|c
operator|.
name|getSide
argument_list|()
operator|==
literal|0
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|getLine
argument_list|()
operator|>
literal|0
condition|)
block|{
name|i
operator|.
name|line
argument_list|(
name|c
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|.
name|in_reply_to
argument_list|(
name|c
operator|.
name|getParentUuid
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|message
argument_list|(
name|c
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|method|toComment (PatchSet.Id ps, String path, CommentInfo i)
specifier|public
specifier|static
name|PatchLineComment
name|toComment
parameter_list|(
name|PatchSet
operator|.
name|Id
name|ps
parameter_list|,
name|String
name|path
parameter_list|,
name|CommentInfo
name|i
parameter_list|)
block|{
name|PatchLineComment
name|p
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|ps
argument_list|,
name|path
argument_list|)
argument_list|,
name|i
operator|.
name|id
argument_list|()
argument_list|)
argument_list|,
name|i
operator|.
name|line
argument_list|()
argument_list|,
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|i
operator|.
name|in_reply_to
argument_list|()
argument_list|,
name|i
operator|.
name|updated
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|setMessage
argument_list|(
name|i
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSide
argument_list|(
call|(
name|short
call|)
argument_list|(
name|i
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|?
literal|0
else|:
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
block|}
end_class

end_unit

