begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|IncludedInInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_comment
comment|/** A collection of static methods which work on the Gerrit REST API for specific changes. */
end_comment

begin_class
DECL|class|ChangeApi
specifier|public
class|class
name|ChangeApi
block|{
comment|/** Abandon the change, ending its review. */
DECL|method|abandon ( @ullable String project, int id, String msg, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|abandon
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|msg
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|MessageInput
name|input
init|=
name|MessageInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
argument_list|(
name|emptyToNull
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"abandon"
argument_list|)
operator|.
name|post
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new change.    *    *<p>The new change is created as DRAFT unless the draft workflow is disabled by    * `change.allowDrafts = false` in the configuration, in which case the new change is created as    * NEW.    */
DECL|method|createChange ( String project, String branch, String topic, String subject, String base, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|createChange
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|branch
parameter_list|,
name|String
name|topic
parameter_list|,
name|String
name|subject
parameter_list|,
name|String
name|base
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|CreateChangeInput
name|input
init|=
name|CreateChangeInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|project
argument_list|(
name|emptyToNull
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|branch
argument_list|(
name|emptyToNull
argument_list|(
name|branch
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|topic
argument_list|(
name|emptyToNull
argument_list|(
name|topic
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|subject
argument_list|(
name|emptyToNull
argument_list|(
name|subject
argument_list|)
argument_list|)
expr_stmt|;
name|input
operator|.
name|baseChange
argument_list|(
name|emptyToNull
argument_list|(
name|base
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|change
argument_list|()
operator|.
name|allowDrafts
argument_list|()
condition|)
block|{
name|input
operator|.
name|status
argument_list|(
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|new
name|RestApi
argument_list|(
literal|"/changes/"
argument_list|)
operator|.
name|post
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Restore a previously abandoned change to be open again. */
DECL|method|restore ( @ullable String project, int id, String msg, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|restore
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|msg
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|MessageInput
name|input
init|=
name|MessageInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
argument_list|(
name|emptyToNull
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"restore"
argument_list|)
operator|.
name|post
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new change that reverts the delta caused by this change. */
DECL|method|revert ( @ullable String project, int id, String msg, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|revert
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|msg
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|MessageInput
name|input
init|=
name|MessageInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|message
argument_list|(
name|emptyToNull
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"revert"
argument_list|)
operator|.
name|post
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Update the topic of a change. */
DECL|method|topic ( @ullable String project, int id, String topic, AsyncCallback<String> cb)
specifier|public
specifier|static
name|void
name|topic
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|topic
parameter_list|,
name|AsyncCallback
argument_list|<
name|String
argument_list|>
name|cb
parameter_list|)
block|{
name|RestApi
name|call
init|=
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"topic"
argument_list|)
decl_stmt|;
name|topic
operator|=
name|emptyToNull
argument_list|(
name|topic
argument_list|)
expr_stmt|;
if|if
condition|(
name|topic
operator|!=
literal|null
condition|)
block|{
name|TopicInput
name|input
init|=
name|TopicInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|topic
argument_list|(
name|topic
argument_list|)
expr_stmt|;
name|call
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|NativeString
operator|.
name|unwrap
argument_list|(
name|cb
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|call
operator|.
name|delete
argument_list|(
name|NativeString
operator|.
name|unwrap
argument_list|(
name|cb
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|detail (@ullable String project, int id, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|detail
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|detail
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|detail (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|detail
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"detail"
argument_list|)
return|;
block|}
DECL|method|blame (@ullable String project, PatchSet.Id id, String path, boolean base)
specifier|public
specifier|static
name|RestApi
name|blame
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|base
parameter_list|)
block|{
return|return
name|revision
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"files"
argument_list|)
operator|.
name|id
argument_list|(
name|path
argument_list|)
operator|.
name|view
argument_list|(
literal|"blame"
argument_list|)
operator|.
name|addParameter
argument_list|(
literal|"base"
argument_list|,
name|base
argument_list|)
return|;
block|}
DECL|method|actions (@ullable String project, int id, String revision)
specifier|public
specifier|static
name|RestApi
name|actions
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
if|if
condition|(
name|revision
operator|==
literal|null
operator|||
name|revision
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|revision
operator|=
literal|"current"
expr_stmt|;
block|}
return|return
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|revision
argument_list|,
literal|"actions"
argument_list|)
return|;
block|}
DECL|method|deleteAssignee ( @ullable String project, int id, AsyncCallback<AccountInfo> cb)
specifier|public
specifier|static
name|void
name|deleteAssignee
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|AccountInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"assignee"
argument_list|)
operator|.
name|delete
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|setAssignee ( @ullable String project, int id, String user, AsyncCallback<AccountInfo> cb)
specifier|public
specifier|static
name|void
name|setAssignee
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|user
parameter_list|,
name|AsyncCallback
argument_list|<
name|AccountInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|AssigneeInput
name|input
init|=
name|AssigneeInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|assignee
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"assignee"
argument_list|)
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|markPrivate ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|markPrivate
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"private"
argument_list|)
operator|.
name|post
argument_list|(
name|PrivateInput
operator|.
name|create
argument_list|()
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|unmarkPrivate ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|unmarkPrivate
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"private.delete"
argument_list|)
operator|.
name|post
argument_list|(
name|PrivateInput
operator|.
name|create
argument_list|()
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|comments (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|comments
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"comments"
argument_list|)
return|;
block|}
DECL|method|drafts (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|drafts
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"drafts"
argument_list|)
return|;
block|}
DECL|method|edit (@ullable String project, int id, AsyncCallback<EditInfo> cb)
specifier|public
specifier|static
name|void
name|edit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|EditInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|edit
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|editWithFiles (@ullable String project, int id, AsyncCallback<EditInfo> cb)
specifier|public
specifier|static
name|void
name|editWithFiles
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|EditInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|edit
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|addParameterTrue
argument_list|(
literal|"list"
argument_list|)
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|edit (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|edit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"edit"
argument_list|)
return|;
block|}
DECL|method|editWithCommands (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|editWithCommands
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|edit
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|addParameterTrue
argument_list|(
literal|"download-commands"
argument_list|)
return|;
block|}
DECL|method|includedIn ( @ullable String project, int id, AsyncCallback<IncludedInInfo> cb)
specifier|public
specifier|static
name|void
name|includedIn
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|IncludedInInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
literal|"in"
argument_list|)
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|revision (@ullable String project, int id, String revision)
specifier|public
specifier|static
name|RestApi
name|revision
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|revision
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"revisions"
argument_list|)
operator|.
name|id
argument_list|(
name|revision
argument_list|)
return|;
block|}
DECL|method|revision (@ullable String project, PatchSet.Id id)
specifier|public
specifier|static
name|RestApi
name|revision
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|id
parameter_list|)
block|{
name|int
name|cn
init|=
name|id
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|revision
init|=
name|RevisionInfoCache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
return|return
name|revision
argument_list|(
name|project
argument_list|,
name|cn
argument_list|,
name|revision
argument_list|)
return|;
block|}
return|return
name|change
argument_list|(
name|project
argument_list|,
name|cn
argument_list|)
operator|.
name|view
argument_list|(
literal|"revisions"
argument_list|)
operator|.
name|id
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
DECL|method|reviewers (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|reviewers
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"reviewers"
argument_list|)
return|;
block|}
DECL|method|suggestReviewers ( @ullable String project, int id, String q, int n, boolean e)
specifier|public
specifier|static
name|RestApi
name|suggestReviewers
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|q
parameter_list|,
name|int
name|n
parameter_list|,
name|boolean
name|e
parameter_list|)
block|{
name|RestApi
name|api
init|=
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"suggest_reviewers"
argument_list|)
operator|.
name|addParameter
argument_list|(
literal|"n"
argument_list|,
name|n
argument_list|)
operator|.
name|addParameter
argument_list|(
literal|"e"
argument_list|,
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|api
operator|.
name|addParameter
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
return|return
name|api
return|;
block|}
DECL|method|vote (@ullable String project, int id, int reviewer, String vote)
specifier|public
specifier|static
name|RestApi
name|vote
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|reviewer
parameter_list|,
name|String
name|vote
parameter_list|)
block|{
return|return
name|reviewer
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|reviewer
argument_list|)
operator|.
name|view
argument_list|(
literal|"votes"
argument_list|)
operator|.
name|id
argument_list|(
name|vote
argument_list|)
return|;
block|}
DECL|method|reviewer (@ullable String project, int id, int reviewer)
specifier|public
specifier|static
name|RestApi
name|reviewer
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|reviewer
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"reviewers"
argument_list|)
operator|.
name|id
argument_list|(
name|reviewer
argument_list|)
return|;
block|}
DECL|method|reviewer (@ullable String project, int id, String reviewer)
specifier|public
specifier|static
name|RestApi
name|reviewer
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|reviewer
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"reviewers"
argument_list|)
operator|.
name|id
argument_list|(
name|reviewer
argument_list|)
return|;
block|}
DECL|method|hashtags (@ullable String project, int changeId)
specifier|public
specifier|static
name|RestApi
name|hashtags
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|changeId
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
operator|.
name|view
argument_list|(
literal|"hashtags"
argument_list|)
return|;
block|}
DECL|method|hashtag (@ullable String project, int changeId, String hashtag)
specifier|public
specifier|static
name|RestApi
name|hashtag
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|changeId
parameter_list|,
name|String
name|hashtag
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
operator|.
name|view
argument_list|(
literal|"hashtags"
argument_list|)
operator|.
name|id
argument_list|(
name|hashtag
argument_list|)
return|;
block|}
comment|/** Submit a specific revision of a change. */
DECL|method|cherrypick ( String project, int id, String commit, String destination, String message, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|cherrypick
parameter_list|(
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|String
name|destination
parameter_list|,
name|String
name|message
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|CherryPickInput
name|cherryPickInput
init|=
name|CherryPickInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|cherryPickInput
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|cherryPickInput
operator|.
name|setDestination
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|,
literal|"cherrypick"
argument_list|)
operator|.
name|post
argument_list|(
name|cherryPickInput
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Move change to another branch. */
DECL|method|move ( String project, int id, String destination, String message, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|move
parameter_list|(
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|destination
parameter_list|,
name|String
name|message
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|MoveInput
name|moveInput
init|=
name|MoveInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|moveInput
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|moveInput
operator|.
name|setDestinationBranch
argument_list|(
name|destination
argument_list|)
expr_stmt|;
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"move"
argument_list|)
operator|.
name|post
argument_list|(
name|moveInput
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Edit commit message for specific revision of a change. */
DECL|method|message ( @ullable String project, int id, String commit, String message, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|message
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|String
name|message
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|CherryPickInput
name|input
init|=
name|CherryPickInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|,
literal|"message"
argument_list|)
operator|.
name|post
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Submit a specific revision of a change. */
DECL|method|submit ( @ullable String project, int id, String commit, AsyncCallback<SubmitInfo> cb)
specifier|public
specifier|static
name|void
name|submit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|AsyncCallback
argument_list|<
name|SubmitInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|JavaScriptObject
name|in
init|=
name|JavaScriptObject
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|,
literal|"submit"
argument_list|)
operator|.
name|post
argument_list|(
name|in
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Publish a specific revision of a draft change. */
DECL|method|publish ( @ullable String project, int id, String commit, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|publish
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|JavaScriptObject
name|in
init|=
name|JavaScriptObject
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|,
literal|"publish"
argument_list|)
operator|.
name|post
argument_list|(
name|in
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Delete a specific draft change. */
DECL|method|deleteChange ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|deleteChange
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|delete
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Delete a specific draft patch set. */
DECL|method|deleteRevision ( @ullable String project, int id, String commit, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|deleteRevision
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|revision
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|)
operator|.
name|delete
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Delete change edit. */
DECL|method|deleteEdit ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|deleteEdit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|edit
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|delete
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Publish change edit. */
DECL|method|publishEdit ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|publishEdit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|JavaScriptObject
name|in
init|=
name|JavaScriptObject
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"edit:publish"
argument_list|)
operator|.
name|post
argument_list|(
name|in
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Rebase change edit on latest patch set. */
DECL|method|rebaseEdit ( @ullable String project, int id, AsyncCallback<JavaScriptObject> cb)
specifier|public
specifier|static
name|void
name|rebaseEdit
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|AsyncCallback
argument_list|<
name|JavaScriptObject
argument_list|>
name|cb
parameter_list|)
block|{
name|JavaScriptObject
name|in
init|=
name|JavaScriptObject
operator|.
name|createObject
argument_list|()
decl_stmt|;
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"edit:rebase"
argument_list|)
operator|.
name|post
argument_list|(
name|in
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Rebase a revision onto the branch tip or another change. */
DECL|method|rebase ( @ullable String project, int id, String commit, String base, AsyncCallback<ChangeInfo> cb)
specifier|public
specifier|static
name|void
name|rebase
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|String
name|base
parameter_list|,
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|RebaseInput
name|rebaseInput
init|=
name|RebaseInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|rebaseInput
operator|.
name|setBase
argument_list|(
name|base
argument_list|)
expr_stmt|;
name|call
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|commit
argument_list|,
literal|"rebase"
argument_list|)
operator|.
name|post
argument_list|(
name|rebaseInput
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|class|MessageInput
specifier|private
specifier|static
class|class
name|MessageInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|message (String m)
specifier|final
specifier|native
name|void
name|message
parameter_list|(
name|String
name|m
parameter_list|)
comment|/*-{ if(m)this.message=m; }-*/
function_decl|;
DECL|method|create ()
specifier|static
name|MessageInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|MessageInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|MessageInput ()
specifier|protected
name|MessageInput
parameter_list|()
block|{}
block|}
DECL|class|AssigneeInput
specifier|private
specifier|static
class|class
name|AssigneeInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|assignee (String a)
specifier|final
specifier|native
name|void
name|assignee
parameter_list|(
name|String
name|a
parameter_list|)
comment|/*-{ if(a)this.assignee=a; }-*/
function_decl|;
DECL|method|create ()
specifier|static
name|AssigneeInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|AssigneeInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|AssigneeInput ()
specifier|protected
name|AssigneeInput
parameter_list|()
block|{}
block|}
DECL|class|TopicInput
specifier|private
specifier|static
class|class
name|TopicInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|topic (String t)
specifier|final
specifier|native
name|void
name|topic
parameter_list|(
name|String
name|t
parameter_list|)
comment|/*-{ if(t)this.topic=t; }-*/
function_decl|;
DECL|method|create ()
specifier|static
name|TopicInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|TopicInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|TopicInput ()
specifier|protected
name|TopicInput
parameter_list|()
block|{}
block|}
DECL|class|CreateChangeInput
specifier|private
specifier|static
class|class
name|CreateChangeInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|CreateChangeInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|CreateChangeInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|branch (String b)
specifier|public
specifier|final
specifier|native
name|void
name|branch
parameter_list|(
name|String
name|b
parameter_list|)
comment|/*-{ if(b)this.branch=b; }-*/
function_decl|;
DECL|method|topic (String t)
specifier|public
specifier|final
specifier|native
name|void
name|topic
parameter_list|(
name|String
name|t
parameter_list|)
comment|/*-{ if(t)this.topic=t; }-*/
function_decl|;
DECL|method|project (String p)
specifier|public
specifier|final
specifier|native
name|void
name|project
parameter_list|(
name|String
name|p
parameter_list|)
comment|/*-{ if(p)this.project=p; }-*/
function_decl|;
DECL|method|subject (String s)
specifier|public
specifier|final
specifier|native
name|void
name|subject
parameter_list|(
name|String
name|s
parameter_list|)
comment|/*-{ if(s)this.subject=s; }-*/
function_decl|;
DECL|method|status (String s)
specifier|public
specifier|final
specifier|native
name|void
name|status
parameter_list|(
name|String
name|s
parameter_list|)
comment|/*-{ if(s)this.status=s; }-*/
function_decl|;
DECL|method|baseChange (String b)
specifier|public
specifier|final
specifier|native
name|void
name|baseChange
parameter_list|(
name|String
name|b
parameter_list|)
comment|/*-{ if(b)this.base_change=b; }-*/
function_decl|;
DECL|method|CreateChangeInput ()
specifier|protected
name|CreateChangeInput
parameter_list|()
block|{}
block|}
DECL|class|CherryPickInput
specifier|private
specifier|static
class|class
name|CherryPickInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|CherryPickInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|CherryPickInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|setDestination (String d)
specifier|final
specifier|native
name|void
name|setDestination
parameter_list|(
name|String
name|d
parameter_list|)
comment|/*-{ this.destination = d; }-*/
function_decl|;
DECL|method|setMessage (String m)
specifier|final
specifier|native
name|void
name|setMessage
parameter_list|(
name|String
name|m
parameter_list|)
comment|/*-{ this.message = m; }-*/
function_decl|;
DECL|method|CherryPickInput ()
specifier|protected
name|CherryPickInput
parameter_list|()
block|{}
block|}
DECL|class|MoveInput
specifier|private
specifier|static
class|class
name|MoveInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|MoveInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|MoveInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|setDestinationBranch (String d)
specifier|final
specifier|native
name|void
name|setDestinationBranch
parameter_list|(
name|String
name|d
parameter_list|)
comment|/*-{ this.destination_branch = d; }-*/
function_decl|;
DECL|method|setMessage (String m)
specifier|final
specifier|native
name|void
name|setMessage
parameter_list|(
name|String
name|m
parameter_list|)
comment|/*-{ this.message = m; }-*/
function_decl|;
DECL|method|MoveInput ()
specifier|protected
name|MoveInput
parameter_list|()
block|{}
block|}
DECL|class|PrivateInput
specifier|private
specifier|static
class|class
name|PrivateInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|PrivateInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|PrivateInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|setMessage (String m)
specifier|final
specifier|native
name|void
name|setMessage
parameter_list|(
name|String
name|m
parameter_list|)
comment|/*-{ this.message = m; }-*/
function_decl|;
DECL|method|PrivateInput ()
specifier|protected
name|PrivateInput
parameter_list|()
block|{}
block|}
DECL|class|RebaseInput
specifier|private
specifier|static
class|class
name|RebaseInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|setBase (String b)
specifier|final
specifier|native
name|void
name|setBase
parameter_list|(
name|String
name|b
parameter_list|)
comment|/*-{ this.base = b; }-*/
function_decl|;
DECL|method|create ()
specifier|static
name|RebaseInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|RebaseInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|RebaseInput ()
specifier|protected
name|RebaseInput
parameter_list|()
block|{}
block|}
DECL|method|call (@ullable String project, int id, String action)
specifier|private
specifier|static
name|RestApi
name|call
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|action
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
name|action
argument_list|)
return|;
block|}
DECL|method|call (@ullable String project, int id, String commit, String action)
specifier|private
specifier|static
name|RestApi
name|call
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|commit
parameter_list|,
name|String
name|action
parameter_list|)
block|{
return|return
name|change
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
operator|.
name|view
argument_list|(
literal|"revisions"
argument_list|)
operator|.
name|id
argument_list|(
name|commit
argument_list|)
operator|.
name|view
argument_list|(
name|action
argument_list|)
return|;
block|}
DECL|method|change (@ullable String project, int id)
specifier|public
specifier|static
name|RestApi
name|change
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|RestApi
argument_list|(
literal|"/changes/"
argument_list|)
operator|.
name|id
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|RestApi
argument_list|(
literal|"/changes/"
argument_list|)
operator|.
name|id
argument_list|(
name|project
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|emptyToNull (String str)
specifier|public
specifier|static
name|String
name|emptyToNull
parameter_list|(
name|String
name|str
parameter_list|)
block|{
return|return
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|str
return|;
block|}
DECL|method|commitWithLinks ( @ullable String project, int changeId, String revision, Callback<CommitInfo> callback)
specifier|public
specifier|static
name|void
name|commitWithLinks
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|changeId
parameter_list|,
name|String
name|revision
parameter_list|,
name|Callback
argument_list|<
name|CommitInfo
argument_list|>
name|callback
parameter_list|)
block|{
name|revision
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|,
name|revision
argument_list|)
operator|.
name|view
argument_list|(
literal|"commit"
argument_list|)
operator|.
name|addParameterTrue
argument_list|(
literal|"links"
argument_list|)
operator|.
name|get
argument_list|(
name|callback
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

