begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|CONTEXT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|INSERT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchLine
operator|.
name|Type
operator|.
name|REPLACE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
operator|.
name|FileMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|EditList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseHtmlFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|Edit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|SideBySideTable
specifier|public
class|class
name|SideBySideTable
extends|extends
name|AbstractPatchContentTable
block|{
DECL|field|A
specifier|private
specifier|static
specifier|final
name|int
name|A
init|=
literal|2
decl_stmt|;
DECL|field|B
specifier|private
specifier|static
specifier|final
name|int
name|B
init|=
literal|3
decl_stmt|;
DECL|field|NUM_ROWS_TO_EXPAND
specifier|private
specifier|static
specifier|final
name|int
name|NUM_ROWS_TO_EXPAND
init|=
literal|10
decl_stmt|;
DECL|field|a
specifier|private
name|SparseHtmlFile
name|a
decl_stmt|;
DECL|field|b
specifier|private
name|SparseHtmlFile
name|b
decl_stmt|;
annotation|@
name|Override
DECL|method|onCellDoubleClick (final int row, int column)
specifier|protected
name|void
name|onCellDoubleClick
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|>
literal|0
operator|&&
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|line
init|=
operator|(
name|PatchLine
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|==
literal|1
operator|||
name|column
operator|==
name|A
condition|)
block|{
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|A
argument_list|,
name|line
operator|.
name|getLineA
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|column
operator|==
name|B
operator|||
name|column
operator|==
literal|4
condition|)
block|{
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|B
argument_list|,
name|line
operator|.
name|getLineB
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|onCellSingleClick (int row, int column)
specifier|protected
name|void
name|onCellSingleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
literal|1
operator|||
name|column
operator|==
literal|4
condition|)
block|{
name|onCellDoubleClick
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onInsertComment (final PatchLine line)
specifier|protected
name|void
name|onInsertComment
parameter_list|(
specifier|final
name|PatchLine
name|line
parameter_list|)
block|{
specifier|final
name|int
name|row
init|=
name|getCurrentRow
argument_list|()
decl_stmt|;
name|createCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|B
argument_list|,
name|line
operator|.
name|getLineB
argument_list|()
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|render (final PatchScript script)
specifier|protected
name|void
name|render
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|)
block|{
name|a
operator|=
name|getSparseHtmlFileA
argument_list|(
name|script
argument_list|)
expr_stmt|;
name|b
operator|=
name|getSparseHtmlFileB
argument_list|(
name|script
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|SafeHtmlBuilder
name|nc
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|intraline
init|=
name|script
operator|.
name|getDiffPrefs
argument_list|()
operator|.
name|isIntralineDifference
argument_list|()
operator|&&
name|script
operator|.
name|hasIntralineDifference
argument_list|()
decl_stmt|;
name|appendHeader
argument_list|(
name|script
argument_list|,
name|nc
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|getFileModeA
argument_list|()
operator|!=
name|FileMode
operator|.
name|FILE
operator|||
name|script
operator|.
name|getFileModeB
argument_list|()
operator|!=
name|FileMode
operator|.
name|FILE
condition|)
block|{
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|appendModeLine
argument_list|(
name|nc
argument_list|,
name|script
operator|.
name|getFileModeA
argument_list|()
argument_list|)
expr_stmt|;
name|appendModeLine
argument_list|(
name|nc
argument_list|,
name|script
operator|.
name|getFileModeB
argument_list|()
argument_list|)
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|lastA
init|=
literal|0
decl_stmt|;
name|int
name|lastB
init|=
literal|0
decl_stmt|;
specifier|final
name|boolean
name|ignoreWS
init|=
name|script
operator|.
name|isIgnoreWhitespace
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|EditList
operator|.
name|Hunk
name|hunk
range|:
name|script
operator|.
name|getHunks
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|hunk
operator|.
name|isStartOfFile
argument_list|()
condition|)
block|{
name|appendSkipLine
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
operator|-
name|lastB
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|lastA
argument_list|,
name|lastB
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
operator|-
name|lastB
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|hunk
operator|.
name|next
argument_list|()
condition|)
block|{
if|if
condition|(
name|hunk
operator|.
name|isContextLine
argument_list|()
condition|)
block|{
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
specifier|final
name|SafeHtml
name|ctx
init|=
name|a
operator|.
name|getSafeHtmlLine
argument_list|(
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|)
decl_stmt|;
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|CONTEXT
argument_list|,
name|ctx
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreWS
operator|&&
name|b
operator|.
name|contains
argument_list|(
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
condition|)
block|{
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|CONTEXT
argument_list|,
name|b
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|CONTEXT
argument_list|,
name|ctx
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incBoth
argument_list|()
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|CONTEXT
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hunk
operator|.
name|isModifiedLine
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|del
init|=
name|hunk
operator|.
name|isDeletedA
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|ins
init|=
name|hunk
operator|.
name|isInsertedB
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|full
init|=
name|intraline
operator|&&
name|hunk
operator|.
name|getCurEdit
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
decl_stmt|;
name|openLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
if|if
condition|(
name|del
condition|)
block|{
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|DELETE
argument_list|,
name|a
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
name|full
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incA
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hunk
operator|.
name|getCurEdit
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|appendLineNone
argument_list|(
name|nc
argument_list|,
name|DELETE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|appendLineNone
argument_list|(
name|nc
argument_list|,
name|CONTEXT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ins
condition|)
block|{
name|appendLineText
argument_list|(
name|nc
argument_list|,
name|INSERT
argument_list|,
name|b
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|,
name|full
argument_list|)
expr_stmt|;
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|hunk
operator|.
name|incB
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hunk
operator|.
name|getCurEdit
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Edit
operator|.
name|Type
operator|.
name|REPLACE
condition|)
block|{
name|appendLineNone
argument_list|(
name|nc
argument_list|,
name|INSERT
argument_list|)
expr_stmt|;
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|appendLineNone
argument_list|(
name|nc
argument_list|,
name|CONTEXT
argument_list|)
expr_stmt|;
name|appendLineNumber
argument_list|(
name|nc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|closeLine
argument_list|(
name|nc
argument_list|)
expr_stmt|;
if|if
condition|(
name|del
operator|&&
name|ins
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|REPLACE
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|del
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|DELETE
argument_list|,
name|hunk
operator|.
name|getCurA
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ins
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
operator|new
name|PatchLine
argument_list|(
name|INSERT
argument_list|,
literal|0
argument_list|,
name|hunk
operator|.
name|getCurB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|lastA
operator|=
name|hunk
operator|.
name|getCurA
argument_list|()
expr_stmt|;
name|lastB
operator|=
name|hunk
operator|.
name|getCurB
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|lastB
operator|!=
name|b
operator|.
name|size
argument_list|()
condition|)
block|{
name|appendSkipLine
argument_list|(
name|nc
argument_list|,
name|b
operator|.
name|size
argument_list|()
operator|-
name|lastB
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
operator|new
name|SkippedLine
argument_list|(
name|lastA
argument_list|,
name|lastB
argument_list|,
name|b
operator|.
name|size
argument_list|()
operator|-
name|lastB
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|resetHtml
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|initScript
argument_list|(
name|script
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|lines
operator|.
name|size
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|setRowItem
argument_list|(
name|row
argument_list|,
name|lines
operator|.
name|get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|lines
operator|.
name|get
argument_list|(
name|row
argument_list|)
operator|instanceof
name|SkippedLine
condition|)
block|{
name|createSkipLine
argument_list|(
name|row
argument_list|,
operator|(
name|SkippedLine
operator|)
name|lines
operator|.
name|get
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|appendModeLine (final SafeHtmlBuilder nc, final FileMode mode)
specifier|private
name|void
name|appendModeLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|nc
parameter_list|,
specifier|final
name|FileMode
name|mode
parameter_list|)
block|{
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|nc
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|nc
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|nc
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineMode
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|FILE
case|:
name|nc
operator|.
name|nbsp
argument_list|()
expr_stmt|;
break|break;
case|case
name|SYMLINK
case|:
name|nc
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|fileTypeSymlink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|GITLINK
case|:
name|nc
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|fileTypeGitlink
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|nc
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|display (final CommentDetail cd, boolean expandComments)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|CommentDetail
name|cd
parameter_list|,
name|boolean
name|expandComments
parameter_list|)
block|{
if|if
condition|(
name|cd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|setAccountInfoCache
argument_list|(
name|cd
operator|.
name|getAccounts
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|pLine
init|=
operator|(
name|PatchLine
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|fora
init|=
name|cd
operator|.
name|getForA
argument_list|(
name|pLine
operator|.
name|getLineA
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|forb
init|=
name|cd
operator|.
name|getForB
argument_list|(
name|pLine
operator|.
name|getLineB
argument_list|()
argument_list|)
decl_stmt|;
name|row
operator|++
expr_stmt|;
specifier|final
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|ai
init|=
name|fora
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|bi
init|=
name|forb
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|ai
operator|.
name|hasNext
argument_list|()
operator|&&
name|bi
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|PatchLineComment
name|ac
init|=
name|ai
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|PatchLineComment
name|bc
init|=
name|bi
operator|.
name|next
argument_list|()
decl_stmt|;
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|bindComment
argument_list|(
name|row
argument_list|,
name|A
argument_list|,
name|ac
argument_list|,
operator|!
name|ai
operator|.
name|hasNext
argument_list|()
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
name|bindComment
argument_list|(
name|row
argument_list|,
name|B
argument_list|,
name|bc
argument_list|,
operator|!
name|bi
operator|.
name|hasNext
argument_list|()
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
name|row
operator|=
name|finish
argument_list|(
name|ai
argument_list|,
name|row
argument_list|,
name|A
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
name|row
operator|=
name|finish
argument_list|(
name|bi
argument_list|,
name|row
argument_list|,
name|B
argument_list|,
name|expandComments
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|++
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|insertRow (final int row)
specifier|protected
name|void
name|insertRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|super
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|A
operator|-
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|A
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|B
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|B
operator|+
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|finish (final Iterator<PatchLineComment> i, int row, final int col, boolean expandComment)
specifier|private
name|int
name|finish
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|i
parameter_list|,
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
name|boolean
name|expandComment
parameter_list|)
block|{
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|PatchLineComment
name|c
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|bindComment
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|c
argument_list|,
operator|!
name|i
operator|.
name|hasNext
argument_list|()
argument_list|,
name|expandComment
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
return|return
name|row
return|;
block|}
DECL|method|appendHeader (PatchScript script, final SafeHtmlBuilder m)
specifier|private
name|void
name|appendHeader
parameter_list|(
name|PatchScript
name|script
parameter_list|,
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|boolean
name|isCommitMessage
init|=
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|script
operator|.
name|getNewName
argument_list|()
argument_list|)
decl_stmt|;
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"width"
argument_list|,
literal|"50%"
argument_list|)
expr_stmt|;
if|if
condition|(
name|script
operator|.
name|getChangeType
argument_list|()
operator|==
name|ChangeType
operator|.
name|RENAMED
operator|||
name|script
operator|.
name|getChangeType
argument_list|()
operator|==
name|ChangeType
operator|.
name|COPIED
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
name|script
operator|.
name|getOldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|patchHeaderOld
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isCommitMessage
condition|)
block|{
name|m
operator|.
name|br
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|script
operator|.
name|getA
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|idSideA
operator|==
literal|null
condition|)
block|{
name|downloadLink
argument_list|(
name|m
argument_list|,
name|patchKey
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|downloadLink
argument_list|(
name|m
argument_list|,
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideA
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"width"
argument_list|,
literal|"50%"
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|patchHeaderNew
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isCommitMessage
condition|)
block|{
name|m
operator|.
name|br
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|script
operator|.
name|getB
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|downloadLink
argument_list|(
name|m
argument_list|,
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideB
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileColumnHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|downloadLink (final SafeHtmlBuilder m, final Patch.Key key, final String side)
specifier|private
name|void
name|downloadLink
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|key
parameter_list|,
specifier|final
name|String
name|side
parameter_list|)
block|{
specifier|final
name|String
name|base
init|=
name|GWT
operator|.
name|getHostPageBaseURL
argument_list|()
operator|+
literal|"cat/"
decl_stmt|;
name|m
operator|.
name|openAnchor
argument_list|()
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
name|base
operator|+
name|KeyUtil
operator|.
name|encode
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
operator|+
literal|"^"
operator|+
name|side
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|download
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeAnchor
argument_list|()
expr_stmt|;
block|}
DECL|method|appendSkipLine (final SafeHtmlBuilder m, final int skipCnt)
specifier|private
name|void
name|appendSkipLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|int
name|skipCnt
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|skipLine
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|skipLine
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|field|expandAllListener
specifier|private
name|ClickHandler
name|expandAllListener
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|expand
argument_list|(
name|event
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|expandBeforeListener
specifier|private
name|ClickHandler
name|expandBeforeListener
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|expand
argument_list|(
name|event
argument_list|,
name|NUM_ROWS_TO_EXPAND
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|expandAfterListener
specifier|private
name|ClickHandler
name|expandAfterListener
init|=
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|expand
argument_list|(
name|event
argument_list|,
operator|-
name|NUM_ROWS_TO_EXPAND
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|expand (ClickEvent event, final int numRows)
specifier|private
name|void
name|expand
parameter_list|(
name|ClickEvent
name|event
parameter_list|,
specifier|final
name|int
name|numRows
parameter_list|)
block|{
name|int
name|row
init|=
name|table
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
operator|.
name|getRowIndex
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|SkippedLine
operator|)
condition|)
block|{
return|return;
block|}
name|SkippedLine
name|line
init|=
operator|(
name|SkippedLine
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|int
name|loopTo
init|=
name|numRows
decl_stmt|;
if|if
condition|(
name|numRows
operator|==
literal|0
condition|)
block|{
name|loopTo
operator|=
name|line
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
name|loopTo
operator|=
operator|-
name|numRows
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
name|offset
operator|=
literal|1
expr_stmt|;
block|}
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
operator|+
name|offset
init|;
name|i
operator|<
name|loopTo
operator|+
name|offset
condition|;
name|i
operator|++
control|)
block|{
name|insertRow
argument_list|(
name|row
operator|+
name|i
argument_list|)
expr_stmt|;
name|int
name|lineA
init|=
name|line
operator|.
name|getStartA
argument_list|()
operator|+
name|i
decl_stmt|;
name|int
name|lineB
init|=
name|line
operator|.
name|getStartB
argument_list|()
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
name|lineA
operator|=
name|line
operator|.
name|getStartA
argument_list|()
operator|+
name|line
operator|.
name|getSize
argument_list|()
operator|+
name|numRows
operator|+
name|i
operator|-
name|offset
expr_stmt|;
name|lineB
operator|=
name|line
operator|.
name|getStartB
argument_list|()
operator|+
name|line
operator|.
name|getSize
argument_list|()
operator|+
name|numRows
operator|+
name|i
operator|-
name|offset
expr_stmt|;
block|}
name|table
operator|.
name|setHTML
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|A
operator|-
literal|1
argument_list|,
literal|"<a href=\"javascript:;\">"
operator|+
operator|(
name|lineA
operator|+
literal|1
operator|)
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|A
operator|-
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHTML
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|A
argument_list|,
name|a
operator|.
name|getSafeHtmlLine
argument_list|(
name|lineA
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|A
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|A
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineCONTEXT
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHTML
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|B
argument_list|,
name|b
operator|.
name|getSafeHtmlLine
argument_list|(
name|lineB
argument_list|)
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|B
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|B
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineCONTEXT
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setHTML
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|B
operator|+
literal|1
argument_list|,
literal|"<a href=\"javascript:;\">"
operator|+
operator|(
name|lineB
operator|+
literal|1
operator|)
operator|+
literal|"</a>"
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
operator|+
name|i
argument_list|,
name|B
operator|+
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|setRowItem
argument_list|(
name|row
operator|+
name|i
argument_list|,
operator|new
name|PatchLine
argument_list|(
name|CONTEXT
argument_list|,
name|lineA
argument_list|,
name|lineB
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numRows
operator|>
literal|0
condition|)
block|{
name|line
operator|.
name|incrementStart
argument_list|(
name|numRows
argument_list|)
expr_stmt|;
name|createSkipLine
argument_list|(
name|row
operator|+
name|loopTo
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numRows
operator|<
literal|0
condition|)
block|{
name|line
operator|.
name|reduceSize
argument_list|(
operator|-
name|numRows
argument_list|)
expr_stmt|;
name|createSkipLine
argument_list|(
name|row
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|row
operator|+
name|loopTo
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSkipLine (int row, SkippedLine line)
specifier|private
name|void
name|createSkipLine
parameter_list|(
name|int
name|row
parameter_list|,
name|SkippedLine
name|line
parameter_list|)
block|{
name|FlowPanel
name|p
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|InlineLabel
name|l1
init|=
operator|new
name|InlineLabel
argument_list|(
literal|" "
operator|+
name|PatchUtil
operator|.
name|C
operator|.
name|patchSkipRegionStart
argument_list|()
operator|+
literal|" "
argument_list|)
decl_stmt|;
name|InlineLabel
name|l2
init|=
operator|new
name|InlineLabel
argument_list|(
literal|" "
operator|+
name|PatchUtil
operator|.
name|C
operator|.
name|patchSkipRegionEnd
argument_list|()
operator|+
literal|" "
argument_list|)
decl_stmt|;
name|Anchor
name|all
init|=
operator|new
name|Anchor
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|line
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|all
operator|.
name|addClickHandler
argument_list|(
name|expandAllListener
argument_list|)
expr_stmt|;
name|all
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|skipLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|getSize
argument_list|()
operator|>
literal|30
condition|)
block|{
comment|// Only show the expand before/after if skipped more than 30 lines.
name|Anchor
name|b
init|=
operator|new
name|Anchor
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|expandBefore
argument_list|(
name|NUM_ROWS_TO_EXPAND
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Anchor
name|a
init|=
operator|new
name|Anchor
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|expandAfter
argument_list|(
name|NUM_ROWS_TO_EXPAND
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|b
operator|.
name|addClickHandler
argument_list|(
name|expandBeforeListener
argument_list|)
expr_stmt|;
name|a
operator|.
name|addClickHandler
argument_list|(
name|expandAfterListener
argument_list|)
expr_stmt|;
name|b
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|skipLine
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|skipLine
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|l2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|add
argument_list|(
name|l1
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|all
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|l2
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
DECL|method|openLine (final SafeHtmlBuilder m)
specifier|private
name|void
name|openLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"valign"
argument_list|,
literal|"top"
argument_list|)
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineNumber (SafeHtmlBuilder m, boolean right)
specifier|private
name|void
name|appendLineNumber
parameter_list|(
name|SafeHtmlBuilder
name|m
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightmost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineNumber (SafeHtmlBuilder m, int lineNumberMinusOne, boolean right)
specifier|private
name|void
name|appendLineNumber
parameter_list|(
name|SafeHtmlBuilder
name|m
parameter_list|,
name|int
name|lineNumberMinusOne
parameter_list|,
name|boolean
name|right
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|lineNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|rightmost
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|append
argument_list|(
name|SafeHtml
operator|.
name|asis
argument_list|(
literal|"<a href=\"javascript:;\">"
operator|+
operator|(
name|lineNumberMinusOne
operator|+
literal|1
operator|)
operator|+
literal|"</a>"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineText (final SafeHtmlBuilder m, final PatchLine.Type type, final SparseHtmlFile src, final int i, final boolean fullBlock)
specifier|private
name|void
name|appendLineText
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|PatchLine
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|SparseHtmlFile
name|src
parameter_list|,
specifier|final
name|int
name|i
parameter_list|,
specifier|final
name|boolean
name|fullBlock
parameter_list|)
block|{
name|appendLineText
argument_list|(
name|m
argument_list|,
name|type
argument_list|,
name|src
operator|.
name|getSafeHtmlLine
argument_list|(
name|i
argument_list|)
argument_list|,
name|src
operator|.
name|hasTrailingEdit
argument_list|(
name|i
argument_list|)
argument_list|,
name|fullBlock
argument_list|)
expr_stmt|;
block|}
DECL|method|appendLineText (final SafeHtmlBuilder m, final PatchLine.Type type, final SafeHtml lineHtml, final boolean trailingEdit, final boolean fullBlock)
specifier|private
name|void
name|appendLineText
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|PatchLine
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|SafeHtml
name|lineHtml
parameter_list|,
specifier|final
name|boolean
name|trailingEdit
parameter_list|,
specifier|final
name|boolean
name|fullBlock
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|CONTEXT
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineCONTEXT
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETE
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineDELETE
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|trailingEdit
operator|||
name|fullBlock
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
literal|"wdd"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INSERT
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineINSERT
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|trailingEdit
operator|||
name|fullBlock
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
literal|"wdi"
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|m
operator|.
name|append
argument_list|(
name|lineHtml
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLineNone (final SafeHtmlBuilder m, final PatchLine.Type type)
specifier|private
name|void
name|appendLineNone
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|PatchLine
operator|.
name|Type
name|type
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLine
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|type
operator|!=
literal|null
condition|?
name|type
else|:
name|PatchLine
operator|.
name|Type
operator|.
name|CONTEXT
condition|)
block|{
case|case
name|DELETE
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineDELETE
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|INSERT
case|:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineINSERT
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|fileLineNone
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|closeLine (final SafeHtmlBuilder m)
specifier|private
name|void
name|closeLine
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

