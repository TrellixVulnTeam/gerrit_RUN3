begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
operator|.
name|shortFormat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|AccountLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|BranchLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ChangeLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NeedsSignInKeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ProjectLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ApprovalSummarySet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSetApproval
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ChangeTable
specifier|public
class|class
name|ChangeTable
extends|extends
name|NavigationTable
argument_list|<
name|ChangeInfo
argument_list|>
block|{
DECL|field|C_STAR
specifier|private
specifier|static
specifier|final
name|int
name|C_STAR
init|=
literal|1
decl_stmt|;
DECL|field|C_SUBJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_SUBJECT
init|=
literal|2
decl_stmt|;
DECL|field|C_OWNER
specifier|private
specifier|static
specifier|final
name|int
name|C_OWNER
init|=
literal|3
decl_stmt|;
DECL|field|C_PROJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_PROJECT
init|=
literal|4
decl_stmt|;
DECL|field|C_BRANCH
specifier|private
specifier|static
specifier|final
name|int
name|C_BRANCH
init|=
literal|5
decl_stmt|;
DECL|field|C_LAST_UPDATE
specifier|private
specifier|static
specifier|final
name|int
name|C_LAST_UPDATE
init|=
literal|6
decl_stmt|;
DECL|field|BASE_COLUMNS
specifier|private
specifier|static
specifier|final
name|int
name|BASE_COLUMNS
init|=
literal|7
decl_stmt|;
DECL|field|sections
specifier|private
specifier|final
name|List
argument_list|<
name|Section
argument_list|>
name|sections
decl_stmt|;
DECL|field|accountCache
specifier|private
name|AccountInfoCache
name|accountCache
init|=
name|AccountInfoCache
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|labelTypes
specifier|private
specifier|final
name|List
argument_list|<
name|LabelType
argument_list|>
name|labelTypes
decl_stmt|;
DECL|field|columns
specifier|private
specifier|final
name|int
name|columns
decl_stmt|;
DECL|method|ChangeTable ()
specifier|public
name|ChangeTable
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|ChangeTable (boolean showApprovals)
specifier|public
name|ChangeTable
parameter_list|(
name|boolean
name|showApprovals
parameter_list|)
block|{
name|super
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeItemHelp
argument_list|()
argument_list|)
expr_stmt|;
name|labelTypes
operator|=
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
operator|.
name|getLabelTypes
argument_list|()
expr_stmt|;
if|if
condition|(
name|showApprovals
condition|)
block|{
name|columns
operator|=
name|BASE_COLUMNS
operator|+
name|labelTypes
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columns
operator|=
name|BASE_COLUMNS
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|StarKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'s'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableStar
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_STAR
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_SUBJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnSubject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_OWNER
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnOwner
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_PROJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnProject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_BRANCH
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnBranch
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_LAST_UPDATE
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|BASE_COLUMNS
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|LabelType
name|type
init|=
name|labelTypes
operator|.
name|get
argument_list|(
name|i
operator|-
name|BASE_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|text
init|=
name|type
operator|.
name|getAbbreviatedName
argument_list|()
decl_stmt|;
if|if
condition|(
name|text
operator|==
literal|null
condition|)
block|{
name|text
operator|=
name|type
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|text
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
operator|.
name|setTitle
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|C_STAR
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|C_SUBJECT
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|Cell
name|cell
init|=
name|table
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|cell
operator|.
name|getCellIndex
argument_list|()
operator|==
name|C_STAR
condition|)
block|{
comment|// Don't do anything (handled by star itself).
block|}
elseif|else
if|if
condition|(
name|cell
operator|.
name|getCellIndex
argument_list|()
operator|==
name|C_OWNER
condition|)
block|{
comment|// Don't do anything.
block|}
elseif|else
if|if
condition|(
name|getRowItem
argument_list|(
name|cell
operator|.
name|getRowIndex
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|cell
operator|.
name|getRowIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onStarClick (final int row)
specifier|protected
name|void
name|onStarClick
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
operator|(
operator|(
name|StarredChanges
operator|.
name|Icon
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|)
operator|)
operator|.
name|toggleStar
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final ChangeInfo item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|ChangeInfo
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|getId
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (final int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|c
argument_list|)
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|insertNoneRow (final int row)
specifier|private
name|void
name|insertNoneRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableNone
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|emptySection
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChangeRow (final int row)
specifier|private
name|void
name|insertChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|applyDataRowStyle
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|applyDataRowStyle (final int row)
specifier|protected
name|void
name|applyDataRowStyle
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|super
operator|.
name|applyDataRowStyle
argument_list|(
name|row
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|C_SUBJECT
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|i
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_SUBJECT
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cSUBJECT
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_OWNER
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cOWNER
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_LAST_UPDATE
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|BASE_COLUMNS
init|;
name|i
operator|<
name|columns
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|i
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|cAPPROVAL
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateChangeRow (final int row, final ChangeInfo c, final ChangeRowFormatter changeRowFormatter)
specifier|private
name|void
name|populateChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ChangeInfo
name|c
parameter_list|,
specifier|final
name|ChangeRowFormatter
name|changeRowFormatter
parameter_list|)
block|{
name|ChangeCache
name|cache
init|=
name|ChangeCache
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|cache
operator|.
name|getChangeInfoCache
argument_list|()
operator|.
name|set
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|,
name|StarredChanges
operator|.
name|createIcon
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
operator|.
name|isStarred
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Util
operator|.
name|cropSubject
argument_list|(
name|c
operator|.
name|getSubject
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|s
operator|+=
literal|" ("
operator|+
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
if|if
condition|(
name|changeRowFormatter
operator|!=
literal|null
condition|)
block|{
name|removeChangeStyle
argument_list|(
name|row
argument_list|,
name|changeRowFormatter
argument_list|)
expr_stmt|;
specifier|final
name|String
name|rowStyle
init|=
name|changeRowFormatter
operator|.
name|getRowStyle
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|rowStyle
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|rowStyle
argument_list|)
expr_stmt|;
block|}
name|s
operator|=
name|changeRowFormatter
operator|.
name|getDisplayText
argument_list|(
name|c
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_SUBJECT
argument_list|,
operator|new
name|TableChangeLink
argument_list|(
name|s
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_OWNER
argument_list|,
name|link
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_PROJECT
argument_list|,
operator|new
name|ProjectLink
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_BRANCH
argument_list|,
operator|new
name|BranchLink
argument_list|(
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|c
operator|.
name|getStatus
argument_list|()
argument_list|,
name|c
operator|.
name|getBranch
argument_list|()
argument_list|,
name|c
operator|.
name|getTopic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|C_LAST_UPDATE
argument_list|,
name|shortFormat
argument_list|(
name|c
operator|.
name|getLastUpdatedOn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|removeChangeStyle (int row, final ChangeRowFormatter changeRowFormatter)
specifier|private
name|void
name|removeChangeStyle
parameter_list|(
name|int
name|row
parameter_list|,
specifier|final
name|ChangeRowFormatter
name|changeRowFormatter
parameter_list|)
block|{
specifier|final
name|ChangeInfo
name|oldChange
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldChange
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
name|oldRowStyle
init|=
name|changeRowFormatter
operator|.
name|getRowStyle
argument_list|(
name|oldChange
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldRowStyle
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|getRowFormatter
argument_list|()
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|oldRowStyle
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|link (final Account.Id id)
specifier|private
name|AccountLink
name|link
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|AccountLink
operator|.
name|link
argument_list|(
name|accountCache
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|addSection (final Section s)
specifier|public
name|void
name|addSection
parameter_list|(
specifier|final
name|Section
name|s
parameter_list|)
block|{
assert|assert
name|s
operator|.
name|parent
operator|==
literal|null
assert|;
if|if
condition|(
name|s
operator|.
name|titleText
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|titleRow
operator|=
name|table
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|titleText
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setColSpan
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|sectionHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|titleRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|s
operator|.
name|parent
operator|=
name|this
expr_stmt|;
name|s
operator|.
name|dataBegin
operator|=
name|table
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|insertNoneRow
argument_list|(
name|s
operator|.
name|dataBegin
argument_list|)
expr_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|setAccountInfoCache (final AccountInfoCache aic)
specifier|public
name|void
name|setAccountInfoCache
parameter_list|(
specifier|final
name|AccountInfoCache
name|aic
parameter_list|)
block|{
assert|assert
name|aic
operator|!=
literal|null
assert|;
name|accountCache
operator|=
name|aic
expr_stmt|;
block|}
DECL|method|insertRow (final int beforeRow)
specifier|private
name|int
name|insertRow
parameter_list|(
specifier|final
name|int
name|beforeRow
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
name|beforeRow
operator|<=
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|beforeRow
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|++
expr_stmt|;
block|}
block|}
return|return
name|table
operator|.
name|insertRow
argument_list|(
name|beforeRow
argument_list|)
return|;
block|}
DECL|method|removeRow (final int row)
specifier|private
name|void
name|removeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|--
expr_stmt|;
block|}
block|}
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
DECL|method|displayApprovals (final int row, final ApprovalSummary summary, final AccountInfoCache aic, final boolean highlightUnreviewed)
specifier|private
name|void
name|displayApprovals
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ApprovalSummary
name|summary
parameter_list|,
specifier|final
name|AccountInfoCache
name|aic
parameter_list|,
specifier|final
name|boolean
name|highlightUnreviewed
parameter_list|)
block|{
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PatchSetApproval
argument_list|>
name|approvals
init|=
name|summary
operator|.
name|getApprovalMap
argument_list|()
decl_stmt|;
name|int
name|col
init|=
name|BASE_COLUMNS
decl_stmt|;
name|boolean
name|haveReview
init|=
literal|false
decl_stmt|;
name|boolean
name|showUsernameInReviewCategory
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|AccountGeneralPreferences
name|prefs
init|=
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getGeneralPreferences
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefs
operator|.
name|isShowUsernameInReviewCategory
argument_list|()
condition|)
block|{
name|showUsernameInReviewCategory
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|LabelType
name|type
range|:
name|labelTypes
control|)
block|{
specifier|final
name|PatchSetApproval
name|ca
init|=
name|approvals
operator|.
name|get
argument_list|(
name|type
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|fmt
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|negscore
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|removeStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|posscore
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|singleLine
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ca
operator|==
literal|null
operator|||
name|ca
operator|.
name|getValue
argument_list|()
operator|==
literal|0
condition|)
block|{
name|table
operator|.
name|clearCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|haveReview
operator|=
literal|true
expr_stmt|;
specifier|final
name|LabelValue
name|v
init|=
name|type
operator|.
name|getValue
argument_list|(
name|ca
argument_list|)
decl_stmt|;
specifier|final
name|AccountInfo
name|ai
init|=
name|aic
operator|.
name|get
argument_list|(
name|ca
operator|.
name|getAccountId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isMaxNegative
argument_list|(
name|ca
argument_list|)
condition|)
block|{
if|if
condition|(
name|showUsernameInReviewCategory
condition|)
block|{
name|FlowPanel
name|fp
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|fp
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|redNot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|FormatUtil
operator|.
name|name
argument_list|(
name|ai
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|redNot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|isMaxPositive
argument_list|(
name|ca
argument_list|)
condition|)
block|{
if|if
condition|(
name|showUsernameInReviewCategory
condition|)
block|{
name|FlowPanel
name|fp
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|fp
operator|.
name|add
argument_list|(
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|greenCheck
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fp
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|FormatUtil
operator|.
name|name
argument_list|(
name|ai
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|greenCheck
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|String
name|vstr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|ca
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|showUsernameInReviewCategory
condition|)
block|{
name|vstr
operator|=
name|vstr
operator|+
literal|" "
operator|+
name|FormatUtil
operator|.
name|name
argument_list|(
name|ai
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ca
operator|.
name|getValue
argument_list|()
operator|>
literal|0
condition|)
block|{
name|vstr
operator|=
literal|"+"
operator|+
name|vstr
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|posscore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|negscore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|vstr
argument_list|)
expr_stmt|;
block|}
comment|// Some web browsers ignore the embedded newline; some like it;
comment|// so we include a space before the newline to accommodate both.
comment|//
name|fmt
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
operator|.
name|setTitle
argument_list|(
name|v
operator|.
name|getText
argument_list|()
operator|+
literal|" \nby "
operator|+
name|FormatUtil
operator|.
name|nameEmail
argument_list|(
name|ai
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|col
operator|++
expr_stmt|;
block|}
specifier|final
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|fmt
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|UIObject
operator|.
name|setStyleName
argument_list|(
name|tr
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|needsReview
argument_list|()
argument_list|,
operator|!
name|haveReview
operator|&&
name|highlightUnreviewed
argument_list|)
expr_stmt|;
block|}
DECL|method|approvalFormatter (final int dataBegin, final int rows, final boolean highlightUnreviewed)
name|GerritCallback
argument_list|<
name|ApprovalSummarySet
argument_list|>
name|approvalFormatter
parameter_list|(
specifier|final
name|int
name|dataBegin
parameter_list|,
specifier|final
name|int
name|rows
parameter_list|,
specifier|final
name|boolean
name|highlightUnreviewed
parameter_list|)
block|{
return|return
operator|new
name|GerritCallback
argument_list|<
name|ApprovalSummarySet
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ApprovalSummarySet
name|as
parameter_list|)
block|{
name|Map
argument_list|<
name|Change
operator|.
name|Id
argument_list|,
name|ApprovalSummary
argument_list|>
name|ids
init|=
name|as
operator|.
name|getSummaryMap
argument_list|()
decl_stmt|;
name|AccountInfoCache
name|aic
init|=
name|as
operator|.
name|getAccountInfoCache
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|dataBegin
init|;
name|row
operator|<
name|dataBegin
operator|+
name|rows
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|ids
operator|.
name|containsKey
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|displayApprovals
argument_list|(
name|row
argument_list|,
name|ids
operator|.
name|get
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|aic
argument_list|,
name|highlightUnreviewed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
DECL|class|StarKeyCommand
specifier|public
class|class
name|StarKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|StarKeyCommand (int mask, char key, String help)
specifier|public
name|StarKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|onStarClick
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|TableChangeLink
specifier|private
specifier|final
class|class
name|TableChangeLink
extends|extends
name|ChangeLink
block|{
DECL|method|TableChangeLink (final String text, final ChangeInfo c)
specifier|private
name|TableChangeLink
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|ChangeInfo
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|text
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|go ()
specifier|public
name|void
name|go
parameter_list|()
block|{
name|movePointerTo
argument_list|(
name|cid
argument_list|)
expr_stmt|;
name|super
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
DECL|enum|ApprovalViewType
specifier|public
enum|enum
name|ApprovalViewType
block|{
DECL|enumConstant|NONE
DECL|enumConstant|USER
DECL|enumConstant|STRONGEST
name|NONE
block|,
name|USER
block|,
name|STRONGEST
block|}
DECL|class|Section
specifier|public
specifier|static
class|class
name|Section
block|{
DECL|field|titleText
name|String
name|titleText
decl_stmt|;
DECL|field|parent
name|ChangeTable
name|parent
decl_stmt|;
DECL|field|viewType
specifier|final
name|ApprovalViewType
name|viewType
decl_stmt|;
DECL|field|ownerId
specifier|final
name|Account
operator|.
name|Id
name|ownerId
decl_stmt|;
DECL|field|titleRow
name|int
name|titleRow
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|dataBegin
name|int
name|dataBegin
decl_stmt|;
DECL|field|rows
name|int
name|rows
decl_stmt|;
DECL|field|changeRowFormatter
specifier|private
name|ChangeRowFormatter
name|changeRowFormatter
decl_stmt|;
DECL|method|Section ()
specifier|public
name|Section
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|ApprovalViewType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Section (final String titleText)
specifier|public
name|Section
parameter_list|(
specifier|final
name|String
name|titleText
parameter_list|)
block|{
name|this
argument_list|(
name|titleText
argument_list|,
name|ApprovalViewType
operator|.
name|NONE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Section (final String titleText, final ApprovalViewType view, final Account.Id owner)
specifier|public
name|Section
parameter_list|(
specifier|final
name|String
name|titleText
parameter_list|,
specifier|final
name|ApprovalViewType
name|view
parameter_list|,
specifier|final
name|Account
operator|.
name|Id
name|owner
parameter_list|)
block|{
name|setTitleText
argument_list|(
name|titleText
argument_list|)
expr_stmt|;
name|viewType
operator|=
name|view
expr_stmt|;
name|ownerId
operator|=
name|owner
expr_stmt|;
block|}
DECL|method|setTitleText (final String text)
specifier|public
name|void
name|setTitleText
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|titleText
operator|=
name|text
expr_stmt|;
if|if
condition|(
name|titleRow
operator|>=
literal|0
condition|)
block|{
name|parent
operator|.
name|table
operator|.
name|setText
argument_list|(
name|titleRow
argument_list|,
literal|0
argument_list|,
name|titleText
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setChangeRowFormatter (final ChangeRowFormatter changeRowFormatter)
specifier|public
name|void
name|setChangeRowFormatter
parameter_list|(
specifier|final
name|ChangeRowFormatter
name|changeRowFormatter
parameter_list|)
block|{
name|this
operator|.
name|changeRowFormatter
operator|=
name|changeRowFormatter
expr_stmt|;
block|}
DECL|method|display (final List<ChangeInfo> changeList)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changeList
parameter_list|)
block|{
specifier|final
name|int
name|sz
init|=
name|changeList
operator|!=
literal|null
condition|?
name|changeList
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|final
name|boolean
name|hadData
init|=
name|rows
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hadData
condition|)
block|{
while|while
condition|(
name|sz
operator|<
name|rows
condition|)
block|{
name|parent
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
name|rows
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hadData
condition|)
block|{
name|parent
operator|.
name|insertNoneRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|cids
init|=
operator|new
name|HashSet
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hadData
condition|)
block|{
name|parent
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|<
name|sz
condition|)
block|{
name|parent
operator|.
name|insertChangeRow
argument_list|(
name|dataBegin
operator|+
name|rows
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|ChangeInfo
name|c
init|=
name|changeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|parent
operator|.
name|populateChangeRow
argument_list|(
name|dataBegin
operator|+
name|i
argument_list|,
name|c
argument_list|,
name|changeRowFormatter
argument_list|)
expr_stmt|;
name|cids
operator|.
name|add
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|viewType
condition|)
block|{
case|case
name|NONE
case|:
break|break;
case|case
name|USER
case|:
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|userApprovals
argument_list|(
name|cids
argument_list|,
name|ownerId
argument_list|,
name|parent
operator|.
name|approvalFormatter
argument_list|(
name|dataBegin
argument_list|,
name|rows
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRONGEST
case|:
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|strongestApprovals
argument_list|(
name|cids
argument_list|,
name|parent
operator|.
name|approvalFormatter
argument_list|(
name|dataBegin
argument_list|,
name|rows
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|interface|ChangeRowFormatter
specifier|public
specifier|static
interface|interface
name|ChangeRowFormatter
block|{
comment|/**      * Returns the name of the CSS style that should be applied to the change      * row.      *      * @param c the change for which the styling should be returned      * @return the name of the CSS style that should be applied to the change      *         row      */
DECL|method|getRowStyle (ChangeInfo c)
name|String
name|getRowStyle
parameter_list|(
name|ChangeInfo
name|c
parameter_list|)
function_decl|;
comment|/**      * Returns the text that should be displayed for the change.      *      * @param c the change for which the display text should be returned      * @param displayText the current display text      * @return the new display text      */
DECL|method|getDisplayText (ChangeInfo c, String displayText)
name|String
name|getDisplayText
parameter_list|(
name|ChangeInfo
name|c
parameter_list|,
name|String
name|displayText
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

