begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|UserActivityMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_class
DECL|class|UpdateCheckTimer
class|class
name|UpdateCheckTimer
extends|extends
name|Timer
implements|implements
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
block|{
DECL|field|MAX_PERIOD
specifier|private
specifier|static
specifier|final
name|int
name|MAX_PERIOD
init|=
literal|3
operator|*
literal|60
operator|*
literal|1000
decl_stmt|;
DECL|field|IDLE_PERIOD
specifier|private
specifier|static
specifier|final
name|int
name|IDLE_PERIOD
init|=
literal|2
operator|*
literal|3600
operator|*
literal|1000
decl_stmt|;
DECL|field|POLL_PERIOD
specifier|private
specifier|static
specifier|final
name|int
name|POLL_PERIOD
init|=
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getChangeUpdateDelay
argument_list|()
operator|*
literal|1000
decl_stmt|;
DECL|field|screen
specifier|private
specifier|final
name|ChangeScreen
name|screen
decl_stmt|;
DECL|field|delay
specifier|private
name|int
name|delay
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
decl_stmt|;
DECL|method|UpdateCheckTimer (ChangeScreen screen)
name|UpdateCheckTimer
parameter_list|(
name|ChangeScreen
name|screen
parameter_list|)
block|{
name|this
operator|.
name|screen
operator|=
name|screen
expr_stmt|;
name|this
operator|.
name|delay
operator|=
name|POLL_PERIOD
expr_stmt|;
block|}
DECL|method|schedule ()
name|void
name|schedule
parameter_list|()
block|{
name|scheduleRepeating
argument_list|(
name|delay
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|screen
operator|.
name|isAttached
argument_list|()
condition|)
block|{
comment|// screen should have cancelled this timer.
name|cancel
argument_list|()
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|running
condition|)
block|{
return|return;
block|}
name|running
operator|=
literal|true
expr_stmt|;
name|screen
operator|.
name|loadChangeInfo
argument_list|(
literal|false
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|running
operator|=
literal|false
expr_stmt|;
name|screen
operator|.
name|showUpdates
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|int
name|d
init|=
name|UserActivityMonitor
operator|.
name|isActive
argument_list|()
condition|?
name|POLL_PERIOD
else|:
name|IDLE_PERIOD
decl_stmt|;
if|if
condition|(
name|d
operator|!=
name|delay
condition|)
block|{
name|delay
operator|=
name|d
expr_stmt|;
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
comment|// On failures increase the delay time and try again,
comment|// but place an upper bound on the delay.
name|running
operator|=
literal|false
expr_stmt|;
name|delay
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|max
argument_list|(
name|delay
operator|*
operator|(
literal|1.5
operator|+
name|Math
operator|.
name|random
argument_list|()
operator|)
argument_list|,
name|UserActivityMonitor
operator|.
name|isActive
argument_list|()
condition|?
name|MAX_PERIOD
else|:
name|IDLE_PERIOD
operator|+
name|MAX_PERIOD
argument_list|)
expr_stmt|;
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onValueChange (ValueChangeEvent<Boolean> event)
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|delay
operator|=
name|POLL_PERIOD
expr_stmt|;
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|delay
operator|=
name|IDLE_PERIOD
expr_stmt|;
block|}
name|schedule
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

