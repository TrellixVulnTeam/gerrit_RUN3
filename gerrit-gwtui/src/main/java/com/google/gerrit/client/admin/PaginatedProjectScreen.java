begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_class
DECL|class|PaginatedProjectScreen
specifier|abstract
class|class
name|PaginatedProjectScreen
extends|extends
name|ProjectScreen
block|{
DECL|field|pageSize
specifier|protected
name|int
name|pageSize
decl_stmt|;
DECL|field|match
specifier|protected
name|String
name|match
init|=
literal|""
decl_stmt|;
DECL|field|start
specifier|protected
name|int
name|start
decl_stmt|;
DECL|method|PaginatedProjectScreen (Project.NameKey toShow)
name|PaginatedProjectScreen
parameter_list|(
name|Project
operator|.
name|NameKey
name|toShow
parameter_list|)
block|{
name|super
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
name|pageSize
operator|=
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|changesPerPage
argument_list|()
expr_stmt|;
block|}
DECL|method|parseToken (String token)
specifier|protected
name|void
name|parseToken
parameter_list|(
name|String
name|token
parameter_list|)
block|{
for|for
control|(
name|String
name|kvPair
range|:
name|token
operator|.
name|split
argument_list|(
literal|"[,;&/?]"
argument_list|)
control|)
block|{
name|String
index|[]
name|kv
init|=
name|kvPair
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|length
operator|!=
literal|2
operator|||
name|kv
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"filter"
operator|.
name|equals
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"skip"
operator|.
name|equals
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|)
operator|&&
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
operator|.
name|matches
argument_list|(
literal|"^[\\d]+"
argument_list|)
condition|)
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|parseToken ()
specifier|protected
name|void
name|parseToken
parameter_list|()
block|{
name|parseToken
argument_list|(
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokenForScreen (String filter, int skip)
specifier|protected
name|String
name|getTokenForScreen
parameter_list|(
name|String
name|filter
parameter_list|,
name|int
name|skip
parameter_list|)
block|{
name|String
name|token
init|=
name|getScreenToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|+=
literal|"?filter="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skip
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|contains
argument_list|(
literal|"?filter="
argument_list|)
condition|)
block|{
name|token
operator|+=
literal|","
expr_stmt|;
block|}
else|else
block|{
name|token
operator|+=
literal|"?"
expr_stmt|;
block|}
name|token
operator|+=
literal|"skip="
operator|+
name|skip
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
DECL|method|getScreenToken ()
specifier|protected
specifier|abstract
name|String
name|getScreenToken
parameter_list|()
function_decl|;
DECL|method|setupNavigationLink (Hyperlink link, String filter, int skip)
specifier|protected
name|void
name|setupNavigationLink
parameter_list|(
name|Hyperlink
name|link
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|skip
parameter_list|)
block|{
name|link
operator|.
name|setTargetHistoryToken
argument_list|(
name|getTokenForScreen
argument_list|(
name|filter
argument_list|,
name|skip
argument_list|)
argument_list|)
expr_stmt|;
name|link
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

