begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.editor
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|editor
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Visibility
operator|.
name|HIDDEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Visibility
operator|.
name|VISIBLE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|DiffWebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|JumpKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|EditPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeEditApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|Header
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|HttpCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|KeyMapType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Theme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|CssResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|ClosingEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|ClosingHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ImageResourceRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|addon
operator|.
name|AddonInjector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|addon
operator|.
name|Addons
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|ChangesHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|CommandRunner
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|MergeView
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|mode
operator|.
name|ModeInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|mode
operator|.
name|ModeInjector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|theme
operator|.
name|ThemeLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|EditScreen
specifier|public
class|class
name|EditScreen
extends|extends
name|Screen
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|EditScreen
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Style
interface|interface
name|Style
extends|extends
name|CssResource
block|{
DECL|method|fullWidth ()
name|String
name|fullWidth
parameter_list|()
function_decl|;
DECL|method|base ()
name|String
name|base
parameter_list|()
function_decl|;
DECL|method|hideBase ()
name|String
name|hideBase
parameter_list|()
function_decl|;
block|}
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|startLine
specifier|private
specifier|final
name|int
name|startLine
decl_stmt|;
DECL|field|prefs
specifier|private
name|EditPreferences
name|prefs
decl_stmt|;
DECL|field|editPrefsAction
specifier|private
name|EditPreferencesAction
name|editPrefsAction
decl_stmt|;
DECL|field|mv
specifier|private
name|MergeView
name|mv
decl_stmt|;
DECL|field|cmBase
specifier|private
name|CodeMirror
name|cmBase
decl_stmt|;
DECL|field|cmEdit
specifier|private
name|CodeMirror
name|cmEdit
decl_stmt|;
DECL|field|content
specifier|private
name|HttpResponse
argument_list|<
name|NativeString
argument_list|>
name|content
decl_stmt|;
DECL|field|baseContent
specifier|private
name|HttpResponse
argument_list|<
name|NativeString
argument_list|>
name|baseContent
decl_stmt|;
DECL|field|editFileInfo
specifier|private
name|EditFileInfo
name|editFileInfo
decl_stmt|;
DECL|field|diffLinks
specifier|private
name|JsArray
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|diffLinks
decl_stmt|;
DECL|field|header
annotation|@
name|UiField
name|Element
name|header
decl_stmt|;
DECL|field|project
annotation|@
name|UiField
name|Element
name|project
decl_stmt|;
DECL|field|filePath
annotation|@
name|UiField
name|Element
name|filePath
decl_stmt|;
DECL|field|linkPanel
annotation|@
name|UiField
name|FlowPanel
name|linkPanel
decl_stmt|;
DECL|field|cursLine
annotation|@
name|UiField
name|Element
name|cursLine
decl_stmt|;
DECL|field|cursCol
annotation|@
name|UiField
name|Element
name|cursCol
decl_stmt|;
DECL|field|dirty
annotation|@
name|UiField
name|Element
name|dirty
decl_stmt|;
DECL|field|showBase
annotation|@
name|UiField
name|CheckBox
name|showBase
decl_stmt|;
DECL|field|close
annotation|@
name|UiField
name|Button
name|close
decl_stmt|;
DECL|field|save
annotation|@
name|UiField
name|Button
name|save
decl_stmt|;
DECL|field|editor
annotation|@
name|UiField
name|Element
name|editor
decl_stmt|;
DECL|field|style
annotation|@
name|UiField
name|Style
name|style
decl_stmt|;
DECL|field|resizeHandler
specifier|private
name|HandlerRegistration
name|resizeHandler
decl_stmt|;
DECL|field|closeHandler
specifier|private
name|HandlerRegistration
name|closeHandler
decl_stmt|;
DECL|field|generation
specifier|private
name|int
name|generation
decl_stmt|;
DECL|method|EditScreen (PatchSet.Id base, Patch.Key patch, int startLine)
specifier|public
name|EditScreen
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|Patch
operator|.
name|Key
name|patch
parameter_list|,
name|int
name|startLine
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|patch
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|patch
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|startLine
operator|=
name|startLine
operator|-
literal|1
expr_stmt|;
name|setRequiresSignIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|addDomHandler
argument_list|(
name|GlobalKey
operator|.
name|STOP_PROPAGATION
argument_list|,
name|KeyPressEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|FileInfo
operator|.
name|getFileName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|prefs
operator|=
name|EditPreferences
operator|.
name|create
argument_list|(
name|Gerrit
operator|.
name|getEditPreferences
argument_list|()
argument_list|)
expr_stmt|;
name|CallbackGroup
name|group1
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|CallbackGroup
name|group2
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|CallbackGroup
name|group3
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|CodeMirror
operator|.
name|initLibrary
argument_list|(
name|group1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|themeCallback
init|=
name|group3
operator|.
name|addEmpty
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
comment|// Load theme after CM library to ensure theme can override CSS.
name|ThemeLoader
operator|.
name|loadTheme
argument_list|(
name|prefs
operator|.
name|theme
argument_list|()
argument_list|,
name|themeCallback
argument_list|)
expr_stmt|;
name|group2
operator|.
name|done
argument_list|()
expr_stmt|;
operator|new
name|AddonInjector
argument_list|()
operator|.
name|add
argument_list|(
name|Addons
operator|.
name|I
operator|.
name|merge_bundled
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|inject
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{           }
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|prefs
operator|.
name|showBase
argument_list|()
operator|||
name|revision
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|group3
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{       }
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeApi
operator|.
name|detail
argument_list|(
name|revision
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|group1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeInfo
name|c
parameter_list|)
block|{
name|project
operator|.
name|setInnerText
argument_list|(
name|c
operator|.
name|project
argument_list|()
argument_list|)
expr_stmt|;
name|SafeHtml
operator|.
name|setInnerHTML
argument_list|(
name|filePath
argument_list|,
name|Header
operator|.
name|formatPath
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{           }
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|revision
operator|.
name|get
argument_list|()
operator|==
literal|0
condition|)
block|{
name|ChangeEditApi
operator|.
name|getMeta
argument_list|(
name|revision
argument_list|,
name|path
argument_list|,
name|group1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|EditFileInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EditFileInfo
name|editInfo
parameter_list|)
block|{
name|editFileInfo
operator|=
name|editInfo
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{             }
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|showBase
argument_list|()
condition|)
block|{
name|ChangeEditApi
operator|.
name|get
argument_list|(
name|revision
argument_list|,
name|path
argument_list|,
literal|true
comment|/* base */
argument_list|,
name|group1
operator|.
name|addFinal
argument_list|(
operator|new
name|HttpCallback
argument_list|<
name|NativeString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HttpResponse
argument_list|<
name|NativeString
argument_list|>
name|fc
parameter_list|)
block|{
name|baseContent
operator|=
name|fc
expr_stmt|;
name|group3
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{               }
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group1
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// TODO(davido): We probably want to create dedicated GET EditScreenMeta
comment|// REST endpoint. Abuse GET diff for now, as it retrieves links we need.
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|webLinksOnly
argument_list|()
operator|.
name|get
argument_list|(
name|group1
operator|.
name|addFinal
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|diffLinks
operator|=
name|diffInfo
operator|.
name|webLinks
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{           }
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeEditApi
operator|.
name|get
argument_list|(
name|revision
argument_list|,
name|path
argument_list|,
name|group2
operator|.
name|add
argument_list|(
operator|new
name|HttpCallback
argument_list|<
name|NativeString
argument_list|>
argument_list|()
block|{
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|modeCallback
init|=
name|group3
operator|.
name|addEmpty
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HttpResponse
argument_list|<
name|NativeString
argument_list|>
name|fc
parameter_list|)
block|{
name|content
operator|=
name|fc
expr_stmt|;
if|if
condition|(
name|revision
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
name|baseContent
operator|=
name|fc
expr_stmt|;
block|}
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|injectMode
argument_list|(
name|fc
operator|.
name|getContentType
argument_list|()
argument_list|,
name|modeCallback
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modeCallback
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
comment|// "Not Found" means it's a new file.
if|if
condition|(
name|RestApi
operator|.
name|isNotFound
argument_list|(
name|e
argument_list|)
condition|)
block|{
name|content
operator|=
literal|null
expr_stmt|;
name|modeCallback
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|GerritCallback
operator|.
name|showFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|group3
operator|.
name|addListener
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|Void
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|initEditor
argument_list|()
expr_stmt|;
name|renderLinks
argument_list|(
name|editFileInfo
argument_list|,
name|diffLinks
argument_list|)
expr_stmt|;
name|editFileInfo
operator|=
literal|null
expr_stmt|;
name|diffLinks
operator|=
literal|null
expr_stmt|;
name|showBase
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|showBase
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cmBase
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|KeyMap
name|localKeyMap
init|=
name|KeyMap
operator|.
name|create
argument_list|()
decl_stmt|;
name|localKeyMap
operator|.
name|on
argument_list|(
literal|"Ctrl-L"
argument_list|,
name|gotoLine
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"Cmd-L"
argument_list|,
name|gotoLine
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"Cmd-S"
argument_list|,
name|save
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO(davido): Find a better way to prevent key maps collisions
if|if
condition|(
name|prefs
operator|.
name|keyMapType
argument_list|()
operator|!=
name|KeyMapType
operator|.
name|EMACS
condition|)
block|{
name|localKeyMap
operator|.
name|on
argument_list|(
literal|"Ctrl-S"
argument_list|,
name|save
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmBase
operator|.
name|addKeyMap
argument_list|(
name|localKeyMap
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|addKeyMap
argument_list|(
name|localKeyMap
argument_list|)
expr_stmt|;
block|}
DECL|method|gotoLine ()
specifier|private
name|Runnable
name|gotoLine
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmEdit
operator|.
name|execCommand
argument_list|(
literal|"jumpToLine"
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|enable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|hideTopMenu
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|resizeHandler
operator|=
name|Window
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|adjustHeight
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closeHandler
operator|=
name|Window
operator|.
name|addWindowClosingHandler
argument_list|(
operator|new
name|ClosingHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onWindowClosing
parameter_list|(
name|ClosingEvent
name|event
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cmEdit
operator|.
name|isClean
argument_list|(
name|generation
argument_list|)
condition|)
block|{
name|event
operator|.
name|setMessage
argument_list|(
name|EditConstants
operator|.
name|I
operator|.
name|closeUnsavedChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|generation
operator|=
name|cmEdit
operator|.
name|changeGeneration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setClean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|on
argument_list|(
operator|new
name|ChangesHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
name|setClean
argument_list|(
name|cm
operator|.
name|isClean
argument_list|(
name|generation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|adjustHeight
argument_list|()
expr_stmt|;
name|cmEdit
operator|.
name|on
argument_list|(
literal|"cursorActivity"
argument_list|,
name|updateCursorPosition
argument_list|()
argument_list|)
expr_stmt|;
name|setShowTabs
argument_list|(
name|prefs
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
name|setLineLength
argument_list|(
name|prefs
operator|.
name|lineLength
argument_list|()
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|cmEdit
operator|.
name|focus
argument_list|()
expr_stmt|;
if|if
condition|(
name|startLine
operator|>
literal|0
condition|)
block|{
name|cmEdit
operator|.
name|scrollToLine
argument_list|(
name|startLine
argument_list|)
expr_stmt|;
block|}
name|updateActiveLine
argument_list|()
expr_stmt|;
name|editPrefsAction
operator|=
operator|new
name|EditPreferencesAction
argument_list|(
name|this
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmBase
operator|!=
literal|null
condition|)
block|{
name|cmBase
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmEdit
operator|!=
literal|null
condition|)
block|{
name|cmEdit
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resizeHandler
operator|!=
literal|null
condition|)
block|{
name|resizeHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|closeHandler
operator|!=
literal|null
condition|)
block|{
name|closeHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getEditor ()
name|CodeMirror
name|getEditor
parameter_list|()
block|{
return|return
name|cmEdit
return|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"editSettings"
argument_list|)
DECL|method|onEditSetting (@uppressWarningsR) ClickEvent e)
name|void
name|onEditSetting
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|editPrefsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"save"
argument_list|)
DECL|method|onSave (@uppressWarningsR) ClickEvent e)
name|void
name|onSave
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|save
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"close"
argument_list|)
DECL|method|onClose (@uppressWarningsR) ClickEvent e)
name|void
name|onClose
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
if|if
condition|(
name|cmEdit
operator|.
name|isClean
argument_list|(
name|generation
argument_list|)
operator|||
name|Window
operator|.
name|confirm
argument_list|(
name|EditConstants
operator|.
name|I
operator|.
name|cancelUnsavedChanges
argument_list|()
argument_list|)
condition|)
block|{
name|upToChange
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|displayBase ()
specifier|private
name|void
name|displayBase
parameter_list|()
block|{
name|cmBase
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeClassName
argument_list|(
name|style
operator|.
name|hideBase
argument_list|()
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeClassName
argument_list|(
name|style
operator|.
name|fullWidth
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|getGapElement
argument_list|()
operator|.
name|removeClassName
argument_list|(
name|style
operator|.
name|hideBase
argument_list|()
argument_list|)
expr_stmt|;
name|setCmBaseValue
argument_list|()
expr_stmt|;
name|setLineLength
argument_list|(
name|prefs
operator|.
name|lineLength
argument_list|()
argument_list|)
expr_stmt|;
name|cmBase
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"showBase"
argument_list|)
DECL|method|onShowBase (ValueChangeEvent<Boolean> e)
name|void
name|onShowBase
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|boolean
name|shouldShow
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|shouldShow
condition|)
block|{
if|if
condition|(
name|baseContent
operator|==
literal|null
condition|)
block|{
name|ChangeEditApi
operator|.
name|get
argument_list|(
name|revision
argument_list|,
name|path
argument_list|,
literal|true
comment|/* base */
argument_list|,
operator|new
name|HttpCallback
argument_list|<
name|NativeString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|HttpResponse
argument_list|<
name|NativeString
argument_list|>
name|fc
parameter_list|)
block|{
name|baseContent
operator|=
name|fc
expr_stmt|;
name|displayBase
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{               }
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|displayBase
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|cmBase
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|addClassName
argument_list|(
name|style
operator|.
name|hideBase
argument_list|()
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|addClassName
argument_list|(
name|style
operator|.
name|fullWidth
argument_list|()
argument_list|)
expr_stmt|;
name|mv
operator|.
name|getGapElement
argument_list|()
operator|.
name|addClassName
argument_list|(
name|style
operator|.
name|hideBase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mv
operator|.
name|setShowDifferences
argument_list|(
name|shouldShow
argument_list|)
expr_stmt|;
block|}
DECL|method|setOption (String option, String value)
name|void
name|setOption
parameter_list|(
name|String
name|option
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setOption (String option, boolean value)
name|void
name|setOption
parameter_list|(
name|String
name|option
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setOption (String option, double value)
name|void
name|setOption
parameter_list|(
name|String
name|option
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
name|option
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|setTheme (final Theme newTheme)
name|void
name|setTheme
parameter_list|(
specifier|final
name|Theme
name|newTheme
parameter_list|)
block|{
name|cmBase
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
literal|"theme"
argument_list|,
name|newTheme
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"theme"
argument_list|,
name|newTheme
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setLineLength (int length)
name|void
name|setLineLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|int
name|adjustedLength
init|=
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
literal|72
else|:
name|length
decl_stmt|;
name|cmBase
operator|.
name|extras
argument_list|()
operator|.
name|lineLength
argument_list|(
name|adjustedLength
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|extras
argument_list|()
operator|.
name|lineLength
argument_list|(
name|adjustedLength
argument_list|)
expr_stmt|;
block|}
DECL|method|setIndentUnit (int indent)
name|void
name|setIndentUnit
parameter_list|(
name|int
name|indent
parameter_list|)
block|{
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"indentUnit"
argument_list|,
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
literal|2
else|:
name|indent
argument_list|)
expr_stmt|;
block|}
DECL|method|setShowLineNumbers (boolean show)
name|void
name|setShowLineNumbers
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|show
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|show
argument_list|)
expr_stmt|;
block|}
DECL|method|setShowWhitespaceErrors (final boolean show)
name|void
name|setShowWhitespaceErrors
parameter_list|(
specifier|final
name|boolean
name|show
parameter_list|)
block|{
name|cmBase
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
literal|"showTrailingSpace"
argument_list|,
name|show
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"showTrailingSpace"
argument_list|,
name|show
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setShowTabs (boolean show)
name|void
name|setShowTabs
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|cmBase
operator|.
name|extras
argument_list|()
operator|.
name|showTabs
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|extras
argument_list|()
operator|.
name|showTabs
argument_list|(
name|show
argument_list|)
expr_stmt|;
block|}
DECL|method|adjustHeight ()
name|void
name|adjustHeight
parameter_list|()
block|{
name|int
name|height
init|=
name|header
operator|.
name|getOffsetHeight
argument_list|()
decl_stmt|;
name|int
name|rest
init|=
name|Gerrit
operator|.
name|getHeaderFooterHeight
argument_list|()
operator|+
name|height
operator|+
literal|5
decl_stmt|;
comment|// Estimate
name|mv
operator|.
name|getGapElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
name|rest
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|cmBase
operator|.
name|adjustHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|adjustHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
DECL|method|setSyntaxHighlighting (boolean b)
name|void
name|setSyntaxHighlighting
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|ModeInfo
name|modeInfo
init|=
name|ModeInfo
operator|.
name|findMode
argument_list|(
name|content
operator|.
name|getContentType
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mode
init|=
name|modeInfo
operator|!=
literal|null
condition|?
name|modeInfo
operator|.
name|mime
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|b
operator|&&
name|mode
operator|!=
literal|null
operator|&&
operator|!
name|mode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|injectMode
argument_list|(
name|mode
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|prefs
operator|.
name|syntaxHighlighting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmBase
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|upToChange ()
specifier|private
name|void
name|upToChange
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChangeInEditMode
argument_list|(
name|revision
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|initEditor ()
specifier|private
name|void
name|initEditor
parameter_list|()
block|{
name|ModeInfo
name|mode
init|=
literal|null
decl_stmt|;
name|String
name|editContent
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|content
operator|!=
literal|null
operator|&&
name|content
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|editContent
operator|=
name|content
operator|.
name|getResult
argument_list|()
operator|.
name|asString
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|mode
operator|=
name|ModeInfo
operator|.
name|findMode
argument_list|(
name|content
operator|.
name|getContentType
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
name|Configuration
name|cfg
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"autoCloseBrackets"
argument_list|,
name|prefs
operator|.
name|autoCloseBrackets
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorBlinkRate"
argument_list|,
name|prefs
operator|.
name|cursorBlinkRate
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorHeight"
argument_list|,
literal|0.85
argument_list|)
operator|.
name|set
argument_list|(
literal|"indentUnit"
argument_list|,
name|prefs
operator|.
name|indentUnit
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"keyMap"
argument_list|,
name|prefs
operator|.
name|keyMapType
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineNumbers"
argument_list|,
name|prefs
operator|.
name|hideLineNumbers
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineWrapping"
argument_list|,
name|prefs
operator|.
name|lineWrapping
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"matchBrackets"
argument_list|,
name|prefs
operator|.
name|matchBrackets
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"mode"
argument_list|,
name|mode
operator|!=
literal|null
condition|?
name|mode
operator|.
name|mime
argument_list|()
else|:
literal|null
argument_list|)
operator|.
name|set
argument_list|(
literal|"origLeft"
argument_list|,
name|editContent
argument_list|)
operator|.
name|set
argument_list|(
literal|"scrollbarStyle"
argument_list|,
literal|"overlay"
argument_list|)
operator|.
name|set
argument_list|(
literal|"showTrailingSpace"
argument_list|,
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"styleSelectedText"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"tabSize"
argument_list|,
name|prefs
operator|.
name|tabSize
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"theme"
argument_list|,
name|prefs
operator|.
name|theme
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"value"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|editContent
operator|.
name|contains
argument_list|(
literal|"\r\n"
argument_list|)
condition|)
block|{
name|cfg
operator|.
name|set
argument_list|(
literal|"lineSeparator"
argument_list|,
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
name|mv
operator|=
name|MergeView
operator|.
name|create
argument_list|(
name|editor
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
name|cmBase
operator|=
name|mv
operator|.
name|leftOriginal
argument_list|()
expr_stmt|;
name|cmBase
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|addClassName
argument_list|(
name|style
operator|.
name|base
argument_list|()
argument_list|)
expr_stmt|;
name|cmEdit
operator|=
name|mv
operator|.
name|editor
argument_list|()
expr_stmt|;
name|setCmBaseValue
argument_list|()
expr_stmt|;
name|cmEdit
operator|.
name|setValue
argument_list|(
name|editContent
argument_list|)
expr_stmt|;
name|CodeMirror
operator|.
name|addCommand
argument_list|(
literal|"save"
argument_list|,
operator|new
name|CommandRunner
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|CodeMirror
name|instance
parameter_list|)
block|{
name|save
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|renderLinks (EditFileInfo editInfo, JsArray<DiffWebLinkInfo> diffLinks)
specifier|private
name|void
name|renderLinks
parameter_list|(
name|EditFileInfo
name|editInfo
parameter_list|,
name|JsArray
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|diffLinks
parameter_list|)
block|{
name|renderLinksToDiff
argument_list|()
expr_stmt|;
if|if
condition|(
name|editInfo
operator|!=
literal|null
condition|)
block|{
name|renderLinks
argument_list|(
name|Natives
operator|.
name|asList
argument_list|(
name|editInfo
operator|.
name|webLinks
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|diffLinks
operator|!=
literal|null
condition|)
block|{
name|renderLinks
argument_list|(
name|Natives
operator|.
name|asList
argument_list|(
name|diffLinks
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderLinks (List<DiffWebLinkInfo> links)
specifier|private
name|void
name|renderLinks
parameter_list|(
name|List
argument_list|<
name|DiffWebLinkInfo
argument_list|>
name|links
parameter_list|)
block|{
if|if
condition|(
name|links
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|DiffWebLinkInfo
name|webLink
range|:
name|links
control|)
block|{
name|linkPanel
operator|.
name|add
argument_list|(
name|webLink
operator|.
name|toAnchor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|renderLinksToDiff ()
specifier|private
name|void
name|renderLinksToDiff
parameter_list|()
block|{
name|InlineHyperlink
name|sbs
init|=
operator|new
name|InlineHyperlink
argument_list|()
decl_stmt|;
name|sbs
operator|.
name|setHTML
argument_list|(
operator|new
name|ImageResourceRenderer
argument_list|()
operator|.
name|render
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|sideBySideDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sbs
operator|.
name|setTargetHistoryToken
argument_list|(
name|Dispatcher
operator|.
name|toPatch
argument_list|(
literal|"sidebyside"
argument_list|,
name|base
argument_list|,
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sbs
operator|.
name|setTitle
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|sideBySideDiff
argument_list|()
argument_list|)
expr_stmt|;
name|linkPanel
operator|.
name|add
argument_list|(
name|sbs
argument_list|)
expr_stmt|;
name|InlineHyperlink
name|unified
init|=
operator|new
name|InlineHyperlink
argument_list|()
decl_stmt|;
name|unified
operator|.
name|setHTML
argument_list|(
operator|new
name|ImageResourceRenderer
argument_list|()
operator|.
name|render
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|unifiedDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|unified
operator|.
name|setTargetHistoryToken
argument_list|(
name|Dispatcher
operator|.
name|toPatch
argument_list|(
literal|"unified"
argument_list|,
name|base
argument_list|,
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|unified
operator|.
name|setTitle
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|unifiedDiff
argument_list|()
argument_list|)
expr_stmt|;
name|linkPanel
operator|.
name|add
argument_list|(
name|unified
argument_list|)
expr_stmt|;
block|}
DECL|method|updateCursorPosition ()
specifier|private
name|Runnable
name|updateCursorPosition
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// The rendering of active lines has to be deferred. Reflow
comment|// caused by adding and removing styles chokes Firefox when arrow
comment|// key (or j/k) is held down. Performance on Chrome is fine
comment|// without the deferral.
comment|//
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|cmEdit
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|updateActiveLine
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|updateActiveLine ()
specifier|private
name|void
name|updateActiveLine
parameter_list|()
block|{
name|Pos
name|p
init|=
name|cmEdit
operator|.
name|getCursor
argument_list|(
literal|"end"
argument_list|)
decl_stmt|;
name|cursLine
operator|.
name|setInnerText
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|p
operator|.
name|line
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cursCol
operator|.
name|setInnerText
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|p
operator|.
name|ch
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cmEdit
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|(
name|cmEdit
operator|.
name|getLineHandleVisualStart
argument_list|(
name|p
operator|.
name|line
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setClean (boolean clean)
specifier|private
name|void
name|setClean
parameter_list|(
name|boolean
name|clean
parameter_list|)
block|{
name|save
operator|.
name|setEnabled
argument_list|(
operator|!
name|clean
argument_list|)
expr_stmt|;
name|close
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|dirty
operator|.
name|getStyle
argument_list|()
operator|.
name|setVisibility
argument_list|(
operator|!
name|clean
condition|?
name|VISIBLE
else|:
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
DECL|method|save ()
specifier|private
name|Runnable
name|save
parameter_list|()
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
operator|!
name|cmEdit
operator|.
name|isClean
argument_list|(
name|generation
argument_list|)
condition|)
block|{
name|close
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|String
name|text
init|=
name|cmEdit
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|String
name|trimmed
init|=
name|text
operator|.
name|trim
argument_list|()
operator|+
literal|"\r"
decl_stmt|;
if|if
condition|(
operator|!
name|trimmed
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
block|{
name|text
operator|=
name|trimmed
expr_stmt|;
name|cmEdit
operator|.
name|setValue
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|g
init|=
name|cmEdit
operator|.
name|changeGeneration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|ChangeEditApi
operator|.
name|put
argument_list|(
name|revision
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|path
argument_list|,
name|text
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
name|generation
operator|=
name|g
expr_stmt|;
name|setClean
argument_list|(
name|cmEdit
operator|.
name|isClean
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|close
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|injectMode (String type, AsyncCallback<Void> cb)
specifier|private
name|void
name|injectMode
parameter_list|(
name|String
name|type
parameter_list|,
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|cb
parameter_list|)
block|{
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|type
argument_list|)
operator|.
name|inject
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|setCmBaseValue ()
specifier|private
name|void
name|setCmBaseValue
parameter_list|()
block|{
name|cmBase
operator|.
name|setValue
argument_list|(
name|baseContent
operator|!=
literal|null
operator|&&
name|baseContent
operator|.
name|getResult
argument_list|()
operator|!=
literal|null
condition|?
name|baseContent
operator|.
name|getResult
argument_list|()
operator|.
name|asString
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

