begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.api
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ErrorDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|CodeDownloadException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|ScriptInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DialogBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|progress
operator|.
name|client
operator|.
name|ProgressBar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/** Loads JavaScript plugins with a progress meter visible. */
end_comment

begin_class
DECL|class|PluginLoader
specifier|public
class|class
name|PluginLoader
extends|extends
name|DialogBox
block|{
DECL|field|self
specifier|private
specifier|static
name|PluginLoader
name|self
decl_stmt|;
DECL|method|load ( List<String> plugins, int loadTimeout, AsyncCallback<VoidResult> callback)
specifier|public
specifier|static
name|void
name|load
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|plugins
parameter_list|,
name|int
name|loadTimeout
parameter_list|,
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|callback
parameter_list|)
block|{
if|if
condition|(
name|plugins
operator|==
literal|null
operator|||
name|plugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|VoidResult
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plugins
operator|=
name|plugins
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|p
lambda|->
name|p
operator|.
name|endsWith
argument_list|(
literal|".js"
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|plugins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|callback
operator|.
name|onSuccess
argument_list|(
name|VoidResult
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|self
operator|=
operator|new
name|PluginLoader
argument_list|(
name|loadTimeout
argument_list|,
name|callback
argument_list|)
expr_stmt|;
name|self
operator|.
name|load
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
name|self
operator|.
name|startTimers
argument_list|()
expr_stmt|;
name|self
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|loaded ()
specifier|static
name|void
name|loaded
parameter_list|()
block|{
name|self
operator|.
name|loadedOne
argument_list|()
expr_stmt|;
block|}
DECL|field|loadTimeout
specifier|private
specifier|final
name|int
name|loadTimeout
decl_stmt|;
DECL|field|callback
specifier|private
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|callback
decl_stmt|;
DECL|field|progress
specifier|private
name|ProgressBar
name|progress
decl_stmt|;
DECL|field|show
specifier|private
name|Timer
name|show
decl_stmt|;
DECL|field|update
specifier|private
name|Timer
name|update
decl_stmt|;
DECL|field|timeout
specifier|private
name|Timer
name|timeout
decl_stmt|;
DECL|field|visible
specifier|private
name|boolean
name|visible
decl_stmt|;
DECL|method|PluginLoader (int loadTimeout, AsyncCallback<VoidResult> cb)
specifier|private
name|PluginLoader
parameter_list|(
name|int
name|loadTimeout
parameter_list|,
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|cb
parameter_list|)
block|{
name|super
argument_list|(
comment|/* auto hide */
literal|false
argument_list|,
comment|/* modal */
literal|true
argument_list|)
expr_stmt|;
name|callback
operator|=
name|cb
expr_stmt|;
name|this
operator|.
name|loadTimeout
operator|=
name|loadTimeout
expr_stmt|;
name|progress
operator|=
operator|new
name|ProgressBar
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|loadingPlugins
argument_list|()
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|errorDialog
argument_list|()
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|loadingPluginsDialog
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|load (List<String> pluginUrls)
specifier|private
name|void
name|load
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pluginUrls
parameter_list|)
block|{
for|for
control|(
name|String
name|url
range|:
name|pluginUrls
control|)
block|{
name|Plugin
name|plugin
init|=
name|Plugin
operator|.
name|create
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|plugins
argument_list|()
operator|.
name|put
argument_list|(
name|url
argument_list|,
name|plugin
argument_list|)
expr_stmt|;
name|ScriptInjector
operator|.
name|fromUrl
argument_list|(
name|url
argument_list|)
operator|.
name|setWindow
argument_list|(
name|ScriptInjector
operator|.
name|TOP_WINDOW
argument_list|)
operator|.
name|setCallback
argument_list|(
operator|new
name|LoadCallback
argument_list|(
name|plugin
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|startTimers ()
specifier|private
name|void
name|startTimers
parameter_list|()
block|{
name|show
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|setText
argument_list|(
name|Window
operator|.
name|getTitle
argument_list|()
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|setGlassEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getGlassElement
argument_list|()
operator|.
name|addClassName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|errorDialogGlass
argument_list|()
argument_list|)
expr_stmt|;
name|hide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|center
argument_list|()
expr_stmt|;
name|visible
operator|=
literal|true
expr_stmt|;
block|}
block|}
expr_stmt|;
name|show
operator|.
name|schedule
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|update
operator|=
operator|new
name|Timer
argument_list|()
block|{
specifier|private
name|int
name|cycle
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|progress
operator|.
name|setValue
argument_list|(
literal|100
operator|*
operator|++
name|cycle
operator|*
literal|250
operator|/
name|loadTimeout
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|update
operator|.
name|scheduleRepeating
argument_list|(
literal|250
argument_list|)
expr_stmt|;
name|timeout
operator|=
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|timeout
operator|.
name|schedule
argument_list|(
name|loadTimeout
argument_list|)
expr_stmt|;
block|}
DECL|method|loadedOne ()
specifier|private
name|void
name|loadedOne
parameter_list|()
block|{
name|boolean
name|done
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|plugins
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|done
operator|&=
name|plugin
operator|.
name|loaded
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|done
condition|)
block|{
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|finish ()
specifier|private
name|void
name|finish
parameter_list|()
block|{
name|show
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|update
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|timeout
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|self
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|hadFailures
argument_list|()
condition|)
block|{
if|if
condition|(
name|visible
condition|)
block|{
name|progress
operator|.
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|hide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|schedule
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|callback
operator|.
name|onSuccess
argument_list|(
name|VoidResult
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hadFailures ()
specifier|private
name|boolean
name|hadFailures
parameter_list|()
block|{
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Plugin
name|plugin
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|plugins
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|plugin
operator|.
name|success
argument_list|()
condition|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
name|Exception
name|e
init|=
name|plugin
operator|.
name|failure
argument_list|()
decl_stmt|;
name|String
name|msg
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
name|e
operator|instanceof
name|CodeDownloadException
condition|)
block|{
name|msg
operator|=
name|Gerrit
operator|.
name|M
operator|.
name|cannotDownloadPlugin
argument_list|(
name|plugin
operator|.
name|url
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|Gerrit
operator|.
name|M
operator|.
name|pluginFailed
argument_list|(
name|plugin
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|hide
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|new
name|ErrorDialog
argument_list|(
name|msg
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|failed
return|;
block|}
DECL|method|plugins ()
specifier|private
specifier|static
specifier|native
name|NativeMap
argument_list|<
name|Plugin
argument_list|>
name|plugins
parameter_list|()
comment|/*-{ return $wnd.Gerrit.plugins }-*/
function_decl|;
DECL|class|LoadCallback
specifier|private
class|class
name|LoadCallback
implements|implements
name|Callback
argument_list|<
name|Void
argument_list|,
name|Exception
argument_list|>
block|{
DECL|field|plugin
specifier|private
specifier|final
name|Plugin
name|plugin
decl_stmt|;
DECL|method|LoadCallback (Plugin plugin)
name|LoadCallback
parameter_list|(
name|Plugin
name|plugin
parameter_list|)
block|{
name|this
operator|.
name|plugin
operator|=
name|plugin
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onSuccess (Void result)
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|onFailure (Exception reason)
specifier|public
name|void
name|onFailure
parameter_list|(
name|Exception
name|reason
parameter_list|)
block|{
name|plugin
operator|.
name|failure
argument_list|(
name|reason
argument_list|)
expr_stmt|;
name|loadedOne
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

