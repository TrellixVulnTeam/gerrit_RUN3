begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineWidget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Manages paddings for CommentBoxes. Each line that may need to be padded owns  * a PaddingManager instance, which maintains a padding widget whose height  * changes as necessary. PaddingManager calculates padding by taking the  * difference of the sum of CommentBox heights on the two sides.  *  * TODO: Let PaddingManager also take care of the paddings introduced by  * insertions and deletions.  */
end_comment

begin_class
DECL|class|PaddingManager
class|class
name|PaddingManager
block|{
DECL|field|comments
specifier|private
name|List
argument_list|<
name|CommentBox
argument_list|>
name|comments
decl_stmt|;
DECL|field|wrapper
specifier|private
name|PaddingWidgetWrapper
name|wrapper
decl_stmt|;
DECL|field|other
specifier|private
name|PaddingManager
name|other
decl_stmt|;
DECL|method|PaddingManager (PaddingWidgetWrapper padding)
name|PaddingManager
parameter_list|(
name|PaddingWidgetWrapper
name|padding
parameter_list|)
block|{
name|comments
operator|=
operator|new
name|ArrayList
argument_list|<
name|CommentBox
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|wrapper
operator|=
name|padding
expr_stmt|;
block|}
DECL|method|link (PaddingManager a, PaddingManager b)
specifier|static
name|void
name|link
parameter_list|(
name|PaddingManager
name|a
parameter_list|,
name|PaddingManager
name|b
parameter_list|)
block|{
name|a
operator|.
name|other
operator|=
name|b
expr_stmt|;
name|b
operator|.
name|other
operator|=
name|a
expr_stmt|;
block|}
DECL|method|getMyTotalHeight ()
specifier|private
name|int
name|getMyTotalHeight
parameter_list|()
block|{
name|int
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CommentBox
name|box
range|:
name|comments
control|)
block|{
name|total
operator|+=
name|box
operator|.
name|getOffsetHeight
argument_list|()
operator|+
literal|5
expr_stmt|;
comment|// 5px for shadow margin
block|}
return|return
name|total
return|;
block|}
DECL|method|setPaddingHeight (int height)
specifier|private
name|void
name|setPaddingHeight
parameter_list|(
name|int
name|height
parameter_list|)
block|{
name|SideBySide2
operator|.
name|setHeightInPx
argument_list|(
name|wrapper
operator|.
name|element
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|wrapper
operator|.
name|widget
operator|.
name|changed
argument_list|()
expr_stmt|;
block|}
DECL|method|resizePaddingWidget ()
name|void
name|resizePaddingWidget
parameter_list|()
block|{
assert|assert
name|other
operator|!=
literal|null
assert|;
name|int
name|myHeight
init|=
name|getMyTotalHeight
argument_list|()
decl_stmt|;
name|int
name|othersHeight
init|=
name|other
operator|.
name|getMyTotalHeight
argument_list|()
decl_stmt|;
name|int
name|paddingNeeded
init|=
name|othersHeight
operator|-
name|myHeight
decl_stmt|;
if|if
condition|(
name|paddingNeeded
operator|<
literal|0
condition|)
block|{
name|setPaddingHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|other
operator|.
name|setPaddingHeight
argument_list|(
operator|-
name|paddingNeeded
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setPaddingHeight
argument_list|(
name|paddingNeeded
argument_list|)
expr_stmt|;
name|other
operator|.
name|setPaddingHeight
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** This is unused now because threading info is ignored. */
DECL|method|getReplyIndex (CommentBox box)
name|int
name|getReplyIndex
parameter_list|(
name|CommentBox
name|box
parameter_list|)
block|{
return|return
name|comments
operator|.
name|indexOf
argument_list|(
name|box
argument_list|)
operator|+
literal|1
return|;
block|}
DECL|method|getCurrentCount ()
name|int
name|getCurrentCount
parameter_list|()
block|{
return|return
name|comments
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|insert (CommentBox box, int index)
name|void
name|insert
parameter_list|(
name|CommentBox
name|box
parameter_list|,
name|int
name|index
parameter_list|)
block|{
name|comments
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|remove (CommentBox box)
name|void
name|remove
parameter_list|(
name|CommentBox
name|box
parameter_list|)
block|{
name|comments
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|class|PaddingWidgetWrapper
specifier|static
class|class
name|PaddingWidgetWrapper
block|{
DECL|field|widget
specifier|private
name|LineWidget
name|widget
decl_stmt|;
DECL|field|element
specifier|private
name|Element
name|element
decl_stmt|;
DECL|method|PaddingWidgetWrapper (LineWidget w, Element e)
name|PaddingWidgetWrapper
parameter_list|(
name|LineWidget
name|w
parameter_list|,
name|Element
name|e
parameter_list|)
block|{
name|widget
operator|=
name|w
expr_stmt|;
name|element
operator|=
name|e
expr_stmt|;
block|}
DECL|method|getWidget ()
name|LineWidget
name|getWidget
parameter_list|()
block|{
return|return
name|widget
return|;
block|}
DECL|method|getElement ()
name|Element
name|getElement
parameter_list|()
block|{
return|return
name|element
return|;
block|}
block|}
DECL|class|LinePaddingWidgetWrapper
specifier|static
class|class
name|LinePaddingWidgetWrapper
extends|extends
name|PaddingWidgetWrapper
block|{
DECL|field|chunkLength
specifier|private
name|int
name|chunkLength
decl_stmt|;
DECL|field|otherLine
specifier|private
name|int
name|otherLine
decl_stmt|;
DECL|method|LinePaddingWidgetWrapper (PaddingWidgetWrapper pair, int otherLine, int chunkLength)
name|LinePaddingWidgetWrapper
parameter_list|(
name|PaddingWidgetWrapper
name|pair
parameter_list|,
name|int
name|otherLine
parameter_list|,
name|int
name|chunkLength
parameter_list|)
block|{
name|super
argument_list|(
name|pair
operator|.
name|widget
argument_list|,
name|pair
operator|.
name|element
argument_list|)
expr_stmt|;
name|this
operator|.
name|otherLine
operator|=
name|otherLine
expr_stmt|;
name|this
operator|.
name|chunkLength
operator|=
name|chunkLength
expr_stmt|;
block|}
DECL|method|getChunkLength ()
name|int
name|getChunkLength
parameter_list|()
block|{
return|return
name|chunkLength
return|;
block|}
DECL|method|getOtherLine ()
name|int
name|getOtherLine
parameter_list|()
block|{
return|return
name|otherLine
return|;
block|}
block|}
block|}
end_class

end_unit

