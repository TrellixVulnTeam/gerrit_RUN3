begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.editor
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|editor
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|AccountApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|EditPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NpIntTextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|EditPreferencesInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|KeyMapType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Theme
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Visibility
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|CssResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ToggleButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|theme
operator|.
name|ThemeLoader
import|;
end_import

begin_comment
comment|/** Displays current edit preferences. */
end_comment

begin_class
DECL|class|EditPreferencesBox
specifier|public
class|class
name|EditPreferencesBox
extends|extends
name|Composite
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|EditPreferencesBox
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Style
specifier|public
interface|interface
name|Style
extends|extends
name|CssResource
block|{
DECL|method|dialog ()
name|String
name|dialog
parameter_list|()
function_decl|;
block|}
DECL|field|view
specifier|private
specifier|final
name|EditScreen
name|view
decl_stmt|;
DECL|field|prefs
specifier|private
name|EditPreferences
name|prefs
decl_stmt|;
DECL|field|style
annotation|@
name|UiField
name|Style
name|style
decl_stmt|;
DECL|field|header
annotation|@
name|UiField
name|Element
name|header
decl_stmt|;
DECL|field|close
annotation|@
name|UiField
name|Anchor
name|close
decl_stmt|;
DECL|field|tabWidth
annotation|@
name|UiField
name|NpIntTextBox
name|tabWidth
decl_stmt|;
DECL|field|lineLength
annotation|@
name|UiField
name|NpIntTextBox
name|lineLength
decl_stmt|;
DECL|field|indentUnit
annotation|@
name|UiField
name|NpIntTextBox
name|indentUnit
decl_stmt|;
DECL|field|cursorBlinkRate
annotation|@
name|UiField
name|NpIntTextBox
name|cursorBlinkRate
decl_stmt|;
DECL|field|topMenu
annotation|@
name|UiField
name|ToggleButton
name|topMenu
decl_stmt|;
DECL|field|syntaxHighlighting
annotation|@
name|UiField
name|ToggleButton
name|syntaxHighlighting
decl_stmt|;
DECL|field|showTabs
annotation|@
name|UiField
name|ToggleButton
name|showTabs
decl_stmt|;
DECL|field|whitespaceErrors
annotation|@
name|UiField
name|ToggleButton
name|whitespaceErrors
decl_stmt|;
DECL|field|lineNumbers
annotation|@
name|UiField
name|ToggleButton
name|lineNumbers
decl_stmt|;
DECL|field|matchBrackets
annotation|@
name|UiField
name|ToggleButton
name|matchBrackets
decl_stmt|;
DECL|field|autoCloseBrackets
annotation|@
name|UiField
name|ToggleButton
name|autoCloseBrackets
decl_stmt|;
DECL|field|showBase
annotation|@
name|UiField
name|ToggleButton
name|showBase
decl_stmt|;
DECL|field|theme
annotation|@
name|UiField
name|ListBox
name|theme
decl_stmt|;
DECL|field|keyMap
annotation|@
name|UiField
name|ListBox
name|keyMap
decl_stmt|;
DECL|field|apply
annotation|@
name|UiField
name|Button
name|apply
decl_stmt|;
DECL|field|save
annotation|@
name|UiField
name|Button
name|save
decl_stmt|;
DECL|method|EditPreferencesBox (EditScreen view)
specifier|public
name|EditPreferencesBox
parameter_list|(
name|EditScreen
name|view
parameter_list|)
block|{
name|this
operator|.
name|view
operator|=
name|view
expr_stmt|;
name|initWidget
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|initTheme
argument_list|()
expr_stmt|;
name|initKeyMapType
argument_list|()
expr_stmt|;
if|if
condition|(
name|view
operator|==
literal|null
condition|)
block|{
name|UIObject
operator|.
name|setVisible
argument_list|(
name|header
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|apply
operator|.
name|getElement
argument_list|()
operator|.
name|getStyle
argument_list|()
operator|.
name|setVisibility
argument_list|(
name|Visibility
operator|.
name|HIDDEN
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStyle ()
specifier|public
name|Style
name|getStyle
parameter_list|()
block|{
return|return
name|style
return|;
block|}
DECL|method|set (EditPreferences prefs)
specifier|public
name|void
name|set
parameter_list|(
name|EditPreferences
name|prefs
parameter_list|)
block|{
name|this
operator|.
name|prefs
operator|=
name|prefs
expr_stmt|;
name|tabWidth
operator|.
name|setIntValue
argument_list|(
name|prefs
operator|.
name|tabSize
argument_list|()
argument_list|)
expr_stmt|;
name|lineLength
operator|.
name|setIntValue
argument_list|(
name|prefs
operator|.
name|lineLength
argument_list|()
argument_list|)
expr_stmt|;
name|indentUnit
operator|.
name|setIntValue
argument_list|(
name|prefs
operator|.
name|indentUnit
argument_list|()
argument_list|)
expr_stmt|;
name|cursorBlinkRate
operator|.
name|setIntValue
argument_list|(
name|prefs
operator|.
name|cursorBlinkRate
argument_list|()
argument_list|)
expr_stmt|;
name|topMenu
operator|.
name|setValue
argument_list|(
operator|!
name|prefs
operator|.
name|hideTopMenu
argument_list|()
argument_list|)
expr_stmt|;
name|syntaxHighlighting
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
argument_list|)
expr_stmt|;
name|showTabs
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
name|whitespaceErrors
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|()
argument_list|)
expr_stmt|;
name|lineNumbers
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|hideLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
name|matchBrackets
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|matchBrackets
argument_list|()
argument_list|)
expr_stmt|;
name|autoCloseBrackets
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|autoCloseBrackets
argument_list|()
argument_list|)
expr_stmt|;
name|showBase
operator|.
name|setValue
argument_list|(
name|prefs
operator|.
name|showBase
argument_list|()
argument_list|)
expr_stmt|;
name|setTheme
argument_list|(
name|prefs
operator|.
name|theme
argument_list|()
argument_list|)
expr_stmt|;
name|setKeyMapType
argument_list|(
name|prefs
operator|.
name|keyMapType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"tabWidth"
argument_list|)
DECL|method|onTabWidth (ValueChangeEvent<String> e)
name|void
name|onTabWidth
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|e
parameter_list|)
block|{
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefs
operator|.
name|tabSize
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setOption
argument_list|(
literal|"tabSize"
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"lineLength"
argument_list|)
DECL|method|onLineLength (ValueChangeEvent<String> e)
name|void
name|onLineLength
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|e
parameter_list|)
block|{
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefs
operator|.
name|lineLength
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setLineLength
argument_list|(
name|prefs
operator|.
name|lineLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"indentUnit"
argument_list|)
DECL|method|onIndentUnit (ValueChangeEvent<String> e)
name|void
name|onIndentUnit
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|e
parameter_list|)
block|{
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|prefs
operator|.
name|indentUnit
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setIndentUnit
argument_list|(
name|prefs
operator|.
name|indentUnit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"cursorBlinkRate"
argument_list|)
DECL|method|onCursoBlinkRate (ValueChangeEvent<String> e)
name|void
name|onCursoBlinkRate
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|e
parameter_list|)
block|{
name|String
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
name|v
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// A negative value hides the cursor entirely:
comment|// don't let user shoot himself in the foot.
name|prefs
operator|.
name|cursorBlinkRate
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setOption
argument_list|(
literal|"cursorBlinkRate"
argument_list|,
name|prefs
operator|.
name|cursorBlinkRate
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"topMenu"
argument_list|)
DECL|method|onTopMenu (ValueChangeEvent<Boolean> e)
name|void
name|onTopMenu
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|hideTopMenu
argument_list|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
operator|!
name|prefs
operator|.
name|hideTopMenu
argument_list|()
argument_list|)
expr_stmt|;
name|view
operator|.
name|adjustHeight
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"showTabs"
argument_list|)
DECL|method|onShowTabs (ValueChangeEvent<Boolean> e)
name|void
name|onShowTabs
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|showTabs
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setShowTabs
argument_list|(
name|prefs
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"whitespaceErrors"
argument_list|)
DECL|method|onshowTrailingSpace (ValueChangeEvent<Boolean> e)
name|void
name|onshowTrailingSpace
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setShowWhitespaceErrors
argument_list|(
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"lineNumbers"
argument_list|)
DECL|method|onLineNumbers (ValueChangeEvent<Boolean> e)
name|void
name|onLineNumbers
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|hideLineNumbers
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setShowLineNumbers
argument_list|(
name|prefs
operator|.
name|hideLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"syntaxHighlighting"
argument_list|)
DECL|method|onSyntaxHighlighting (ValueChangeEvent<Boolean> e)
name|void
name|onSyntaxHighlighting
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|syntaxHighlighting
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setSyntaxHighlighting
argument_list|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"matchBrackets"
argument_list|)
DECL|method|onMatchBrackets (ValueChangeEvent<Boolean> e)
name|void
name|onMatchBrackets
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|matchBrackets
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setOption
argument_list|(
literal|"matchBrackets"
argument_list|,
name|prefs
operator|.
name|matchBrackets
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"autoCloseBrackets"
argument_list|)
DECL|method|onCloseBrackets (ValueChangeEvent<Boolean> e)
name|void
name|onCloseBrackets
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|prefs
operator|.
name|autoCloseBrackets
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|getEditor
argument_list|()
operator|.
name|setOption
argument_list|(
literal|"autoCloseBrackets"
argument_list|,
name|prefs
operator|.
name|autoCloseBrackets
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"showBase"
argument_list|)
DECL|method|onShowBase (ValueChangeEvent<Boolean> e)
name|void
name|onShowBase
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|e
parameter_list|)
block|{
name|Boolean
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|prefs
operator|.
name|showBase
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|showBase
operator|.
name|setValue
argument_list|(
name|value
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"theme"
argument_list|)
DECL|method|onTheme (@uppressWarningsR) ChangeEvent e)
name|void
name|onTheme
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ChangeEvent
name|e
parameter_list|)
block|{
specifier|final
name|Theme
name|newTheme
init|=
name|Theme
operator|.
name|valueOf
argument_list|(
name|theme
operator|.
name|getValue
argument_list|(
name|theme
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|theme
argument_list|(
name|newTheme
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|ThemeLoader
operator|.
name|loadTheme
argument_list|(
name|newTheme
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|view
operator|.
name|setTheme
argument_list|(
name|newTheme
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"keyMap"
argument_list|)
DECL|method|onKeyMap (@uppressWarningsR) ChangeEvent e)
name|void
name|onKeyMap
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ChangeEvent
name|e
parameter_list|)
block|{
name|KeyMapType
name|keyMapType
init|=
name|KeyMapType
operator|.
name|valueOf
argument_list|(
name|keyMap
operator|.
name|getValue
argument_list|(
name|keyMap
operator|.
name|getSelectedIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|prefs
operator|.
name|keyMapType
argument_list|(
name|keyMapType
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|!=
literal|null
condition|)
block|{
name|view
operator|.
name|setOption
argument_list|(
literal|"keyMap"
argument_list|,
name|keyMapType
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"apply"
argument_list|)
DECL|method|onApply (@uppressWarningsR) ClickEvent e)
name|void
name|onApply
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"save"
argument_list|)
DECL|method|onSave (@uppressWarningsR) ClickEvent e)
name|void
name|onSave
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|AccountApi
operator|.
name|putEditPreferences
argument_list|(
name|prefs
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|EditPreferences
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EditPreferences
name|p
parameter_list|)
block|{
name|Gerrit
operator|.
name|setEditPreferences
argument_list|(
name|p
operator|.
name|copyTo
argument_list|(
operator|new
name|EditPreferencesInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"close"
argument_list|)
DECL|method|onClose (ClickEvent e)
name|void
name|onClose
parameter_list|(
name|ClickEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|close ()
specifier|private
name|void
name|close
parameter_list|()
block|{
operator|(
operator|(
name|PopupPanel
operator|)
name|getParent
argument_list|()
operator|)
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
DECL|method|setTheme (Theme v)
specifier|private
name|void
name|setTheme
parameter_list|(
name|Theme
name|v
parameter_list|)
block|{
name|String
name|name
init|=
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|name
argument_list|()
else|:
name|Theme
operator|.
name|DEFAULT
operator|.
name|name
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|theme
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|theme
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|theme
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|theme
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|initTheme ()
specifier|private
name|void
name|initTheme
parameter_list|()
block|{
for|for
control|(
name|Theme
name|t
range|:
name|Theme
operator|.
name|values
argument_list|()
control|)
block|{
name|theme
operator|.
name|addItem
argument_list|(
name|t
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|t
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setKeyMapType (KeyMapType v)
specifier|private
name|void
name|setKeyMapType
parameter_list|(
name|KeyMapType
name|v
parameter_list|)
block|{
name|String
name|name
init|=
name|v
operator|!=
literal|null
condition|?
name|v
operator|.
name|name
argument_list|()
else|:
name|KeyMapType
operator|.
name|DEFAULT
operator|.
name|name
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyMap
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|keyMap
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|keyMap
operator|.
name|setSelectedIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|keyMap
operator|.
name|setSelectedIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|initKeyMapType ()
specifier|private
name|void
name|initKeyMapType
parameter_list|()
block|{
for|for
control|(
name|KeyMapType
name|t
range|:
name|KeyMapType
operator|.
name|values
argument_list|()
control|)
block|{
name|keyMap
operator|.
name|addItem
argument_list|(
name|t
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|t
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

