begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.api
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|StyleInjector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_class
DECL|class|HtmlTemplate
specifier|final
class|class
name|HtmlTemplate
block|{
DECL|method|init ()
specifier|static
specifier|native
name|void
name|init
parameter_list|()
comment|/*-{     var ElementSet = function(r,e) {       this.root = r;       this.elements = e;     };     ElementSet.prototype = {       clear: function() {         this.root = null;         this.elements = null;       },     };      $wnd.Gerrit.css = @com.google.gerrit.client.api.HtmlTemplate::css(Ljava/lang/String;);     $wnd.Gerrit.html = function(h,r,w) {       var i = {};       if (r) {         h = h.replace(           /\sid=['"]\{([a-z_][a-z0-9_]*)\}['"]|\{([a-z0-9._-]+)\}/gi,           function(m,a,b) {             if (a)               return @com.google.gerrit.client.api.HtmlTemplate::id(                   Lcom/google/gerrit/client/api/HtmlTemplate$IdMap;                   Ljava/lang/String;)                 (i,a);             return @com.google.gerrit.client.api.HtmlTemplate::html(                 Lcom/google/gerrit/client/api/HtmlTemplate$ReplacementMap;                 Ljava/lang/String;)               (r,b);           });       }       var e = @com.google.gerrit.client.api.HtmlTemplate::parseHtml(           Ljava/lang/String;Lcom/google/gerrit/client/api/HtmlTemplate$IdMap;           Lcom/google/gerrit/client/api/HtmlTemplate$ReplacementMap;           Z)         (h,i,r,!!w);       return w ? new ElementSet(e,i) : e;     };   }-*/
function_decl|;
DECL|method|css (String css)
specifier|private
specifier|static
name|String
name|css
parameter_list|(
name|String
name|css
parameter_list|)
block|{
name|String
name|name
init|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
decl_stmt|;
name|StyleInjector
operator|.
name|inject
argument_list|(
literal|"."
operator|+
name|name
operator|+
literal|"{"
operator|+
name|css
operator|+
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
DECL|method|id (IdMap idMap, String key)
specifier|private
specifier|static
name|String
name|id
parameter_list|(
name|IdMap
name|idMap
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|String
name|id
init|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
decl_stmt|;
name|idMap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|key
argument_list|)
expr_stmt|;
return|return
literal|" id='"
operator|+
name|id
operator|+
literal|"'"
return|;
block|}
DECL|method|html (ReplacementMap opts, String id)
specifier|private
specifier|static
name|String
name|html
parameter_list|(
name|ReplacementMap
name|opts
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|int
name|d
init|=
name|id
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|d
condition|)
block|{
name|String
name|name
init|=
name|id
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|String
name|rest
init|=
name|id
operator|.
name|substring
argument_list|(
name|d
operator|+
literal|1
argument_list|)
decl_stmt|;
return|return
name|html
argument_list|(
name|opts
operator|.
name|map
argument_list|(
name|name
argument_list|)
argument_list|,
name|rest
argument_list|)
return|;
block|}
return|return
operator|new
name|SafeHtmlBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|opts
operator|.
name|str
argument_list|(
name|id
argument_list|)
argument_list|)
operator|.
name|asString
argument_list|()
return|;
block|}
DECL|method|parseHtml (String html, IdMap ids, ReplacementMap opts, boolean wantElements)
specifier|private
specifier|static
name|Node
name|parseHtml
parameter_list|(
name|String
name|html
parameter_list|,
name|IdMap
name|ids
parameter_list|,
name|ReplacementMap
name|opts
parameter_list|,
name|boolean
name|wantElements
parameter_list|)
block|{
name|Element
name|div
init|=
name|Document
operator|.
name|get
argument_list|()
operator|.
name|createDivElement
argument_list|()
decl_stmt|;
name|div
operator|.
name|setInnerHTML
argument_list|(
name|html
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|attachHandlers
argument_list|(
name|div
argument_list|,
name|ids
argument_list|,
name|opts
argument_list|,
name|wantElements
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|div
operator|.
name|getChildCount
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|div
operator|.
name|getFirstChild
argument_list|()
return|;
block|}
return|return
name|div
return|;
block|}
DECL|method|attachHandlers ( Element e, IdMap ids, ReplacementMap opts, boolean wantElements)
specifier|private
specifier|static
name|void
name|attachHandlers
parameter_list|(
name|Element
name|e
parameter_list|,
name|IdMap
name|ids
parameter_list|,
name|ReplacementMap
name|opts
parameter_list|,
name|boolean
name|wantElements
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|key
init|=
name|ids
operator|.
name|get
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
block|{
name|ids
operator|.
name|remove
argument_list|(
name|e
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|wantElements
condition|)
block|{
name|ids
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|setId
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|opts
operator|.
name|map
argument_list|(
name|key
argument_list|)
operator|.
name|attachHandlers
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Element
name|c
init|=
name|e
operator|.
name|getFirstChildElement
argument_list|()
init|;
name|c
operator|!=
literal|null
condition|;
control|)
block|{
name|attachHandlers
argument_list|(
name|c
argument_list|,
name|ids
argument_list|,
name|opts
argument_list|,
name|wantElements
argument_list|)
expr_stmt|;
name|c
operator|=
name|c
operator|.
name|getNextSiblingElement
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ReplacementMap
specifier|private
specifier|static
class|class
name|ReplacementMap
extends|extends
name|JavaScriptObject
block|{
DECL|method|map (String n)
specifier|final
specifier|native
name|ReplacementMap
name|map
parameter_list|(
name|String
name|n
parameter_list|)
comment|/*-{ return this[n] }-*/
function_decl|;
DECL|method|str (String n)
specifier|final
specifier|native
name|String
name|str
parameter_list|(
name|String
name|n
parameter_list|)
comment|/*-{ return ''+this[n] }-*/
function_decl|;
DECL|method|attachHandlers (Element e)
specifier|final
specifier|native
name|void
name|attachHandlers
parameter_list|(
name|Element
name|e
parameter_list|)
comment|/*-{       for (var k in this) {         var f = this[k];         if (k.substring(0, 2) == 'on'&& typeof f == 'function')           e[k] = f;       }     }-*/
function_decl|;
DECL|method|ReplacementMap ()
specifier|protected
name|ReplacementMap
parameter_list|()
block|{}
block|}
DECL|class|IdMap
specifier|private
specifier|static
class|class
name|IdMap
extends|extends
name|JavaScriptObject
block|{
DECL|method|get (String i)
specifier|final
specifier|native
name|String
name|get
parameter_list|(
name|String
name|i
parameter_list|)
comment|/*-{ return this[i] }-*/
function_decl|;
DECL|method|remove (String i)
specifier|final
specifier|native
name|void
name|remove
parameter_list|(
name|String
name|i
parameter_list|)
comment|/*-{ delete this[i] }-*/
function_decl|;
DECL|method|put (String i, String k)
specifier|final
specifier|native
name|void
name|put
parameter_list|(
name|String
name|i
parameter_list|,
name|String
name|k
parameter_list|)
comment|/*-{ this[i] = k }-*/
function_decl|;
DECL|method|put (String k, Element e)
specifier|final
specifier|native
name|void
name|put
parameter_list|(
name|String
name|k
parameter_list|,
name|Element
name|e
parameter_list|)
comment|/*-{ this[k] = e }-*/
function_decl|;
DECL|method|isEmpty ()
specifier|final
specifier|native
name|boolean
name|isEmpty
parameter_list|()
comment|/*-{       for (var i in this)         return false;       return true;     }-*/
function_decl|;
DECL|method|IdMap ()
specifier|protected
name|IdMap
parameter_list|()
block|{}
block|}
DECL|method|HtmlTemplate ()
specifier|private
name|HtmlTemplate
parameter_list|()
block|{}
block|}
end_class

end_unit

