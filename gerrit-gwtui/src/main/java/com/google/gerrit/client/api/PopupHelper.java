begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.api
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|actions
operator|.
name|ActionButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_class
DECL|class|PopupHelper
class|class
name|PopupHelper
block|{
DECL|method|popup (ActionContext ctx, Element panel)
specifier|static
name|PopupHelper
name|popup
parameter_list|(
name|ActionContext
name|ctx
parameter_list|,
name|Element
name|panel
parameter_list|)
block|{
name|PopupHelper
name|helper
init|=
operator|new
name|PopupHelper
argument_list|(
name|ctx
operator|.
name|button
argument_list|()
argument_list|,
name|panel
argument_list|)
decl_stmt|;
name|helper
operator|.
name|show
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|button
argument_list|()
operator|.
name|link
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|helper
return|;
block|}
DECL|field|activatingButton
specifier|private
specifier|final
name|ActionButton
name|activatingButton
decl_stmt|;
DECL|field|panel
specifier|private
specifier|final
name|FlowPanel
name|panel
decl_stmt|;
DECL|field|popup
specifier|private
name|PopupPanel
name|popup
decl_stmt|;
DECL|method|PopupHelper (ActionButton button, Element child)
name|PopupHelper
parameter_list|(
name|ActionButton
name|button
parameter_list|,
name|Element
name|child
parameter_list|)
block|{
name|activatingButton
operator|=
name|button
expr_stmt|;
name|panel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|panel
operator|.
name|setStyleName
argument_list|(
name|Resources
operator|.
name|I
operator|.
name|style
argument_list|()
operator|.
name|popupContent
argument_list|()
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
DECL|method|show ()
name|void
name|show
parameter_list|()
block|{
specifier|final
name|PopupPanel
name|p
init|=
operator|new
name|PopupPanel
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|p
operator|.
name|setStyleName
argument_list|(
name|Resources
operator|.
name|I
operator|.
name|style
argument_list|()
operator|.
name|popup
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addAutoHidePartner
argument_list|(
name|activatingButton
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|addCloseHandler
argument_list|(
operator|new
name|CloseHandler
argument_list|<
name|PopupPanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|PopupPanel
argument_list|>
name|event
parameter_list|)
block|{
name|activatingButton
operator|.
name|unlink
argument_list|()
expr_stmt|;
if|if
condition|(
name|popup
operator|==
name|p
condition|)
block|{
name|popup
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|panel
argument_list|)
expr_stmt|;
name|p
operator|.
name|showRelativeTo
argument_list|(
name|activatingButton
argument_list|)
expr_stmt|;
name|GlobalKey
operator|.
name|dialog
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|popup
operator|=
name|p
expr_stmt|;
block|}
DECL|method|hide ()
name|void
name|hide
parameter_list|()
block|{
if|if
condition|(
name|popup
operator|!=
literal|null
condition|)
block|{
name|activatingButton
operator|.
name|unlink
argument_list|()
expr_stmt|;
name|popup
operator|.
name|hide
argument_list|()
expr_stmt|;
name|popup
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

