begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
operator|.
name|formatAbsBytes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
operator|.
name|formatBytes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeEditApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ReviewInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|InputElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NativeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|ClientBundle
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|CssResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ImageResourceRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|impl
operator|.
name|HyperlinkImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|progress
operator|.
name|client
operator|.
name|ProgressBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_class
DECL|class|FileTable
specifier|public
class|class
name|FileTable
extends|extends
name|FlowPanel
block|{
DECL|field|R
specifier|static
specifier|final
name|FileTableResources
name|R
init|=
name|GWT
operator|.
name|create
argument_list|(
name|FileTableResources
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|FileTableResources
interface|interface
name|FileTableResources
extends|extends
name|ClientBundle
block|{
annotation|@
name|Source
argument_list|(
literal|"file_table.css"
argument_list|)
DECL|method|css ()
name|FileTableCss
name|css
parameter_list|()
function_decl|;
block|}
DECL|interface|FileTableCss
interface|interface
name|FileTableCss
extends|extends
name|CssResource
block|{
DECL|method|table ()
name|String
name|table
parameter_list|()
function_decl|;
DECL|method|nohover ()
name|String
name|nohover
parameter_list|()
function_decl|;
DECL|method|pointer ()
name|String
name|pointer
parameter_list|()
function_decl|;
DECL|method|reviewed ()
name|String
name|reviewed
parameter_list|()
function_decl|;
DECL|method|status ()
name|String
name|status
parameter_list|()
function_decl|;
DECL|method|pathColumn ()
name|String
name|pathColumn
parameter_list|()
function_decl|;
DECL|method|commonPrefix ()
name|String
name|commonPrefix
parameter_list|()
function_decl|;
DECL|method|renameCopySource ()
name|String
name|renameCopySource
parameter_list|()
function_decl|;
DECL|method|draftColumn ()
name|String
name|draftColumn
parameter_list|()
function_decl|;
DECL|method|newColumn ()
name|String
name|newColumn
parameter_list|()
function_decl|;
DECL|method|commentColumn ()
name|String
name|commentColumn
parameter_list|()
function_decl|;
DECL|method|deltaColumn1 ()
name|String
name|deltaColumn1
parameter_list|()
function_decl|;
DECL|method|deltaColumn2 ()
name|String
name|deltaColumn2
parameter_list|()
function_decl|;
DECL|method|inserted ()
name|String
name|inserted
parameter_list|()
function_decl|;
DECL|method|deleted ()
name|String
name|deleted
parameter_list|()
function_decl|;
DECL|method|restoreDelete ()
name|String
name|restoreDelete
parameter_list|()
function_decl|;
block|}
DECL|enum|Mode
specifier|public
specifier|static
enum|enum
name|Mode
block|{
DECL|enumConstant|REVIEW
name|REVIEW
block|,
DECL|enumConstant|EDIT
name|EDIT
block|}
DECL|field|DELETE
specifier|private
specifier|static
specifier|final
name|String
name|DELETE
decl_stmt|;
DECL|field|RESTORE
specifier|private
specifier|static
specifier|final
name|String
name|RESTORE
decl_stmt|;
DECL|field|REVIEWED
specifier|private
specifier|static
specifier|final
name|String
name|REVIEWED
decl_stmt|;
DECL|field|OPEN
specifier|private
specifier|static
specifier|final
name|String
name|OPEN
decl_stmt|;
DECL|field|C_PATH
specifier|private
specifier|static
specifier|final
name|int
name|C_PATH
init|=
literal|3
decl_stmt|;
DECL|field|link
specifier|private
specifier|static
specifier|final
name|HyperlinkImpl
name|link
init|=
name|GWT
operator|.
name|create
argument_list|(
name|HyperlinkImpl
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
name|DELETE
operator|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|RESTORE
operator|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|REVIEWED
operator|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|OPEN
operator|=
name|DOM
operator|.
name|createUniqueId
argument_list|()
operator|.
name|replace
argument_list|(
literal|'-'
argument_list|,
literal|'_'
argument_list|)
expr_stmt|;
name|init
argument_list|(
name|DELETE
argument_list|,
name|RESTORE
argument_list|,
name|REVIEWED
argument_list|,
name|OPEN
argument_list|)
expr_stmt|;
block|}
DECL|method|init (String d, String t, String r, String o)
specifier|private
specifier|static
specifier|final
specifier|native
name|void
name|init
parameter_list|(
name|String
name|d
parameter_list|,
name|String
name|t
parameter_list|,
name|String
name|r
parameter_list|,
name|String
name|o
parameter_list|)
comment|/*-{     $wnd[d] = $entry(function(e,i) {       @com.google.gerrit.client.change.FileTable::onDelete(Lcom/google/gwt/dom/client/NativeEvent;I)(e,i)     });     $wnd[t] = $entry(function(e,i) {       @com.google.gerrit.client.change.FileTable::onRestore(Lcom/google/gwt/dom/client/NativeEvent;I)(e,i)     });     $wnd[r] = $entry(function(e,i) {       @com.google.gerrit.client.change.FileTable::onReviewed(Lcom/google/gwt/dom/client/NativeEvent;I)(e,i)     });     $wnd[o] = $entry(function(e,i) {       return @com.google.gerrit.client.change.FileTable::onOpen(Lcom/google/gwt/dom/client/NativeEvent;I)(e,i);     });   }-*/
function_decl|;
DECL|method|onDelete (NativeEvent e, int idx)
specifier|private
specifier|static
name|void
name|onDelete
parameter_list|(
name|NativeEvent
name|e
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|MyTable
name|t
init|=
name|getMyTable
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|onDelete
argument_list|(
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onRestore (NativeEvent e, int idx)
specifier|private
specifier|static
name|boolean
name|onRestore
parameter_list|(
name|NativeEvent
name|e
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|MyTable
name|t
init|=
name|getMyTable
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|onRestore
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|e
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|e
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|onReviewed (NativeEvent e, int idx)
specifier|private
specifier|static
name|void
name|onReviewed
parameter_list|(
name|NativeEvent
name|e
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|MyTable
name|t
init|=
name|getMyTable
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|onReviewed
argument_list|(
name|InputElement
operator|.
name|as
argument_list|(
name|Element
operator|.
name|as
argument_list|(
name|e
operator|.
name|getEventTarget
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onOpen (NativeEvent e, int idx)
specifier|private
specifier|static
name|boolean
name|onOpen
parameter_list|(
name|NativeEvent
name|e
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
if|if
condition|(
name|link
operator|.
name|handleAsClick
argument_list|(
name|e
operator|.
expr|<
name|Event
operator|>
name|cast
argument_list|()
argument_list|)
condition|)
block|{
name|MyTable
name|t
init|=
name|getMyTable
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|t
operator|.
name|onOpenRow
argument_list|(
literal|1
operator|+
name|idx
argument_list|)
expr_stmt|;
name|e
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
name|e
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|getMyTable (NativeEvent event)
specifier|private
specifier|static
name|MyTable
name|getMyTable
parameter_list|(
name|NativeEvent
name|event
parameter_list|)
block|{
name|Element
name|e
init|=
name|event
operator|.
name|getEventTarget
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|e
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|e
argument_list|)
init|;
name|e
operator|!=
literal|null
condition|;
name|e
operator|=
name|DOM
operator|.
name|getParent
argument_list|(
name|e
argument_list|)
control|)
block|{
name|EventListener
name|l
init|=
name|DOM
operator|.
name|getEventListener
argument_list|(
name|e
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|instanceof
name|MyTable
condition|)
block|{
return|return
operator|(
name|MyTable
operator|)
name|l
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|field|base
specifier|private
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|curr
specifier|private
name|PatchSet
operator|.
name|Id
name|curr
decl_stmt|;
DECL|field|table
specifier|private
name|MyTable
name|table
decl_stmt|;
DECL|field|register
specifier|private
name|boolean
name|register
decl_stmt|;
DECL|field|reviewed
specifier|private
name|JsArrayString
name|reviewed
decl_stmt|;
DECL|field|scrollToPath
specifier|private
name|String
name|scrollToPath
decl_stmt|;
DECL|field|style
specifier|private
name|ChangeScreen
operator|.
name|Style
name|style
decl_stmt|;
DECL|field|replyButton
specifier|private
name|Widget
name|replyButton
decl_stmt|;
DECL|field|editExists
specifier|private
name|boolean
name|editExists
decl_stmt|;
DECL|field|mode
specifier|private
name|Mode
name|mode
decl_stmt|;
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|R
operator|.
name|css
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
block|}
DECL|method|set (PatchSet.Id base, PatchSet.Id curr, ChangeScreen.Style style, Widget replyButton, Mode mode, boolean editExists)
specifier|public
name|void
name|set
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|curr
parameter_list|,
name|ChangeScreen
operator|.
name|Style
name|style
parameter_list|,
name|Widget
name|replyButton
parameter_list|,
name|Mode
name|mode
parameter_list|,
name|boolean
name|editExists
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|curr
operator|=
name|curr
expr_stmt|;
name|this
operator|.
name|style
operator|=
name|style
expr_stmt|;
name|this
operator|.
name|replyButton
operator|=
name|replyButton
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
name|this
operator|.
name|editExists
operator|=
name|editExists
expr_stmt|;
block|}
DECL|method|setValue (NativeMap<FileInfo> fileMap, Timestamp myLastReply, @Nullable NativeMap<JsArray<CommentInfo>> comments, @Nullable NativeMap<JsArray<CommentInfo>> drafts)
name|void
name|setValue
parameter_list|(
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|fileMap
parameter_list|,
name|Timestamp
name|myLastReply
parameter_list|,
annotation|@
name|Nullable
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
parameter_list|,
annotation|@
name|Nullable
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|drafts
parameter_list|)
block|{
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|list
init|=
name|fileMap
operator|.
name|values
argument_list|()
decl_stmt|;
name|FileInfo
operator|.
name|sortFileInfoByPath
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|DisplayCommand
name|cmd
init|=
operator|new
name|DisplayCommand
argument_list|(
name|fileMap
argument_list|,
name|list
argument_list|,
name|myLastReply
argument_list|,
name|comments
argument_list|,
name|drafts
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|execute
argument_list|()
condition|)
block|{
name|cmd
operator|.
name|showProgressBar
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleIncremental
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|markReviewed (JsArrayString reviewed)
name|void
name|markReviewed
parameter_list|(
name|JsArrayString
name|reviewed
parameter_list|)
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|markReviewed
argument_list|(
name|reviewed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|reviewed
operator|=
name|reviewed
expr_stmt|;
block|}
block|}
DECL|method|unregisterKeys ()
name|void
name|unregisterKeys
parameter_list|()
block|{
name|register
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|setRegisterKeys
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerKeys ()
name|void
name|registerKeys
parameter_list|()
block|{
name|register
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|setRegisterKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|scrollToPath (String path)
name|void
name|scrollToPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|scrollToPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scrollToPath
operator|=
name|path
expr_stmt|;
block|}
block|}
DECL|method|openAll ()
name|void
name|openAll
parameter_list|()
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|String
name|self
init|=
name|Gerrit
operator|.
name|selfRedirect
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|FileInfo
name|info
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|table
operator|.
name|list
argument_list|)
control|)
block|{
name|Window
operator|.
name|open
argument_list|(
name|self
operator|+
literal|"#"
operator|+
name|url
argument_list|(
name|info
argument_list|)
argument_list|,
literal|"_blank"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setTable (MyTable table)
specifier|private
name|void
name|setTable
parameter_list|(
name|MyTable
name|table
parameter_list|)
block|{
name|clear
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|this
operator|.
name|table
operator|=
name|table
expr_stmt|;
if|if
condition|(
name|register
condition|)
block|{
name|table
operator|.
name|setRegisterKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reviewed
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|markReviewed
argument_list|(
name|reviewed
argument_list|)
expr_stmt|;
name|reviewed
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|scrollToPath
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|scrollToPath
argument_list|(
name|scrollToPath
argument_list|)
expr_stmt|;
name|scrollToPath
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|url (FileInfo info)
specifier|private
name|String
name|url
parameter_list|(
name|FileInfo
name|info
parameter_list|)
block|{
return|return
name|info
operator|.
name|binary
argument_list|()
condition|?
name|Dispatcher
operator|.
name|toUnified
argument_list|(
name|base
argument_list|,
name|curr
argument_list|,
name|info
operator|.
name|path
argument_list|()
argument_list|)
else|:
name|mode
operator|==
name|Mode
operator|.
name|REVIEW
condition|?
name|Dispatcher
operator|.
name|toSideBySide
argument_list|(
name|base
argument_list|,
name|curr
argument_list|,
name|info
operator|.
name|path
argument_list|()
argument_list|)
else|:
name|Dispatcher
operator|.
name|toEditScreen
argument_list|(
name|curr
argument_list|,
name|info
operator|.
name|path
argument_list|()
argument_list|)
return|;
block|}
DECL|class|MyTable
specifier|private
specifier|final
class|class
name|MyTable
extends|extends
name|NavigationTable
argument_list|<
name|FileInfo
argument_list|>
block|{
DECL|field|map
specifier|private
specifier|final
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|map
decl_stmt|;
DECL|field|list
specifier|private
specifier|final
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|list
decl_stmt|;
DECL|method|MyTable (NativeMap<FileInfo> map, JsArray<FileInfo> list)
name|MyTable
parameter_list|(
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|map
parameter_list|,
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|list
parameter_list|)
block|{
name|this
operator|.
name|map
operator|=
name|map
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|table
operator|.
name|setWidth
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTablePrev
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NextKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'o'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableOpenDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ENTER
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableOpenDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenFileCommand
argument_list|(
name|list
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|'['
argument_list|,
name|Resources
operator|.
name|C
operator|.
name|openLastFile
argument_list|()
argument_list|)
argument_list|,
operator|new
name|OpenFileCommand
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|']'
argument_list|,
name|Resources
operator|.
name|C
operator|.
name|openCommitMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleReviewed
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|int
name|row
init|=
name|getCurrentRow
argument_list|()
decl_stmt|;
if|if
condition|(
literal|1
operator|<=
name|row
operator|&&
name|row
operator|<=
name|MyTable
operator|.
name|this
operator|.
name|list
operator|.
name|length
argument_list|()
condition|)
block|{
name|FileInfo
name|info
init|=
name|MyTable
operator|.
name|this
operator|.
name|list
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
name|InputElement
name|b
init|=
name|getReviewed
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|boolean
name|c
init|=
operator|!
name|b
operator|.
name|isChecked
argument_list|()
decl_stmt|;
name|setReviewed
argument_list|(
name|info
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|b
operator|.
name|setChecked
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|setSavePointerId
argument_list|(
operator|(
name|base
operator|!=
literal|null
condition|?
name|base
operator|.
name|toString
argument_list|()
operator|+
literal|".."
else|:
literal|""
operator|)
operator|+
name|curr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|onDelete (int idx)
name|void
name|onDelete
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|String
name|path
init|=
name|list
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|path
argument_list|()
decl_stmt|;
name|ChangeEditApi
operator|.
name|delete
argument_list|(
name|curr
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|path
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChangeInEditMode
argument_list|(
name|curr
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onRestore (int idx)
name|void
name|onRestore
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|String
name|path
init|=
name|list
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|path
argument_list|()
decl_stmt|;
name|ChangeEditApi
operator|.
name|restore
argument_list|(
name|curr
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|path
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChangeInEditMode
argument_list|(
name|curr
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{             }
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onReviewed (InputElement checkbox, int idx)
name|void
name|onReviewed
parameter_list|(
name|InputElement
name|checkbox
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|setReviewed
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|,
name|checkbox
operator|.
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setReviewed (FileInfo info, boolean r)
specifier|private
name|void
name|setReviewed
parameter_list|(
name|FileInfo
name|info
parameter_list|,
name|boolean
name|r
parameter_list|)
block|{
name|RestApi
name|api
init|=
name|ChangeApi
operator|.
name|revision
argument_list|(
name|curr
argument_list|)
operator|.
name|view
argument_list|(
literal|"files"
argument_list|)
operator|.
name|id
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"reviewed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
condition|)
block|{
name|api
operator|.
name|put
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|ReviewInfo
operator|>
name|emptyCallback
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|api
operator|.
name|delete
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|ReviewInfo
operator|>
name|emptyCallback
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|markReviewed (JsArrayString reviewed)
name|void
name|markReviewed
parameter_list|(
name|JsArrayString
name|reviewed
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reviewed
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileInfo
name|info
init|=
name|map
operator|.
name|get
argument_list|(
name|reviewed
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|getReviewed
argument_list|(
name|info
argument_list|)
operator|.
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getReviewed (FileInfo info)
specifier|private
name|InputElement
name|getReviewed
parameter_list|(
name|FileInfo
name|info
parameter_list|)
block|{
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|Element
name|e
init|=
name|fmt
operator|.
name|getElement
argument_list|(
literal|1
operator|+
name|info
operator|.
name|_row
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|InputElement
operator|.
name|as
argument_list|(
name|e
operator|.
name|getFirstChildElement
argument_list|()
argument_list|)
return|;
block|}
DECL|method|scrollToPath (String path)
name|void
name|scrollToPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|FileInfo
name|info
init|=
name|map
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
literal|1
operator|+
name|info
operator|.
name|_row
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (FileInfo item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
name|FileInfo
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|path
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|findRow (Object id)
specifier|protected
name|int
name|findRow
parameter_list|(
name|Object
name|id
parameter_list|)
block|{
name|FileInfo
name|info
init|=
name|map
operator|.
name|get
argument_list|(
operator|(
name|String
operator|)
name|id
argument_list|)
decl_stmt|;
return|return
name|info
operator|!=
literal|null
condition|?
literal|1
operator|+
name|info
operator|.
name|_row
argument_list|()
else|:
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|getRowItem (int row)
specifier|protected
name|FileInfo
name|getRowItem
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
literal|1
operator|<=
name|row
operator|&&
name|row
operator|<=
name|list
operator|.
name|length
argument_list|()
condition|)
block|{
return|return
name|list
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
literal|1
operator|<=
name|row
operator|&&
name|row
operator|<=
name|list
operator|.
name|length
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|url
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onCellSingleClick (Event event, int row, int column)
specifier|protected
name|void
name|onCellSingleClick
parameter_list|(
name|Event
name|event
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|column
operator|==
name|C_PATH
operator|&&
name|link
operator|.
name|handleAsClick
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|onOpenRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onCellSingleClick
argument_list|(
name|event
argument_list|,
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|OpenFileCommand
specifier|private
class|class
name|OpenFileCommand
extends|extends
name|KeyCommand
block|{
DECL|field|index
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
DECL|method|OpenFileCommand (int index, int modifiers, char c, String helpText)
name|OpenFileCommand
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|modifiers
parameter_list|,
name|char
name|c
parameter_list|,
name|String
name|helpText
parameter_list|)
block|{
name|super
argument_list|(
name|modifiers
argument_list|,
name|c
argument_list|,
name|helpText
argument_list|)
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|url
argument_list|(
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|class|DisplayCommand
specifier|private
specifier|final
class|class
name|DisplayCommand
implements|implements
name|RepeatingCommand
block|{
DECL|field|sb
specifier|private
specifier|final
name|SafeHtmlBuilder
name|sb
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
DECL|field|myTable
specifier|private
specifier|final
name|MyTable
name|myTable
decl_stmt|;
DECL|field|list
specifier|private
specifier|final
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|list
decl_stmt|;
DECL|field|myLastReply
specifier|private
specifier|final
name|Timestamp
name|myLastReply
decl_stmt|;
DECL|field|comments
specifier|private
specifier|final
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
decl_stmt|;
DECL|field|drafts
specifier|private
specifier|final
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|drafts
decl_stmt|;
DECL|field|hasUser
specifier|private
specifier|final
name|boolean
name|hasUser
decl_stmt|;
DECL|field|showChangeSizeBars
specifier|private
specifier|final
name|boolean
name|showChangeSizeBars
decl_stmt|;
DECL|field|attached
specifier|private
name|boolean
name|attached
decl_stmt|;
DECL|field|row
specifier|private
name|int
name|row
decl_stmt|;
DECL|field|start
specifier|private
name|double
name|start
decl_stmt|;
DECL|field|meter
specifier|private
name|ProgressBar
name|meter
decl_stmt|;
DECL|field|lastPath
specifier|private
name|String
name|lastPath
init|=
literal|""
decl_stmt|;
DECL|field|hasBinaryFile
specifier|private
name|boolean
name|hasBinaryFile
decl_stmt|;
DECL|field|hasNonBinaryFile
specifier|private
name|boolean
name|hasNonBinaryFile
decl_stmt|;
DECL|field|inserted
specifier|private
name|int
name|inserted
decl_stmt|;
DECL|field|deleted
specifier|private
name|int
name|deleted
decl_stmt|;
DECL|field|bytesInserted
specifier|private
name|long
name|bytesInserted
decl_stmt|;
DECL|field|bytesDeleted
specifier|private
name|long
name|bytesDeleted
decl_stmt|;
DECL|method|DisplayCommand (NativeMap<FileInfo> map, JsArray<FileInfo> list, Timestamp myLastReply, @Nullable NativeMap<JsArray<CommentInfo>> comments, @Nullable NativeMap<JsArray<CommentInfo>> drafts)
specifier|private
name|DisplayCommand
parameter_list|(
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|map
parameter_list|,
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|list
parameter_list|,
name|Timestamp
name|myLastReply
parameter_list|,
annotation|@
name|Nullable
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|comments
parameter_list|,
annotation|@
name|Nullable
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|drafts
parameter_list|)
block|{
name|this
operator|.
name|myTable
operator|=
operator|new
name|MyTable
argument_list|(
name|map
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|myLastReply
operator|=
name|myLastReply
expr_stmt|;
name|this
operator|.
name|comments
operator|=
name|comments
expr_stmt|;
name|this
operator|.
name|drafts
operator|=
name|drafts
expr_stmt|;
name|this
operator|.
name|hasUser
operator|=
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
expr_stmt|;
name|this
operator|.
name|showChangeSizeBars
operator|=
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|sizeBarInChangeTable
argument_list|()
expr_stmt|;
name|myTable
operator|.
name|addStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|table
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|execute ()
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
name|boolean
name|attachedNow
init|=
name|isAttached
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attached
operator|&&
name|attachedNow
condition|)
block|{
comment|// Remember that we have been attached at least once. If
comment|// later we find we aren't attached we should stop running.
name|attached
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attached
operator|&&
operator|!
name|attachedNow
condition|)
block|{
comment|// If the user navigated away, we aren't in the DOM anymore.
comment|// Don't continue to render.
return|return
literal|false
return|;
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
if|if
condition|(
name|row
operator|==
literal|0
condition|)
block|{
name|header
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|computeInsertedDeleted
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|row
operator|<
name|list
operator|.
name|length
argument_list|()
condition|)
block|{
name|FileInfo
name|info
init|=
name|list
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|info
operator|.
name|_row
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|++
name|row
operator|%
literal|10
operator|)
operator|==
literal|0
operator|&&
name|longRunning
argument_list|()
condition|)
block|{
name|updateMeter
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|footer
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|myTable
operator|.
name|resetHtml
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|myTable
operator|.
name|finishDisplay
argument_list|()
expr_stmt|;
name|setTable
argument_list|(
name|myTable
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|method|computeInsertedDeleted ()
specifier|private
name|void
name|computeInsertedDeleted
parameter_list|()
block|{
name|inserted
operator|=
literal|0
expr_stmt|;
name|deleted
operator|=
literal|0
expr_stmt|;
name|bytesInserted
operator|=
literal|0
expr_stmt|;
name|bytesDeleted
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|FileInfo
name|info
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|info
operator|.
name|binary
argument_list|()
condition|)
block|{
name|hasNonBinaryFile
operator|=
literal|true
expr_stmt|;
name|inserted
operator|+=
name|info
operator|.
name|linesInserted
argument_list|()
expr_stmt|;
name|deleted
operator|+=
name|info
operator|.
name|linesDeleted
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|hasBinaryFile
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|sizeDelta
argument_list|()
operator|>=
literal|0
condition|)
block|{
name|bytesInserted
operator|+=
name|info
operator|.
name|sizeDelta
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|bytesDeleted
operator|+=
name|info
operator|.
name|sizeDelta
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|method|showProgressBar ()
name|void
name|showProgressBar
parameter_list|()
block|{
if|if
condition|(
name|meter
operator|==
literal|null
condition|)
block|{
name|meter
operator|=
operator|new
name|ProgressBar
argument_list|(
name|Util
operator|.
name|M
operator|.
name|loadingPatchSet
argument_list|(
name|curr
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FileTable
operator|.
name|this
operator|.
name|clear
argument_list|()
expr_stmt|;
name|FileTable
operator|.
name|this
operator|.
name|add
argument_list|(
name|meter
argument_list|)
expr_stmt|;
block|}
name|updateMeter
argument_list|()
expr_stmt|;
block|}
DECL|method|updateMeter ()
name|void
name|updateMeter
parameter_list|()
block|{
if|if
condition|(
name|meter
operator|!=
literal|null
condition|)
block|{
name|int
name|n
init|=
name|list
operator|.
name|length
argument_list|()
decl_stmt|;
name|meter
operator|.
name|setValue
argument_list|(
operator|(
literal|100
operator|*
name|row
operator|)
operator|/
name|n
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|longRunning ()
specifier|private
name|boolean
name|longRunning
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|200
return|;
block|}
DECL|method|header (SafeHtmlBuilder sb)
specifier|private
name|void
name|header
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|openTr
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|nohover
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|pointer
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|REVIEW
condition|)
block|{
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|reviewed
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|restoreDelete
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|status
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnName
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|3
argument_list|)
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnComments
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|2
argument_list|)
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnSize
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|render (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|render
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|pointer
argument_list|()
argument_list|)
operator|.
name|closeTd
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|REVIEW
condition|)
block|{
name|columnReviewed
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|columnDeleteRestore
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
name|columnStatus
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|columnPath
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|columnComments
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|columnDelta1
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|columnDelta2
argument_list|(
name|sb
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|sb
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|columnReviewed (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnReviewed
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|reviewed
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasUser
condition|)
block|{
name|sb
operator|.
name|openElement
argument_list|(
literal|"input"
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"title"
argument_list|,
name|Resources
operator|.
name|C
operator|.
name|reviewedFileTitle
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"type"
argument_list|,
literal|"checkbox"
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"onclick"
argument_list|,
name|REVIEWED
operator|+
literal|"(event,"
operator|+
name|info
operator|.
name|_row
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|closeSelf
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|columnDeleteRestore (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnDeleteRestore
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|restoreDelete
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasUser
condition|)
block|{
if|if
condition|(
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|editable
init|=
name|isEditable
argument_list|(
name|info
argument_list|)
decl_stmt|;
name|sb
operator|.
name|openDiv
argument_list|()
operator|.
name|openElement
argument_list|(
literal|"button"
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"title"
argument_list|,
name|Resources
operator|.
name|C
operator|.
name|restoreFileInline
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"onclick"
argument_list|,
name|RESTORE
operator|+
literal|"(event,"
operator|+
name|info
operator|.
name|_row
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ImageResourceRenderer
argument_list|()
operator|.
name|render
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|editUndo
argument_list|()
argument_list|)
argument_list|)
operator|.
name|closeElement
argument_list|(
literal|"button"
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
block|{
name|sb
operator|.
name|openElement
argument_list|(
literal|"button"
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"title"
argument_list|,
name|Resources
operator|.
name|C
operator|.
name|removeFileInline
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"onclick"
argument_list|,
name|DELETE
operator|+
literal|"(event,"
operator|+
name|info
operator|.
name|_row
argument_list|()
operator|+
literal|")"
argument_list|)
operator|.
name|append
argument_list|(
operator|new
name|ImageResourceRenderer
argument_list|()
operator|.
name|render
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|redNot
argument_list|()
argument_list|)
argument_list|)
operator|.
name|closeElement
argument_list|(
literal|"button"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeDiv
argument_list|()
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|isEditable (FileInfo info)
specifier|private
name|boolean
name|isEditable
parameter_list|(
name|FileInfo
name|info
parameter_list|)
block|{
name|String
name|status
init|=
name|info
operator|.
name|status
argument_list|()
decl_stmt|;
return|return
name|status
operator|==
literal|null
operator|||
operator|!
name|ChangeType
operator|.
name|DELETED
operator|.
name|matches
argument_list|(
name|status
argument_list|)
return|;
block|}
DECL|method|columnStatus (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnStatus
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
operator|&&
name|info
operator|.
name|status
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|ChangeType
operator|.
name|MODIFIED
operator|.
name|matches
argument_list|(
name|info
operator|.
name|status
argument_list|()
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|status
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|columnPath (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnPath
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|pathColumn
argument_list|()
argument_list|)
operator|.
name|openAnchor
argument_list|()
expr_stmt|;
name|String
name|path
init|=
name|info
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|EDIT
operator|&&
operator|!
name|isEditable
argument_list|(
name|info
argument_list|)
condition|)
block|{
name|sb
operator|.
name|setAttribute
argument_list|(
literal|"onclick"
argument_list|,
name|RESTORE
operator|+
literal|"(event,"
operator|+
name|info
operator|.
name|_row
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|setAttribute
argument_list|(
literal|"href"
argument_list|,
literal|"#"
operator|+
name|url
argument_list|(
name|info
argument_list|)
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"onclick"
argument_list|,
name|OPEN
operator|+
literal|"(event,"
operator|+
name|info
operator|.
name|_row
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|commitMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|muteCommonPathPrefixes
argument_list|()
condition|)
block|{
name|int
name|commonPrefixLen
init|=
name|commonPrefix
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonPrefixLen
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|openSpan
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|commonPrefix
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|commonPrefixLen
argument_list|)
argument_list|)
operator|.
name|closeSpan
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|commonPrefixLen
argument_list|)
argument_list|)
expr_stmt|;
name|lastPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeAnchor
argument_list|()
expr_stmt|;
if|if
condition|(
name|info
operator|.
name|oldPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|br
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openSpan
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|renameCopySource
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|oldPath
argument_list|()
argument_list|)
operator|.
name|closeSpan
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|commonPrefix (String path)
specifier|private
name|int
name|commonPrefix
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|int
name|n
init|=
name|path
operator|.
name|length
argument_list|()
init|;
name|n
operator|>
literal|0
condition|;
control|)
block|{
name|int
name|s
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|,
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|<
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|String
name|p
init|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPath
operator|.
name|startsWith
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
name|s
operator|+
literal|1
return|;
block|}
name|n
operator|=
name|s
operator|-
literal|1
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|columnComments (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnComments
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|cList
init|=
name|get
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|,
name|comments
argument_list|)
decl_stmt|;
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|dList
init|=
name|get
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|,
name|drafts
argument_list|)
decl_stmt|;
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|draftColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dList
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"drafts: "
argument_list|)
operator|.
name|append
argument_list|(
name|dList
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|int
name|cntAll
init|=
name|cList
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|cntNew
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|myLastReply
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|cntAll
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|CommentInfo
name|m
init|=
name|cList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|updated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|myLastReply
argument_list|)
operator|>
literal|0
condition|)
block|{
name|cntNew
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|newColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cntNew
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"new: "
argument_list|)
operator|.
name|append
argument_list|(
name|cntNew
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|commentColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cntAll
operator|-
name|cntNew
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"comments: "
argument_list|)
operator|.
name|append
argument_list|(
name|cntAll
operator|-
name|cntNew
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|get (String p, NativeMap<JsArray<CommentInfo>> m)
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|get
parameter_list|(
name|String
name|p
parameter_list|,
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|r
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|r
operator|=
name|m
operator|.
name|get
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
DECL|method|columnDelta1 (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnDelta1
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deltaColumn1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
operator|&&
operator|!
name|info
operator|.
name|binary
argument_list|()
condition|)
block|{
if|if
condition|(
name|showChangeSizeBars
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|linesInserted
argument_list|()
operator|+
name|info
operator|.
name|linesDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|ChangeType
operator|.
name|DELETED
operator|.
name|matches
argument_list|(
name|info
operator|.
name|status
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|ChangeType
operator|.
name|ADDED
operator|.
name|matches
argument_list|(
name|info
operator|.
name|status
argument_list|()
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|info
operator|.
name|linesInserted
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" lines"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"+"
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|linesInserted
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|", -"
argument_list|)
operator|.
name|append
argument_list|(
name|info
operator|.
name|linesDeleted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|binary
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|formatBytes
argument_list|(
name|info
operator|.
name|sizeDelta
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|columnDelta2 (SafeHtmlBuilder sb, FileInfo info)
specifier|private
name|void
name|columnDelta2
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|,
name|FileInfo
name|info
parameter_list|)
block|{
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deltaColumn2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|showChangeSizeBars
operator|&&
operator|!
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|info
operator|.
name|path
argument_list|()
argument_list|)
operator|&&
operator|!
name|info
operator|.
name|binary
argument_list|()
operator|&&
operator|(
name|info
operator|.
name|linesInserted
argument_list|()
operator|!=
literal|0
operator|||
name|info
operator|.
name|linesDeleted
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|int
name|w
init|=
literal|80
decl_stmt|;
name|int
name|t
init|=
name|inserted
operator|+
name|deleted
decl_stmt|;
name|int
name|i
init|=
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|w
operator|)
operator|*
name|info
operator|.
name|linesInserted
argument_list|()
operator|/
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Math
operator|.
name|max
argument_list|(
literal|5
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|w
operator|)
operator|*
name|info
operator|.
name|linesDeleted
argument_list|()
operator|/
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|sb
operator|.
name|setAttribute
argument_list|(
literal|"title"
argument_list|,
name|Util
operator|.
name|M
operator|.
name|patchTableSize_LongModify
argument_list|(
name|info
operator|.
name|linesInserted
argument_list|()
argument_list|,
name|info
operator|.
name|linesDeleted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|info
operator|.
name|linesInserted
argument_list|()
condition|)
block|{
name|sb
operator|.
name|openDiv
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|inserted
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"style"
argument_list|,
literal|"width:"
operator|+
name|i
operator|+
literal|"px"
argument_list|)
operator|.
name|closeDiv
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|info
operator|.
name|linesDeleted
argument_list|()
condition|)
block|{
name|sb
operator|.
name|openDiv
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deleted
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"style"
argument_list|,
literal|"width:"
operator|+
name|d
operator|+
literal|"px"
argument_list|)
operator|.
name|closeDiv
argument_list|()
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
DECL|method|footer (SafeHtmlBuilder sb)
specifier|private
name|void
name|footer
parameter_list|(
name|SafeHtmlBuilder
name|sb
parameter_list|)
block|{
name|sb
operator|.
name|openTr
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|nohover
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|pointer
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|REVIEW
condition|)
block|{
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|reviewed
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|restoreDelete
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|status
argument_list|()
argument_list|)
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// path
name|sb
operator|.
name|openTd
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|3
argument_list|)
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// comments
comment|// delta1
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deltaColumn1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasNonBinaryFile
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableSize_Modify
argument_list|(
name|inserted
argument_list|,
name|deleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasBinaryFile
condition|)
block|{
if|if
condition|(
name|hasNonBinaryFile
condition|)
block|{
name|sb
operator|.
name|br
argument_list|()
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableSize_ModifyBinaryFiles
argument_list|(
name|formatAbsBytes
argument_list|(
name|bytesInserted
argument_list|)
argument_list|,
name|formatAbsBytes
argument_list|(
name|bytesDeleted
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|closeTh
argument_list|()
expr_stmt|;
comment|// delta2
name|sb
operator|.
name|openTh
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deltaColumn2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|showChangeSizeBars
condition|)
block|{
name|int
name|w
init|=
literal|80
decl_stmt|;
name|int
name|t
init|=
name|inserted
operator|+
name|deleted
decl_stmt|;
name|int
name|i
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|w
operator|)
operator|*
name|inserted
operator|/
name|t
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|d
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|double
operator|)
name|w
operator|)
operator|*
name|deleted
operator|/
name|t
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|+
name|d
operator|>
name|w
operator|&&
name|i
operator|>
name|d
condition|)
block|{
name|i
operator|=
name|w
operator|-
name|d
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|i
operator|+
name|d
operator|>
name|w
operator|&&
name|d
operator|>
name|i
condition|)
block|{
name|d
operator|=
name|w
operator|-
name|i
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|inserted
condition|)
block|{
name|sb
operator|.
name|openDiv
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|inserted
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"style"
argument_list|,
literal|"width:"
operator|+
name|i
operator|+
literal|"px"
argument_list|)
operator|.
name|closeDiv
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|deleted
condition|)
block|{
name|sb
operator|.
name|openDiv
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|R
operator|.
name|css
argument_list|()
operator|.
name|deleted
argument_list|()
argument_list|)
operator|.
name|setAttribute
argument_list|(
literal|"style"
argument_list|,
literal|"width:"
operator|+
name|d
operator|+
literal|"px"
argument_list|)
operator|.
name|closeDiv
argument_list|()
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|closeTh
argument_list|()
expr_stmt|;
name|sb
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

