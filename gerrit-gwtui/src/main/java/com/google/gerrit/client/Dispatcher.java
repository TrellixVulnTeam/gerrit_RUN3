begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_CREATE_GROUP
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_CREATE_PROJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_PLUGINS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_PROJECTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|DASHBOARDS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|MINE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|MY_GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|PROJECTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|QUERY
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|REGISTER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_AGREEMENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_CONTACT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_DIFF_PREFERENCES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_EDIT_PREFERENCES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_EXTENSION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_GPGKEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_HTTP_PASSWORD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_MYGROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_NEW_AGREEMENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_OAUTH_TOKEN
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_PREFERENCES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_PROJECTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_SSHKEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_WEBIDENT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyAgreementsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyContactInformationScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyDiffPreferencesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyEditPreferencesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyGpgKeysScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyGroupsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyIdentitiesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyOAuthTokenScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyPasswordScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyPreferencesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyProfileScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MySshKeysScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyWatchedProjectsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|NewAgreementScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|RegisterScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|ValidateEmailScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupAuditLogScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupInfoScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupMembersScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|CreateGroupScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|CreateProjectScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|GroupListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|PluginListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectAccessScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectBranchesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectDashboardsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectInfoScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectTagsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|ExtensionScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|ExtensionSettingsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|ChangeScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|FileTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|ProjectChangeId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|AccountDashboardScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CustomDashboardScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ProjectDashboardScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|QueryScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|dashboards
operator|.
name|DashboardInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|dashboards
operator|.
name|DashboardList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DisplaySide
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|SideBySide
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|Unified
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|documentation
operator|.
name|DocScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|editor
operator|.
name|EditScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|groups
operator|.
name|GroupApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|GroupInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|GeneralPreferencesInfo
operator|.
name|DiffView
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
operator|.
name|UserAgent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_class
DECL|class|Dispatcher
specifier|public
class|class
name|Dispatcher
block|{
DECL|method|toPatch ( @ullable Project.NameKey project, DiffObject diffBase, PatchSet.Id revision, String fileName)
specifier|public
specifier|static
name|String
name|toPatch
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|""
argument_list|,
name|project
argument_list|,
name|diffBase
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|toPatch ( @ullable Project.NameKey project, DiffObject diffBase, PatchSet.Id revision, String fileName, DisplaySide side, int line)
specifier|public
specifier|static
name|String
name|toPatch
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|,
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|""
argument_list|,
name|project
argument_list|,
name|diffBase
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
return|;
block|}
DECL|method|toSideBySide ( @ullable Project.NameKey project, DiffObject diffBase, PatchSet.Id revision, String fileName)
specifier|public
specifier|static
name|String
name|toSideBySide
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|"sidebyside"
argument_list|,
name|project
argument_list|,
name|diffBase
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|toUnified ( @ullable Project.NameKey project, DiffObject diffBase, PatchSet.Id revision, String fileName)
specifier|public
specifier|static
name|String
name|toUnified
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|"unified"
argument_list|,
name|project
argument_list|,
name|diffBase
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|toPatch ( @ullable Project.NameKey project, String type, DiffObject diffBase, Patch.Key id)
specifier|public
specifier|static
name|String
name|toPatch
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|String
name|type
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
name|type
argument_list|,
name|project
argument_list|,
name|diffBase
argument_list|,
name|id
operator|.
name|getParentKey
argument_list|()
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|toEditScreen ( @ullable Project.NameKey project, PatchSet.Id revision, String fileName)
specifier|public
specifier|static
name|String
name|toEditScreen
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|)
block|{
return|return
name|toEditScreen
argument_list|(
name|project
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
literal|0
argument_list|)
return|;
block|}
DECL|method|toEditScreen ( @ullable Project.NameKey project, PatchSet.Id revision, String fileName, int line)
specifier|public
specifier|static
name|String
name|toEditScreen
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|,
name|int
name|line
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|"edit"
argument_list|,
name|project
argument_list|,
name|DiffObject
operator|.
name|base
argument_list|()
argument_list|,
name|revision
argument_list|,
name|fileName
argument_list|,
literal|null
argument_list|,
name|line
argument_list|)
return|;
block|}
DECL|method|toPatch ( String type, @Nullable Project.NameKey project, DiffObject diffBase, PatchSet.Id revision, String fileName, DisplaySide side, int line)
specifier|private
specifier|static
name|String
name|toPatch
parameter_list|(
name|String
name|type
parameter_list|,
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|diffBase
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|fileName
parameter_list|,
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|Change
operator|.
name|Id
name|c
init|=
name|revision
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|StringBuilder
name|p
init|=
operator|new
name|StringBuilder
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|project
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|diffBase
operator|!=
literal|null
operator|&&
name|diffBase
operator|.
name|asString
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|append
argument_list|(
name|diffBase
operator|.
name|asString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|append
argument_list|(
name|revision
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|KeyUtil
operator|.
name|encode
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
literal|"sidebyside"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
operator|||
name|preferUnified
argument_list|()
operator|)
condition|)
block|{
name|p
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|line
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|append
argument_list|(
literal|"@a"
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|>
literal|0
condition|)
block|{
name|p
operator|.
name|append
argument_list|(
literal|"@"
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
return|return
name|p
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toGroup (AccountGroup.Id id)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
name|ADMIN_GROUPS
operator|+
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toGroup (AccountGroup.Id id, String panel)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
return|return
name|ADMIN_GROUPS
operator|+
name|id
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|method|toGroup (AccountGroup.UUID uuid)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
name|PageLinks
operator|.
name|toGroup
argument_list|(
name|uuid
argument_list|)
return|;
block|}
DECL|method|toGroup (AccountGroup.UUID uuid, String panel)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
return|return
name|toGroup
argument_list|(
name|uuid
argument_list|)
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|method|toProject (Project.NameKey n)
specifier|public
specifier|static
name|String
name|toProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|n
parameter_list|)
block|{
return|return
name|toProjectAdmin
argument_list|(
name|n
argument_list|,
name|ProjectScreen
operator|.
name|getSavedPanel
argument_list|()
argument_list|)
return|;
block|}
DECL|method|toProjectAdmin (Project.NameKey n, String panel)
specifier|public
specifier|static
name|String
name|toProjectAdmin
parameter_list|(
name|Project
operator|.
name|NameKey
name|n
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
operator|||
name|ProjectScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
name|ADMIN_PROJECTS
operator|+
name|n
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|ADMIN_PROJECTS
operator|+
name|n
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|field|RELOAD_UI
specifier|static
specifier|final
name|String
name|RELOAD_UI
init|=
literal|"/reload-ui/"
decl_stmt|;
DECL|field|wasStartedByReloadUI
specifier|private
specifier|static
name|boolean
name|wasStartedByReloadUI
decl_stmt|;
DECL|method|display (String token)
name|void
name|display
parameter_list|(
name|String
name|token
parameter_list|)
block|{
assert|assert
name|token
operator|!=
literal|null
assert|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
name|RELOAD_UI
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|wasStartedByReloadUI
operator|=
literal|true
expr_stmt|;
name|token
operator|=
name|skip
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|select
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wasStartedByReloadUI
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
name|GWT
operator|.
name|log
argument_list|(
literal|"Error parsing history token: "
operator|+
name|token
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|select (String token)
specifier|private
specifier|static
name|void
name|select
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|token
operator|=
name|Gerrit
operator|.
name|getUrlAliasMatcher
argument_list|()
operator|.
name|replace
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchPrefix
argument_list|(
name|QUERY
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|query
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/Documentation/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|docSearch
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/c/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|change
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/x/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|extension
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|MINE
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|defaultScreenToken
init|=
name|Gerrit
operator|.
name|getDefaultScreenToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultScreenToken
operator|!=
literal|null
operator|&&
operator|!
name|MINE
operator|.
name|equals
argument_list|(
name|defaultScreenToken
argument_list|)
condition|)
block|{
name|select
argument_list|(
name|defaultScreenToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|mine
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/dashboard/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|dashboard
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
name|PROJECTS
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|projects
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"/settings/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
name|MY_GROUPS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"register"
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
name|REGISTER
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"/VE/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"VE,"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"/SignInFailure,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|settings
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|admin
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|query (String token)
specifier|private
specifier|static
name|void
name|query
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|Screen
name|screen
decl_stmt|;
if|if
condition|(
name|c
operator|>=
literal|0
condition|)
block|{
name|String
name|prefix
init|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|substring
argument_list|(
name|c
argument_list|)
operator|.
name|equals
argument_list|(
literal|",n,z"
argument_list|)
condition|)
block|{
comment|// Respect legacy token with max sortkey.
name|screen
operator|=
operator|new
name|QueryScreen
argument_list|(
name|prefix
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|screen
operator|=
operator|new
name|QueryScreen
argument_list|(
name|prefix
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|screen
operator|=
operator|new
name|QueryScreen
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|screen
argument_list|)
expr_stmt|;
block|}
DECL|method|mine ()
specifier|private
specifier|static
name|Screen
name|mine
parameter_list|()
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
return|return
operator|new
name|AccountDashboardScreen
argument_list|(
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
name|Screen
name|r
init|=
operator|new
name|AccountDashboardScreen
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|r
operator|.
name|setRequiresSignIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|dashboard (String token)
specifier|private
specifier|static
name|void
name|dashboard
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|matches
argument_list|(
literal|"[0-9]+"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountDashboardScreen
argument_list|(
name|Account
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|rest
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|rest
operator|.
name|equals
argument_list|(
literal|"self"
argument_list|)
condition|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountDashboardScreen
argument_list|(
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Screen
name|s
init|=
operator|new
name|AccountDashboardScreen
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|s
operator|.
name|setRequiresSignIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
name|rest
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|CustomDashboardScreen
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|projects (String token)
specifier|private
specifier|static
name|void
name|projects
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|indexOf
argument_list|(
name|DASHBOARDS
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
specifier|final
name|String
name|project
init|=
name|URL
operator|.
name|decodePathSegment
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchPrefix
argument_list|(
name|DASHBOARDS
argument_list|,
name|rest
argument_list|)
condition|)
block|{
specifier|final
name|String
name|dashboardId
init|=
name|skip
argument_list|(
name|rest
argument_list|)
decl_stmt|;
name|GerritCallback
argument_list|<
name|DashboardInfo
argument_list|>
name|cb
init|=
operator|new
name|GerritCallback
argument_list|<
name|DashboardInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DashboardInfo
name|result
parameter_list|)
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/dashboard/"
argument_list|,
name|result
operator|.
name|url
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|params
init|=
name|skip
argument_list|(
name|result
operator|.
name|url
argument_list|()
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ProjectDashboardScreen
name|dash
init|=
operator|new
name|ProjectDashboardScreen
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|dash
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|dashboardId
argument_list|)
operator|&&
name|RestApi
operator|.
name|isNotFound
argument_list|(
name|caught
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
name|PageLinks
operator|.
name|projectQuery
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
if|if
condition|(
literal|"default"
operator|.
name|equals
argument_list|(
name|dashboardId
argument_list|)
condition|)
block|{
name|DashboardList
operator|.
name|getDefault
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return;
block|}
name|c
operator|=
name|dashboardId
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
specifier|final
name|String
name|ref
init|=
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|dashboardId
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|dashboardId
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|DashboardList
operator|.
name|get
argument_list|(
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
argument_list|,
name|ref
operator|+
literal|":"
operator|+
name|path
argument_list|,
name|cb
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|change (String token)
specifier|private
specifier|static
name|void
name|change
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|String
name|panel
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
name|panel
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|int
name|at
init|=
name|panel
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>
literal|0
condition|)
block|{
name|rest
operator|+=
name|panel
operator|.
name|substring
argument_list|(
name|at
argument_list|)
expr_stmt|;
name|panel
operator|=
name|panel
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
block|}
name|ProjectChangeId
name|id
init|=
name|ProjectChangeId
operator|.
name|create
argument_list|(
name|rest
argument_list|)
decl_stmt|;
name|rest
operator|=
name|rest
operator|.
name|length
argument_list|()
operator|>
name|id
operator|.
name|identifierLength
argument_list|()
condition|?
name|rest
operator|.
name|substring
argument_list|(
name|id
operator|.
name|identifierLength
argument_list|()
operator|+
literal|1
argument_list|)
else|:
literal|""
expr_stmt|;
if|if
condition|(
name|rest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|FileTable
operator|.
name|Mode
name|mode
init|=
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
decl_stmt|;
if|if
condition|(
name|panel
operator|!=
literal|null
operator|&&
operator|(
name|panel
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
operator|||
name|panel
operator|.
name|startsWith
argument_list|(
literal|"edit/"
argument_list|)
operator|)
condition|)
block|{
name|mode
operator|=
name|FileTable
operator|.
name|Mode
operator|.
name|EDIT
expr_stmt|;
name|panel
operator|=
literal|null
expr_stmt|;
block|}
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|panel
operator|==
literal|null
condition|?
operator|new
name|ChangeScreen
argument_list|(
name|id
operator|.
name|getProject
argument_list|()
argument_list|,
name|id
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|DiffObject
operator|.
name|base
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|mode
argument_list|)
else|:
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|psIdStr
decl_stmt|;
name|int
name|s
init|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|s
condition|)
block|{
name|psIdStr
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|psIdStr
operator|=
name|rest
expr_stmt|;
name|rest
operator|=
literal|""
expr_stmt|;
block|}
name|DiffObject
name|base
init|=
name|DiffObject
operator|.
name|base
argument_list|()
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|ps
decl_stmt|;
name|int
name|dotdot
init|=
name|psIdStr
operator|.
name|indexOf
argument_list|(
literal|".."
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|<=
name|dotdot
condition|)
block|{
name|base
operator|=
name|DiffObject
operator|.
name|parse
argument_list|(
name|id
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psIdStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dotdot
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|psIdStr
operator|=
name|psIdStr
operator|.
name|substring
argument_list|(
name|dotdot
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
name|ps
operator|=
name|toPsId
argument_list|(
name|id
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|psIdStr
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DisplaySide
name|side
init|=
name|DisplaySide
operator|.
name|B
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|int
name|at
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>
literal|0
condition|)
block|{
name|String
name|l
init|=
name|rest
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|startsWith
argument_list|(
literal|"a"
argument_list|)
condition|)
block|{
name|side
operator|=
name|DisplaySide
operator|.
name|A
expr_stmt|;
name|l
operator|=
name|l
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
name|Patch
operator|.
name|Key
name|p
init|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|ps
argument_list|,
name|KeyUtil
operator|.
name|decode
argument_list|(
name|rest
argument_list|)
argument_list|)
decl_stmt|;
name|patch
argument_list|(
name|token
argument_list|,
name|id
operator|.
name|getProject
argument_list|()
argument_list|,
name|base
argument_list|,
name|p
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|id
operator|.
name|getProject
argument_list|()
argument_list|,
name|id
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|base
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|ps
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toPsId (Change.Id id, String psIdStr)
specifier|public
specifier|static
name|PatchSet
operator|.
name|Id
name|toPsId
parameter_list|(
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|String
name|psIdStr
parameter_list|)
block|{
return|return
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|psIdStr
operator|.
name|equals
argument_list|(
literal|"edit"
argument_list|)
condition|?
literal|0
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|psIdStr
argument_list|)
argument_list|)
return|;
block|}
DECL|method|extension (String token)
specifier|private
specifier|static
name|void
name|extension
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|ExtensionScreen
name|view
init|=
operator|new
name|ExtensionScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|.
name|isFound
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|view
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|patch ( String token, @Nullable Project.NameKey project, DiffObject base, Patch.Key id, DisplaySide side, int line, String panelType)
specifier|private
specifier|static
name|void
name|patch
parameter_list|(
name|String
name|token
parameter_list|,
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|base
parameter_list|,
name|Patch
operator|.
name|Key
name|id
parameter_list|,
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|String
name|panelType
parameter_list|)
block|{
name|String
name|panel
init|=
name|panelType
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|int
name|c
init|=
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|panel
operator|=
literal|0
operator|<=
name|c
condition|?
name|token
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
else|:
literal|""
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
operator|||
comment|/* DEPRECATED URL */
literal|"cm"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
if|if
condition|(
name|preferUnified
argument_list|()
condition|)
block|{
name|unified
argument_list|(
name|token
argument_list|,
name|project
argument_list|,
name|base
argument_list|,
name|id
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|codemirror
argument_list|(
name|token
argument_list|,
name|base
argument_list|,
name|project
argument_list|,
name|id
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
literal|"sidebyside"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|codemirror
argument_list|(
name|token
argument_list|,
name|base
argument_list|,
name|project
argument_list|,
name|id
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"unified"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|unified
argument_list|(
name|token
argument_list|,
name|project
argument_list|,
name|base
argument_list|,
name|id
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"edit"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Patch
operator|.
name|isMagic
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|||
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
name|codemirrorForEdit
argument_list|(
name|token
argument_list|,
name|project
argument_list|,
name|id
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|preferUnified ()
specifier|private
specifier|static
name|boolean
name|preferUnified
parameter_list|()
block|{
return|return
name|DiffView
operator|.
name|UNIFIED_DIFF
operator|.
name|equals
argument_list|(
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|diffView
argument_list|()
argument_list|)
operator|||
operator|(
name|UserAgent
operator|.
name|isPortrait
argument_list|()
operator|&&
name|UserAgent
operator|.
name|isMobile
argument_list|()
operator|)
return|;
block|}
DECL|method|unified ( final String token, final Project.NameKey project, final DiffObject base, final Patch.Key id, final DisplaySide side, final int line)
specifier|private
specifier|static
name|void
name|unified
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
specifier|final
name|DiffObject
name|base
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|DisplaySide
name|side
parameter_list|,
specifier|final
name|int
name|line
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|Unified
argument_list|(
name|project
argument_list|,
name|base
argument_list|,
name|DiffObject
operator|.
name|patchSet
argument_list|(
name|id
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|codemirror ( final String token, final DiffObject base, @Nullable final Project.NameKey project, final Patch.Key id, final DisplaySide side, final int line)
specifier|private
specifier|static
name|void
name|codemirror
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|DiffObject
name|base
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|DisplaySide
name|side
parameter_list|,
specifier|final
name|int
name|line
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|SideBySide
argument_list|(
name|project
argument_list|,
name|base
argument_list|,
name|DiffObject
operator|.
name|patchSet
argument_list|(
name|id
operator|.
name|getParentKey
argument_list|()
argument_list|)
argument_list|,
name|id
operator|.
name|get
argument_list|()
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|codemirrorForEdit ( final String token, @Nullable final Project.NameKey project, final Patch.Key id, final int line)
specifier|private
specifier|static
name|void
name|codemirrorForEdit
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|line
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|EditScreen
argument_list|(
name|project
argument_list|,
name|id
argument_list|,
name|line
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|settings (String token)
specifier|private
specifier|static
name|void
name|settings
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|select
parameter_list|()
block|{
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyProfileScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_PREFERENCES
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyPreferencesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_DIFF_PREFERENCES
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyDiffPreferencesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_EDIT_PREFERENCES
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyEditPreferencesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_PROJECTS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyWatchedProjectsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_CONTACT
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyContactInformationScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_SSHKEYS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MySshKeysScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_GPGKEYS
argument_list|,
name|token
argument_list|)
operator|&&
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|gerrit
argument_list|()
operator|.
name|editGpgKeys
argument_list|()
condition|)
block|{
return|return
operator|new
name|MyGpgKeysScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_WEBIDENT
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyIdentitiesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_HTTP_PASSWORD
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyPasswordScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_OAUTH_TOKEN
argument_list|,
name|token
argument_list|)
operator|&&
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|auth
argument_list|()
operator|.
name|isOAuth
argument_list|()
condition|)
block|{
return|return
operator|new
name|MyOAuthTokenScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|MY_GROUPS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
name|SETTINGS_MYGROUPS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyGroupsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_AGREEMENTS
argument_list|,
name|token
argument_list|)
operator|&&
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|auth
argument_list|()
operator|.
name|useContributorAgreements
argument_list|()
condition|)
block|{
return|return
operator|new
name|MyAgreementsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|REGISTER
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"register"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegisterScreen
argument_list|(
name|MINE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegisterScreen
argument_list|(
literal|"/"
operator|+
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/VE/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"VE,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|ValidateEmailScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_NEW_AGREEMENT
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|NewAgreementScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
name|SETTINGS_NEW_AGREEMENT
operator|+
literal|"/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|NewAgreementScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
name|SETTINGS_EXTENSION
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|ExtensionSettingsScreen
name|view
init|=
operator|new
name|ExtensionSettingsScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|.
name|isFound
argument_list|()
condition|)
block|{
return|return
name|view
return|;
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|admin (String token)
specifier|private
specifier|static
name|void
name|admin
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_GROUPS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/groups"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|GroupListScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
name|ADMIN_GROUPS
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|GroupListScreen
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|group
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/groups"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|GroupListScreen
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_PROJECTS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/projects"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ProjectListScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
name|ADMIN_PROJECTS
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ProjectListScreen
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|selectProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/projects"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ProjectListScreen
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
name|ADMIN_PLUGINS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/plugins"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|PluginListScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_CREATE_PROJECT
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/create-project"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|CreateProjectScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_CREATE_GROUP
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/create-group"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|CreateGroupScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|group
parameter_list|()
block|{
specifier|final
name|String
name|panel
decl_stmt|;
specifier|final
name|String
name|group
decl_stmt|;
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/groups/uuid-"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|p
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|group
operator|=
name|p
expr_stmt|;
name|panel
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|group
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panel
operator|=
name|p
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
name|ADMIN_GROUPS
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|p
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|group
operator|=
name|p
expr_stmt|;
name|panel
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|group
operator|=
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|panel
operator|=
name|p
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|GroupApi
operator|.
name|getGroupDetail
argument_list|(
name|group
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|GroupInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GroupInfo
name|group
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
operator|||
name|panel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The token does not say which group screen should be shown,
comment|// as default for internal groups show the members, as default
comment|// for external and system groups show the info screen (since
comment|// for external and system groups the members cannot be
comment|// shown in the web UI).
comment|//
if|if
condition|(
name|AccountGroup
operator|.
name|isInternalGroup
argument_list|(
name|group
operator|.
name|getGroupUUID
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|newToken
init|=
name|toGroup
argument_list|(
name|group
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|AccountGroupScreen
operator|.
name|MEMBERS
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|newToken
argument_list|,
operator|new
name|AccountGroupMembersScreen
argument_list|(
name|group
argument_list|,
name|newToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|newToken
init|=
name|toGroup
argument_list|(
name|group
operator|.
name|getGroupId
argument_list|()
argument_list|,
name|AccountGroupScreen
operator|.
name|INFO
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|newToken
argument_list|,
operator|new
name|AccountGroupInfoScreen
argument_list|(
name|group
argument_list|,
name|newToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|AccountGroupScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountGroupInfoScreen
argument_list|(
name|group
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AccountGroupScreen
operator|.
name|MEMBERS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountGroupMembersScreen
argument_list|(
name|group
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AccountGroupScreen
operator|.
name|AUDIT_LOG
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountGroupAuditLogScreen
argument_list|(
name|group
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|selectProject
parameter_list|()
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
name|ADMIN_PROJECTS
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|ProjectInfoScreen
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
name|int
name|q
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|'?'
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|>
literal|0
operator|&&
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|,
name|q
argument_list|)
operator|>
literal|0
condition|)
block|{
name|c
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|q
operator|-
literal|1
argument_list|)
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|Project
operator|.
name|NameKey
name|k
init|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|panel
init|=
name|rest
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ProjectScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectInfoScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|BRANCHES
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
operator|||
name|matchPrefix
argument_list|(
name|ProjectScreen
operator|.
name|BRANCHES
argument_list|,
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectBranchesScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|TAGS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
operator|||
name|matchPrefix
argument_list|(
name|ProjectScreen
operator|.
name|TAGS
argument_list|,
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectTagsScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|ACCESS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectAccessScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|DASHBOARDS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectDashboardsScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|matchExact (String want, String token)
specifier|private
specifier|static
name|boolean
name|matchExact
parameter_list|(
name|String
name|want
parameter_list|,
name|String
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|equals
argument_list|(
name|want
argument_list|)
return|;
block|}
DECL|field|prefixlen
specifier|private
specifier|static
name|int
name|prefixlen
decl_stmt|;
DECL|method|matchPrefix (String want, String token)
specifier|private
specifier|static
name|boolean
name|matchPrefix
parameter_list|(
name|String
name|want
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|want
argument_list|)
condition|)
block|{
name|prefixlen
operator|=
name|want
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|skip (String token)
specifier|private
specifier|static
name|String
name|skip
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|substring
argument_list|(
name|prefixlen
argument_list|)
return|;
block|}
DECL|class|AsyncSplit
specifier|private
specifier|abstract
specifier|static
class|class
name|AsyncSplit
implements|implements
name|RunAsyncCallback
block|{
DECL|field|isReloadUi
specifier|private
specifier|final
name|boolean
name|isReloadUi
decl_stmt|;
DECL|field|token
specifier|protected
specifier|final
name|String
name|token
decl_stmt|;
DECL|method|AsyncSplit (String token)
specifier|protected
name|AsyncSplit
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|isReloadUi
operator|=
name|wasStartedByReloadUI
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (Throwable reason)
specifier|public
specifier|final
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isReloadUi
operator|&&
literal|"HTTP download failed with status 404"
operator|.
name|equals
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// The server was upgraded since we last download the main script,
comment|// so the pointers to the splits aren't valid anymore.  Force the
comment|// page to reload itself and pick up the new code.
comment|//
name|Gerrit
operator|.
name|upgradeUI
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|ErrorDialog
argument_list|(
name|reason
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|docSearch (String token)
specifier|private
specifier|static
name|void
name|docSearch
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|DocScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

