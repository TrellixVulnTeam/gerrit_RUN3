begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_CREATE_PROJECT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_GROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|ADMIN_PROJECTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|MINE
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|REGISTER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_AGREEMENTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_CONTACT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_HTTP_PASSWORD
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_MYGROUPS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_NEW_AGREEMENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_PREFERENCES
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_PROJECTS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_SSHKEYS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|SETTINGS_WEBIDENT
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
operator|.
name|op
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyAgreementsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyContactInformationScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyGroupsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyIdentitiesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyPasswordScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyPreferencesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyProfileScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MySshKeysScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|MyWatchedProjectsScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|NewAgreementScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|RegisterScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|ValidateEmailScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupInfoScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupMembersScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|AccountGroupScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|CreateProjectScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|GroupListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectAccessScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectBranchesScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectInfoScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|auth
operator|.
name|openid
operator|.
name|OpenIdSignInDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|auth
operator|.
name|userpass
operator|.
name|UserPassSignInDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|AccountDashboardScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PatchTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PublishCommentScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|QueryScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|auth
operator|.
name|SignInMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GroupDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|RunAsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_class
DECL|class|Dispatcher
specifier|public
class|class
name|Dispatcher
block|{
DECL|method|toPatchSideBySide (final Patch.Key id)
specifier|public
specifier|static
name|String
name|toPatchSideBySide
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|""
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|toPatchUnified (final Patch.Key id)
specifier|public
specifier|static
name|String
name|toPatchUnified
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
return|return
name|toPatch
argument_list|(
literal|"unified"
argument_list|,
name|id
argument_list|)
return|;
block|}
DECL|method|toPatch (String type, final Patch.Key id)
specifier|private
specifier|static
name|String
name|toPatch
parameter_list|(
name|String
name|type
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
name|PatchSet
operator|.
name|Id
name|ps
init|=
name|id
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Change
operator|.
name|Id
name|c
init|=
name|ps
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
operator|!
name|type
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|type
operator|=
literal|","
operator|+
name|type
expr_stmt|;
block|}
return|return
literal|"/c/"
operator|+
name|c
operator|+
literal|"/"
operator|+
name|ps
operator|.
name|get
argument_list|()
operator|+
literal|"/"
operator|+
name|KeyUtil
operator|.
name|encode
argument_list|(
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|+
name|type
return|;
block|}
DECL|method|toPatch (final PatchScreen.Type type, final Patch.Key id)
specifier|public
specifier|static
name|String
name|toPatch
parameter_list|(
specifier|final
name|PatchScreen
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
condition|)
block|{
return|return
name|toPatchSideBySide
argument_list|(
name|id
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|toPatchUnified
argument_list|(
name|id
argument_list|)
return|;
block|}
block|}
DECL|method|toPublish (PatchSet.Id ps)
specifier|public
specifier|static
name|String
name|toPublish
parameter_list|(
name|PatchSet
operator|.
name|Id
name|ps
parameter_list|)
block|{
name|Change
operator|.
name|Id
name|c
init|=
name|ps
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
return|return
literal|"/c/"
operator|+
name|c
operator|+
literal|"/"
operator|+
name|ps
operator|.
name|get
argument_list|()
operator|+
literal|",publish"
return|;
block|}
DECL|method|toGroup (final AccountGroup.Id id)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|)
block|{
return|return
literal|"/admin/groups/"
operator|+
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toGroup (AccountGroup.Id id, String panel)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|Id
name|id
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
return|return
literal|"/admin/groups/"
operator|+
name|id
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|method|toGroup (final AccountGroup.UUID uuid)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
specifier|final
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|)
block|{
return|return
literal|"/admin/groups/uuid-"
operator|+
name|uuid
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|toGroup (AccountGroup.UUID uuid, String panel)
specifier|public
specifier|static
name|String
name|toGroup
parameter_list|(
name|AccountGroup
operator|.
name|UUID
name|uuid
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
return|return
literal|"/admin/groups/uuid-"
operator|+
name|uuid
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|method|toProjectAdmin (Project.NameKey n, String panel)
specifier|public
specifier|static
name|String
name|toProjectAdmin
parameter_list|(
name|Project
operator|.
name|NameKey
name|n
parameter_list|,
name|String
name|panel
parameter_list|)
block|{
if|if
condition|(
name|ProjectScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
literal|"/admin/projects/"
operator|+
name|n
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
literal|"/admin/projects/"
operator|+
name|n
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|panel
return|;
block|}
DECL|field|RELOAD_UI
specifier|static
specifier|final
name|String
name|RELOAD_UI
init|=
literal|"/reload-ui/"
decl_stmt|;
DECL|field|wasStartedByReloadUI
specifier|private
specifier|static
name|boolean
name|wasStartedByReloadUI
decl_stmt|;
DECL|method|display (String token)
name|void
name|display
parameter_list|(
name|String
name|token
parameter_list|)
block|{
assert|assert
name|token
operator|!=
literal|null
assert|;
try|try
block|{
try|try
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
name|RELOAD_UI
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|wasStartedByReloadUI
operator|=
literal|true
expr_stmt|;
name|token
operator|=
name|skip
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|select
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wasStartedByReloadUI
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|err
parameter_list|)
block|{
name|GWT
operator|.
name|log
argument_list|(
literal|"Error parsing history token: "
operator|+
name|token
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|select (final String token)
specifier|private
specifier|static
name|void
name|select
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/q/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|query
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/c/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|change
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|MINE
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|mine
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/dashboard/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|dashboard
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchPrefix
argument_list|(
literal|"/settings/"
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchExact
argument_list|(
literal|"register"
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchExact
argument_list|(
name|REGISTER
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchPrefix
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchPrefix
argument_list|(
literal|"/VE/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"VE,"
argument_list|,
name|token
argument_list|)
comment|//
operator|||
name|matchPrefix
argument_list|(
literal|"/SignInFailure,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|settings
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|admin
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"all,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyAll
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"mine,"
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"mine"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyMine
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"project,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyProject
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"change,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyChange
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"patch,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyPatch
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"admin,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacyAdmin
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"settings,"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"register,"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"q,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|redirectFromLegacyToken
argument_list|(
name|token
argument_list|,
name|legacySettings
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|redirectFromLegacyToken (String oldToken, String newToken)
specifier|private
specifier|static
name|void
name|redirectFromLegacyToken
parameter_list|(
name|String
name|oldToken
parameter_list|,
name|String
name|newToken
parameter_list|)
block|{
if|if
condition|(
name|newToken
operator|!=
literal|null
condition|)
block|{
name|Window
operator|.
name|Location
operator|.
name|replace
argument_list|(
name|Window
operator|.
name|Location
operator|.
name|getPath
argument_list|()
operator|+
literal|"#"
operator|+
name|newToken
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|oldToken
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|legacyMine (final String token)
specifier|private
specifier|static
name|String
name|legacyMine
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|matchExact
argument_list|(
literal|"mine"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|MINE
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
literal|"mine,starred"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"is:starred"
argument_list|)
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
literal|"mine,drafts"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"has:draft"
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"mine,watched,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"is:watched status:open"
argument_list|,
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|legacyAll (final String token)
specifier|private
specifier|static
name|String
name|legacyAll
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"all,abandoned,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:abandoned"
argument_list|,
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"all,merged,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:merged"
argument_list|,
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"all,open,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:open"
argument_list|,
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|legacyProject (final String token)
specifier|private
specifier|static
name|String
name|legacyProject
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"project,open,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|proj
init|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
comment|//
literal|"status:open "
operator|+
name|op
argument_list|(
literal|"project"
argument_list|,
name|proj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
comment|//
name|s
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"project,merged,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|proj
init|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
comment|//
literal|"status:merged "
operator|+
name|op
argument_list|(
literal|"project"
argument_list|,
name|proj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
comment|//
name|s
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"project,abandoned,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
specifier|final
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|Project
operator|.
name|NameKey
name|proj
init|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
comment|//
literal|"status:abandoned "
operator|+
name|op
argument_list|(
literal|"project"
argument_list|,
name|proj
operator|.
name|get
argument_list|()
argument_list|)
argument_list|,
comment|//
name|s
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|legacyChange (final String token)
specifier|private
specifier|static
name|String
name|legacyChange
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|String
name|t
index|[]
init|=
name|s
operator|.
name|split
argument_list|(
literal|","
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|length
operator|>
literal|1
operator|&&
name|matchPrefix
argument_list|(
literal|"patchset="
argument_list|,
name|t
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
return|return
name|PageLinks
operator|.
name|toChange
argument_list|(
name|PatchSet
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|t
index|[
literal|0
index|]
operator|+
literal|","
operator|+
name|skip
argument_list|(
name|t
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
name|PageLinks
operator|.
name|toChange
argument_list|(
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|t
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
DECL|method|legacyPatch (String token)
specifier|private
specifier|static
name|String
name|legacyPatch
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"patch,sidebyside,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|toPatchSideBySide
argument_list|(
name|Patch
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
comment|/* LEGACY URL */
name|matchPrefix
argument_list|(
literal|"patch,unified,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
name|toPatchUnified
argument_list|(
name|Patch
operator|.
name|Key
operator|.
name|parse
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|legacyAdmin (String token)
specifier|private
specifier|static
name|String
name|legacyAdmin
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"admin,group,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
literal|"/admin/groups/"
operator|+
name|skip
argument_list|(
name|token
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"admin,project,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|String
name|panel
decl_stmt|;
name|Project
operator|.
name|NameKey
name|k
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|c
condition|)
block|{
name|panel
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
name|k
operator|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panel
operator|=
name|ProjectScreen
operator|.
name|INFO
expr_stmt|;
name|k
operator|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
argument_list|)
expr_stmt|;
block|}
return|return
name|toProjectAdmin
argument_list|(
name|k
argument_list|,
name|panel
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|legacySettings (String token)
specifier|private
specifier|static
name|String
name|legacySettings
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|int
name|c
init|=
name|token
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|c
condition|)
block|{
return|return
literal|"/"
operator|+
name|token
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
operator|+
literal|"/"
operator|+
name|token
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|query (final String token)
specifier|private
specifier|static
name|void
name|query
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
specifier|final
name|String
name|s
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
specifier|final
name|int
name|c
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|QueryScreen
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|,
name|s
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|mine (final String token)
specifier|private
specifier|static
name|Screen
name|mine
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
return|return
operator|new
name|AccountDashboardScreen
argument_list|(
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|Screen
name|r
init|=
operator|new
name|AccountDashboardScreen
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|r
operator|.
name|setRequiresSignIn
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
DECL|method|dashboard (final String token)
specifier|private
specifier|static
name|void
name|dashboard
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
comment|//
operator|new
name|AccountDashboardScreen
argument_list|(
name|Account
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|change (final String token)
specifier|private
specifier|static
name|void
name|change
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|String
name|panel
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|c
condition|)
block|{
name|panel
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|Change
operator|.
name|Id
name|id
decl_stmt|;
name|int
name|s
init|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|s
condition|)
block|{
name|id
operator|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|Change
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|rest
argument_list|)
expr_stmt|;
name|rest
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|rest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|panel
operator|==
literal|null
comment|//
condition|?
operator|new
name|ChangeScreen
argument_list|(
name|id
argument_list|)
comment|//
else|:
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|psIdStr
decl_stmt|;
name|s
operator|=
name|rest
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<=
name|s
condition|)
block|{
name|psIdStr
operator|=
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
expr_stmt|;
name|rest
operator|=
name|rest
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|psIdStr
operator|=
name|rest
expr_stmt|;
name|rest
operator|=
literal|""
expr_stmt|;
block|}
name|PatchSet
operator|.
name|Id
name|ps
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|psIdStr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rest
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Patch
operator|.
name|Key
name|p
init|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|ps
argument_list|,
name|rest
argument_list|)
decl_stmt|;
name|patch
argument_list|(
name|token
argument_list|,
name|p
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|panel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|ps
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"publish"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|publish
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|publish (final PatchSet.Id ps)
specifier|private
specifier|static
name|void
name|publish
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|ps
parameter_list|)
block|{
name|String
name|token
init|=
name|toPublish
argument_list|(
name|ps
argument_list|)
decl_stmt|;
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|select
parameter_list|()
block|{
return|return
operator|new
name|PublishCommentScreen
argument_list|(
name|ps
argument_list|)
return|;
block|}
block|}
operator|.
name|onSuccess
argument_list|()
expr_stmt|;
block|}
DECL|method|patch (String token, final Patch.Key id, final int patchIndex, final PatchSetDetail patchSetDetail, final PatchTable patchTable, final PatchScreen.TopView topView)
specifier|public
specifier|static
name|void
name|patch
parameter_list|(
name|String
name|token
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|patchSetDetail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|PatchScreen
operator|.
name|TopView
name|topView
parameter_list|)
block|{
name|patch
argument_list|(
name|token
argument_list|,
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchSetDetail
argument_list|,
name|patchTable
argument_list|,
name|topView
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|patch (String token, final Patch.Key id, final int patchIndex, final PatchSetDetail patchSetDetail, final PatchTable patchTable, final String panelType)
specifier|public
specifier|static
name|void
name|patch
parameter_list|(
name|String
name|token
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|patchSetDetail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|String
name|panelType
parameter_list|)
block|{
name|patch
argument_list|(
name|token
argument_list|,
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchSetDetail
argument_list|,
name|patchTable
argument_list|,
literal|null
argument_list|,
name|panelType
argument_list|)
expr_stmt|;
block|}
DECL|method|patch (String token, final Patch.Key id, final int patchIndex, final PatchSetDetail patchSetDetail, final PatchTable patchTable, final PatchScreen.TopView topView, final String panelType)
specifier|public
specifier|static
name|void
name|patch
parameter_list|(
name|String
name|token
parameter_list|,
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|patchSetDetail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|PatchScreen
operator|.
name|TopView
name|topView
parameter_list|,
specifier|final
name|String
name|panelType
parameter_list|)
block|{
specifier|final
name|PatchScreen
operator|.
name|TopView
name|top
init|=
name|topView
operator|==
literal|null
condition|?
name|Gerrit
operator|.
name|getPatchScreenTopView
argument_list|()
else|:
name|topView
decl_stmt|;
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|select
parameter_list|()
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|String
name|panel
init|=
name|panelType
decl_stmt|;
if|if
condition|(
name|panel
operator|==
literal|null
condition|)
block|{
name|int
name|c
init|=
name|token
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
name|panel
operator|=
literal|0
operator|<=
name|c
condition|?
name|token
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
else|:
literal|""
expr_stmt|;
block|}
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|PatchScreen
operator|.
name|SideBySide
argument_list|(
comment|//
name|id
argument_list|,
comment|//
name|patchIndex
argument_list|,
comment|//
name|patchSetDetail
argument_list|,
comment|//
name|patchTable
argument_list|,
comment|//
name|top
comment|//
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
literal|"unified"
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|PatchScreen
operator|.
name|Unified
argument_list|(
comment|//
name|id
argument_list|,
comment|//
name|patchIndex
argument_list|,
comment|//
name|patchSetDetail
argument_list|,
comment|//
name|patchTable
argument_list|,
comment|//
name|top
comment|//
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|settings (String token)
specifier|private
specifier|static
name|void
name|settings
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|select
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|select
parameter_list|()
block|{
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyProfileScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_PREFERENCES
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyPreferencesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_PROJECTS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyWatchedProjectsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_CONTACT
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyContactInformationScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_SSHKEYS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MySshKeysScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_WEBIDENT
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyIdentitiesScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_HTTP_PASSWORD
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyPasswordScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_MYGROUPS
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|MyGroupsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_AGREEMENTS
argument_list|,
name|token
argument_list|)
operator|&&
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|isUseContributorAgreements
argument_list|()
condition|)
block|{
return|return
operator|new
name|MyAgreementsScreen
argument_list|()
return|;
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|REGISTER
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"register"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegisterScreen
argument_list|(
name|MINE
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/register/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|RegisterScreen
argument_list|(
literal|"/"
operator|+
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/VE/"
argument_list|,
name|token
argument_list|)
operator|||
name|matchPrefix
argument_list|(
literal|"VE,"
argument_list|,
name|token
argument_list|)
condition|)
return|return
operator|new
name|ValidateEmailScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/SignInFailure,"
argument_list|,
name|token
argument_list|)
condition|)
block|{
specifier|final
name|String
index|[]
name|args
init|=
name|skip
argument_list|(
name|token
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
specifier|final
name|SignInMode
name|mode
init|=
name|SignInMode
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
name|KeyUtil
operator|.
name|decode
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|to
init|=
name|MINE
decl_stmt|;
switch|switch
condition|(
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getAuthType
argument_list|()
condition|)
block|{
case|case
name|OPENID
case|:
operator|new
name|OpenIdSignInDialog
argument_list|(
name|mode
argument_list|,
name|to
argument_list|,
name|msg
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
break|break;
case|case
name|LDAP
case|:
case|case
name|LDAP_BIND
case|:
operator|new
name|UserPassSignInDialog
argument_list|(
name|to
argument_list|,
name|msg
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
break|break;
default|default:
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|mode
condition|)
block|{
case|case
name|SIGN_IN
case|:
return|return
name|QueryScreen
operator|.
name|forQuery
argument_list|(
literal|"status:open"
argument_list|)
return|;
case|case
name|LINK_IDENTIY
case|:
return|return
operator|new
name|MyIdentitiesScreen
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|matchExact
argument_list|(
name|SETTINGS_NEW_AGREEMENT
argument_list|,
name|token
argument_list|)
condition|)
return|return
operator|new
name|NewAgreementScreen
argument_list|()
return|;
if|if
condition|(
name|matchPrefix
argument_list|(
name|SETTINGS_NEW_AGREEMENT
operator|+
literal|"/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
return|return
operator|new
name|NewAgreementScreen
argument_list|(
name|skip
argument_list|(
name|token
argument_list|)
argument_list|)
return|;
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|admin (String token)
specifier|private
specifier|static
name|void
name|admin
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|GWT
operator|.
name|runAsync
argument_list|(
operator|new
name|AsyncSplit
argument_list|(
name|token
argument_list|)
block|{
specifier|public
name|void
name|onSuccess
parameter_list|()
block|{
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_GROUPS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/groups"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|GroupListScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/groups/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|group
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_PROJECTS
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/projects"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|ProjectListScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/projects/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
name|selectProject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matchExact
argument_list|(
name|ADMIN_CREATE_PROJECT
argument_list|,
name|token
argument_list|)
operator|||
name|matchExact
argument_list|(
literal|"/admin/create-project"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|CreateProjectScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|group
parameter_list|()
block|{
specifier|final
name|String
name|panel
decl_stmt|;
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
literal|null
decl_stmt|;
name|AccountGroup
operator|.
name|UUID
name|groupUUID
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/groups/uuid-"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|p
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|groupUUID
operator|=
name|AccountGroup
operator|.
name|UUID
operator|.
name|parse
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|panel
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|groupUUID
operator|=
name|AccountGroup
operator|.
name|UUID
operator|.
name|parse
argument_list|(
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|=
name|p
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/groups/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|p
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|p
operator|.
name|indexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
name|groupId
operator|=
name|AccountGroup
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|panel
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|groupId
operator|=
name|AccountGroup
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|p
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|panel
operator|=
name|p
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|Util
operator|.
name|GROUP_SVC
operator|.
name|groupDetail
argument_list|(
name|groupId
argument_list|,
name|groupUUID
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|GroupDetail
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|GroupDetail
name|groupDetail
parameter_list|)
block|{
if|if
condition|(
name|panel
operator|==
literal|null
operator|||
name|panel
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// The token does not say which group screen should be shown,
comment|// as default for internal groups show the members, as default
comment|// for external and system groups show the info screen (since
comment|// for external and system groups the members cannot be
comment|// shown in the web UI).
comment|//
if|if
condition|(
name|groupDetail
operator|.
name|group
operator|.
name|getType
argument_list|()
operator|==
name|AccountGroup
operator|.
name|Type
operator|.
name|INTERNAL
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|toGroup
argument_list|(
name|groupDetail
operator|.
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|AccountGroupScreen
operator|.
name|MEMBERS
argument_list|)
argument_list|,
operator|new
name|AccountGroupMembersScreen
argument_list|(
name|groupDetail
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|toGroup
argument_list|(
name|groupDetail
operator|.
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|AccountGroupScreen
operator|.
name|INFO
argument_list|)
argument_list|,
operator|new
name|AccountGroupInfoScreen
argument_list|(
name|groupDetail
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|AccountGroupScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountGroupInfoScreen
argument_list|(
name|groupDetail
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|AccountGroupScreen
operator|.
name|MEMBERS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|AccountGroupMembersScreen
argument_list|(
name|groupDetail
argument_list|,
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|,
operator|new
name|NotFoundScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Screen
name|selectProject
parameter_list|()
block|{
if|if
condition|(
name|matchPrefix
argument_list|(
literal|"/admin/projects/"
argument_list|,
name|token
argument_list|)
condition|)
block|{
name|String
name|rest
init|=
name|skip
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|int
name|c
init|=
name|rest
operator|.
name|lastIndexOf
argument_list|(
literal|','
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|ProjectInfoScreen
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
name|Project
operator|.
name|NameKey
name|k
init|=
name|Project
operator|.
name|NameKey
operator|.
name|parse
argument_list|(
name|rest
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|c
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|panel
init|=
name|rest
operator|.
name|substring
argument_list|(
name|c
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ProjectScreen
operator|.
name|INFO
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectInfoScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|BRANCH
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
operator|&&
operator|!
name|k
operator|.
name|equals
argument_list|(
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getWildProject
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectBranchesScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
if|if
condition|(
name|ProjectScreen
operator|.
name|ACCESS
operator|.
name|equals
argument_list|(
name|panel
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProjectAccessScreen
argument_list|(
name|k
argument_list|)
return|;
block|}
block|}
return|return
operator|new
name|NotFoundScreen
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|matchExact (String want, String token)
specifier|private
specifier|static
name|boolean
name|matchExact
parameter_list|(
name|String
name|want
parameter_list|,
name|String
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|equals
argument_list|(
name|want
argument_list|)
return|;
block|}
DECL|field|prefixlen
specifier|private
specifier|static
name|int
name|prefixlen
decl_stmt|;
DECL|method|matchPrefix (String want, String token)
specifier|private
specifier|static
name|boolean
name|matchPrefix
parameter_list|(
name|String
name|want
parameter_list|,
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
name|want
argument_list|)
condition|)
block|{
name|prefixlen
operator|=
name|want
operator|.
name|length
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|skip (String token)
specifier|private
specifier|static
name|String
name|skip
parameter_list|(
name|String
name|token
parameter_list|)
block|{
return|return
name|token
operator|.
name|substring
argument_list|(
name|prefixlen
argument_list|)
return|;
block|}
DECL|class|AsyncSplit
specifier|private
specifier|static
specifier|abstract
class|class
name|AsyncSplit
implements|implements
name|RunAsyncCallback
block|{
DECL|field|isReloadUi
specifier|private
specifier|final
name|boolean
name|isReloadUi
decl_stmt|;
DECL|field|token
specifier|protected
specifier|final
name|String
name|token
decl_stmt|;
DECL|method|AsyncSplit (String token)
specifier|protected
name|AsyncSplit
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|this
operator|.
name|isReloadUi
operator|=
name|wasStartedByReloadUI
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
block|}
DECL|method|onFailure (Throwable reason)
specifier|public
specifier|final
name|void
name|onFailure
parameter_list|(
name|Throwable
name|reason
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isReloadUi
operator|&&
literal|"HTTP download failed with status 404"
operator|.
name|equals
argument_list|(
name|reason
operator|.
name|getMessage
argument_list|()
argument_list|)
condition|)
block|{
comment|// The server was upgraded since we last download the main script,
comment|// so the pointers to the splits aren't valid anymore.  Force the
comment|// page to reload itself and pick up the new code.
comment|//
name|Gerrit
operator|.
name|upgradeUI
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|ErrorDialog
argument_list|(
name|reason
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

