begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|CommentRange
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|storage
operator|.
name|client
operator|.
name|Storage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_class
DECL|class|LocalComments
specifier|public
class|class
name|LocalComments
block|{
DECL|field|project
annotation|@
name|Nullable
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|storage
specifier|private
specifier|final
name|StorageBackend
name|storage
decl_stmt|;
DECL|class|InlineComment
specifier|private
specifier|static
class|class
name|InlineComment
block|{
DECL|field|project
annotation|@
name|Nullable
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|psId
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|commentInfo
specifier|final
name|CommentInfo
name|commentInfo
decl_stmt|;
DECL|method|InlineComment (@ullable Project.NameKey project, PatchSet.Id psId, CommentInfo commentInfo)
name|InlineComment
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|CommentInfo
name|commentInfo
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
name|this
operator|.
name|commentInfo
operator|=
name|commentInfo
expr_stmt|;
block|}
block|}
DECL|class|StorageBackend
specifier|private
specifier|static
class|class
name|StorageBackend
block|{
DECL|field|storageBackend
specifier|private
specifier|final
name|Storage
name|storageBackend
decl_stmt|;
DECL|method|StorageBackend ()
name|StorageBackend
parameter_list|()
block|{
name|storageBackend
operator|=
operator|(
name|Storage
operator|.
name|isLocalStorageSupported
argument_list|()
operator|)
condition|?
name|Storage
operator|.
name|getLocalStorageIfSupported
argument_list|()
else|:
name|Storage
operator|.
name|getSessionStorageIfSupported
argument_list|()
expr_stmt|;
block|}
DECL|method|getItem (String key)
name|String
name|getItem
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|storageBackend
operator|==
literal|null
condition|)
block|{
return|return
name|Cookies
operator|.
name|getCookie
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|storageBackend
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
return|;
block|}
DECL|method|setItem (String key, String value)
name|void
name|setItem
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|storageBackend
operator|==
literal|null
condition|)
block|{
name|Cookies
operator|.
name|setCookie
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return;
block|}
name|storageBackend
operator|.
name|setItem
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|removeItem (String key)
name|void
name|removeItem
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|storageBackend
operator|==
literal|null
condition|)
block|{
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return;
block|}
name|storageBackend
operator|.
name|removeItem
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|getKeys ()
name|Collection
argument_list|<
name|String
argument_list|>
name|getKeys
parameter_list|()
block|{
if|if
condition|(
name|storageBackend
operator|==
literal|null
condition|)
block|{
return|return
name|Cookies
operator|.
name|getCookieNames
argument_list|()
return|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|storageBackend
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|storageBackend
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|storageBackend
operator|.
name|key
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
DECL|method|LocalComments (@ullable Project.NameKey project, Change.Id changeId)
specifier|public
name|LocalComments
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Change
operator|.
name|Id
name|changeId
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|changeId
expr_stmt|;
name|this
operator|.
name|psId
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|storage
operator|=
operator|new
name|StorageBackend
argument_list|()
expr_stmt|;
block|}
DECL|method|LocalComments (@ullable Project.NameKey project, PatchSet.Id psId)
specifier|public
name|LocalComments
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|psId
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
name|this
operator|.
name|storage
operator|=
operator|new
name|StorageBackend
argument_list|()
expr_stmt|;
block|}
DECL|method|getReplyComment ()
specifier|public
name|String
name|getReplyComment
parameter_list|()
block|{
name|String
name|comment
init|=
name|storage
operator|.
name|getItem
argument_list|(
name|getReplyCommentName
argument_list|()
argument_list|)
decl_stmt|;
name|storage
operator|.
name|removeItem
argument_list|(
name|getReplyCommentName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|comment
return|;
block|}
DECL|method|setReplyComment (String comment)
specifier|public
name|void
name|setReplyComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|storage
operator|.
name|setItem
argument_list|(
name|getReplyCommentName
argument_list|()
argument_list|,
name|comment
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hasReplyComment ()
specifier|public
name|boolean
name|hasReplyComment
parameter_list|()
block|{
return|return
name|storage
operator|.
name|getKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|getReplyCommentName
argument_list|()
argument_list|)
return|;
block|}
DECL|method|removeReplyComment ()
specifier|public
name|void
name|removeReplyComment
parameter_list|()
block|{
if|if
condition|(
name|hasReplyComment
argument_list|()
condition|)
block|{
name|storage
operator|.
name|removeItem
argument_list|(
name|getReplyCommentName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getReplyCommentName ()
specifier|private
name|String
name|getReplyCommentName
parameter_list|()
block|{
return|return
literal|"savedReplyComment~"
operator|+
name|PageLinks
operator|.
name|toChangeId
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
return|;
block|}
DECL|method|saveInlineComments ()
specifier|public
specifier|static
name|void
name|saveInlineComments
parameter_list|()
block|{
specifier|final
name|StorageBackend
name|storage
init|=
operator|new
name|StorageBackend
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|cookie
range|:
name|storage
operator|.
name|getKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|isInlineComment
argument_list|(
name|cookie
argument_list|)
condition|)
block|{
name|InlineComment
name|input
init|=
name|getInlineComment
argument_list|(
name|cookie
argument_list|)
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|commentInfo
operator|.
name|id
argument_list|()
operator|==
literal|null
condition|)
block|{
name|CommentApi
operator|.
name|createDraft
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|input
operator|.
name|project
argument_list|)
argument_list|,
name|input
operator|.
name|psId
argument_list|,
name|input
operator|.
name|commentInfo
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CommentInfo
name|result
parameter_list|)
block|{
name|storage
operator|.
name|removeItem
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CommentApi
operator|.
name|updateDraft
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|input
operator|.
name|project
argument_list|)
argument_list|,
name|input
operator|.
name|psId
argument_list|,
name|input
operator|.
name|commentInfo
operator|.
name|id
argument_list|()
argument_list|,
name|input
operator|.
name|commentInfo
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|CommentInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|CommentInfo
name|result
parameter_list|)
block|{
name|storage
operator|.
name|removeItem
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|RestApi
operator|.
name|isNotFound
argument_list|(
name|caught
argument_list|)
condition|)
block|{
comment|// the draft comment, that was supposed to be updated,
comment|// was deleted in the meantime
name|storage
operator|.
name|removeItem
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setInlineComment (CommentInfo comment)
specifier|public
name|void
name|setInlineComment
parameter_list|(
name|CommentInfo
name|comment
parameter_list|)
block|{
name|String
name|name
init|=
name|getInlineCommentName
argument_list|(
name|comment
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
comment|// Failed to get the store key -- so we can't continue.
return|return;
block|}
name|storage
operator|.
name|setItem
argument_list|(
name|name
argument_list|,
name|comment
operator|.
name|message
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|hasInlineComments ()
specifier|public
name|boolean
name|hasInlineComments
parameter_list|()
block|{
for|for
control|(
name|String
name|cookie
range|:
name|storage
operator|.
name|getKeys
argument_list|()
control|)
block|{
if|if
condition|(
name|isInlineComment
argument_list|(
name|cookie
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isInlineComment (String key)
specifier|private
specifier|static
name|boolean
name|isInlineComment
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchCommentEdit~"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchReply~"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchComment~"
argument_list|)
return|;
block|}
DECL|method|getInlineComment (String key)
specifier|private
specifier|static
name|InlineComment
name|getInlineComment
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|String
name|path
decl_stmt|;
name|Side
name|side
init|=
name|Side
operator|.
name|PARENT
decl_stmt|;
name|int
name|line
init|=
literal|0
decl_stmt|;
name|CommentRange
name|range
decl_stmt|;
name|StorageBackend
name|storage
init|=
operator|new
name|StorageBackend
argument_list|()
decl_stmt|;
name|String
index|[]
name|elements
init|=
name|key
operator|.
name|split
argument_list|(
literal|"~"
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchReply~"
argument_list|)
operator|||
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchCommentEdit~"
argument_list|)
condition|)
block|{
name|offset
operator|=
literal|2
expr_stmt|;
block|}
name|ProjectChangeId
name|id
init|=
name|ProjectChangeId
operator|.
name|create
argument_list|(
name|elements
index|[
name|offset
operator|+
literal|0
index|]
argument_list|)
decl_stmt|;
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|id
operator|.
name|getChangeId
argument_list|()
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
name|offset
operator|+
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|atob
argument_list|(
name|elements
index|[
name|offset
operator|+
literal|2
index|]
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|Side
operator|.
name|PARENT
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|elements
index|[
name|offset
operator|+
literal|3
index|]
argument_list|)
operator|)
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
expr_stmt|;
name|range
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|elements
index|[
name|offset
operator|+
literal|4
index|]
operator|.
name|startsWith
argument_list|(
literal|"R"
argument_list|)
condition|)
block|{
name|String
name|rangeStart
init|=
name|elements
index|[
name|offset
operator|+
literal|4
index|]
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|rangeEnd
init|=
name|elements
index|[
name|offset
operator|+
literal|5
index|]
decl_stmt|;
name|String
index|[]
name|split
init|=
name|rangeStart
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|int
name|sl
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|sc
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|split
operator|=
name|rangeEnd
operator|.
name|split
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|int
name|el
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|ec
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|split
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|range
operator|=
name|CommentRange
operator|.
name|create
argument_list|(
name|sl
argument_list|,
name|sc
argument_list|,
name|el
argument_list|,
name|ec
argument_list|)
expr_stmt|;
name|line
operator|=
name|sl
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|elements
index|[
name|offset
operator|+
literal|4
index|]
argument_list|)
expr_stmt|;
block|}
name|CommentInfo
name|info
init|=
name|CommentInfo
operator|.
name|create
argument_list|(
name|path
argument_list|,
name|side
argument_list|,
name|line
argument_list|,
name|range
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|info
operator|.
name|message
argument_list|(
name|storage
operator|.
name|getItem
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchReply~"
argument_list|)
condition|)
block|{
name|info
operator|.
name|inReplyTo
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"patchCommentEdit~"
argument_list|)
condition|)
block|{
name|info
operator|.
name|id
argument_list|(
name|elements
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|InlineComment
name|inlineComment
init|=
operator|new
name|InlineComment
argument_list|(
name|id
operator|.
name|getProject
argument_list|()
argument_list|,
name|psId
argument_list|,
name|info
argument_list|)
decl_stmt|;
return|return
name|inlineComment
return|;
block|}
DECL|method|getInlineCommentName (CommentInfo comment)
specifier|private
name|String
name|getInlineCommentName
parameter_list|(
name|CommentInfo
name|comment
parameter_list|)
block|{
if|if
condition|(
name|psId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|result
init|=
literal|"patchComment~"
decl_stmt|;
if|if
condition|(
name|comment
operator|.
name|id
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|"patchCommentEdit~"
operator|+
name|comment
operator|.
name|id
argument_list|()
operator|+
literal|"~"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comment
operator|.
name|inReplyTo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
literal|"patchReply~"
operator|+
name|comment
operator|.
name|inReplyTo
argument_list|()
operator|+
literal|"~"
expr_stmt|;
block|}
name|result
operator|+=
name|PageLinks
operator|.
name|toChangeId
argument_list|(
name|project
argument_list|,
name|changeId
argument_list|)
expr_stmt|;
name|result
operator|+=
literal|"~"
operator|+
name|psId
operator|.
name|getId
argument_list|()
operator|+
literal|"~"
operator|+
name|btoa
argument_list|(
name|comment
operator|.
name|path
argument_list|()
argument_list|)
operator|+
literal|"~"
operator|+
name|comment
operator|.
name|side
argument_list|()
operator|+
literal|"~"
expr_stmt|;
if|if
condition|(
name|comment
operator|.
name|hasRange
argument_list|()
condition|)
block|{
name|result
operator|+=
literal|"R"
operator|+
name|comment
operator|.
name|range
argument_list|()
operator|.
name|startLine
argument_list|()
operator|+
literal|","
operator|+
name|comment
operator|.
name|range
argument_list|()
operator|.
name|startCharacter
argument_list|()
operator|+
literal|"~"
operator|+
name|comment
operator|.
name|range
argument_list|()
operator|.
name|endLine
argument_list|()
operator|+
literal|","
operator|+
name|comment
operator|.
name|range
argument_list|()
operator|.
name|endCharacter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|+=
name|comment
operator|.
name|line
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|btoa (String a)
specifier|private
specifier|static
specifier|native
name|String
name|btoa
parameter_list|(
name|String
name|a
parameter_list|)
comment|/*-{ return btoa(a); }-*/
function_decl|;
DECL|method|atob (String b)
specifier|private
specifier|static
specifier|native
name|String
name|atob
parameter_list|(
name|String
name|b
parameter_list|)
comment|/*-{ return atob(b); }-*/
function_decl|;
block|}
end_class

end_unit

