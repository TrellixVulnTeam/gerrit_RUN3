begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
operator|.
name|KEY_ENTER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ReviewInput
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ReviewInput
operator|.
name|DraftHandling
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|ApprovalInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|LabelInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|LabelValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOutHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseOverHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|resources
operator|.
name|client
operator|.
name|CssResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|PopupPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RadioButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ScrollPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextArea
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_class
DECL|class|ReplyBox
specifier|public
class|class
name|ReplyBox
extends|extends
name|Composite
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|ReplyBox
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|interface|Styles
interface|interface
name|Styles
extends|extends
name|CssResource
block|{
DECL|method|label_name ()
name|String
name|label_name
parameter_list|()
function_decl|;
DECL|method|label_value ()
name|String
name|label_value
parameter_list|()
function_decl|;
DECL|method|label_help ()
name|String
name|label_help
parameter_list|()
function_decl|;
block|}
DECL|field|clp
specifier|private
specifier|final
name|CommentLinkProcessor
name|clp
decl_stmt|;
DECL|field|psId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|String
name|revision
decl_stmt|;
DECL|field|in
specifier|private
name|ReviewInput
name|in
init|=
name|ReviewInput
operator|.
name|create
argument_list|()
decl_stmt|;
DECL|field|labelHelpColumn
specifier|private
name|int
name|labelHelpColumn
decl_stmt|;
DECL|field|lc
specifier|private
name|LocalComments
name|lc
decl_stmt|;
DECL|field|style
annotation|@
name|UiField
name|Styles
name|style
decl_stmt|;
DECL|field|message
annotation|@
name|UiField
name|TextArea
name|message
decl_stmt|;
DECL|field|labelsParent
annotation|@
name|UiField
name|Element
name|labelsParent
decl_stmt|;
DECL|field|labelsTable
annotation|@
name|UiField
name|Grid
name|labelsTable
decl_stmt|;
DECL|field|post
annotation|@
name|UiField
name|Button
name|post
decl_stmt|;
DECL|field|cancel
annotation|@
name|UiField
name|Button
name|cancel
decl_stmt|;
DECL|field|commentsPanel
annotation|@
name|UiField
name|ScrollPanel
name|commentsPanel
decl_stmt|;
DECL|field|comments
annotation|@
name|UiField
name|FlowPanel
name|comments
decl_stmt|;
DECL|method|ReplyBox ( CommentLinkProcessor clp, PatchSet.Id psId, String revision, NativeMap<LabelInfo> all, NativeMap<JsArrayString> permitted)
name|ReplyBox
parameter_list|(
name|CommentLinkProcessor
name|clp
parameter_list|,
name|PatchSet
operator|.
name|Id
name|psId
parameter_list|,
name|String
name|revision
parameter_list|,
name|NativeMap
argument_list|<
name|LabelInfo
argument_list|>
name|all
parameter_list|,
name|NativeMap
argument_list|<
name|JsArrayString
argument_list|>
name|permitted
parameter_list|)
block|{
name|this
operator|.
name|clp
operator|=
name|clp
expr_stmt|;
name|this
operator|.
name|psId
operator|=
name|psId
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|lc
operator|=
operator|new
name|LocalComments
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|permitted
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|UIObject
operator|.
name|setVisible
argument_list|(
name|labelsParent
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|renderLabels
argument_list|(
name|names
argument_list|,
name|all
argument_list|,
name|permitted
argument_list|)
expr_stmt|;
block|}
name|addDomHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|e
parameter_list|)
block|{
name|e
operator|.
name|stopPropagation
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|e
operator|.
name|getCharCode
argument_list|()
operator|==
literal|'\n'
operator|||
name|e
operator|.
name|getCharCode
argument_list|()
operator|==
name|KEY_ENTER
operator|)
operator|&&
name|e
operator|.
name|isControlKeyDown
argument_list|()
condition|)
block|{
name|e
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
if|if
condition|(
name|post
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|onPost
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|,
name|KeyPressEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|commentsPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|post
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|lc
operator|.
name|hasReplyComment
argument_list|()
condition|)
block|{
name|message
operator|.
name|setText
argument_list|(
name|lc
operator|.
name|getReplyComment
argument_list|()
argument_list|)
expr_stmt|;
name|lc
operator|.
name|removeReplyComment
argument_list|()
expr_stmt|;
block|}
name|ChangeApi
operator|.
name|drafts
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|displayComments
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|post
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|post
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|message
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleFixedDelay
argument_list|(
operator|new
name|RepeatingCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
name|String
name|t
init|=
name|message
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|message
operator|.
name|setCursorPos
argument_list|(
name|t
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"post"
argument_list|)
DECL|method|onPost (@uppressWarningsR) ClickEvent e)
name|void
name|onPost
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|postReview
argument_list|()
expr_stmt|;
block|}
DECL|method|quickApprove (ReviewInput quickApproveInput)
name|void
name|quickApprove
parameter_list|(
name|ReviewInput
name|quickApproveInput
parameter_list|)
block|{
name|in
operator|.
name|mergeLabels
argument_list|(
name|quickApproveInput
argument_list|)
expr_stmt|;
name|postReview
argument_list|()
expr_stmt|;
block|}
DECL|method|hasMessage ()
name|boolean
name|hasMessage
parameter_list|()
block|{
return|return
operator|!
name|message
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|postReview ()
specifier|private
name|void
name|postReview
parameter_list|()
block|{
name|in
operator|.
name|message
argument_list|(
name|message
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
comment|// Don't send any comments in the request; just publish everything, even if
comment|// e.g. a draft was modified in another tab since we last looked it up.
name|in
operator|.
name|drafts
argument_list|(
name|DraftHandling
operator|.
name|PUBLISH_ALL_REVISIONS
argument_list|)
expr_stmt|;
name|in
operator|.
name|prePost
argument_list|()
expr_stmt|;
name|ChangeApi
operator|.
name|revision
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|,
name|revision
argument_list|)
operator|.
name|view
argument_list|(
literal|"review"
argument_list|)
operator|.
name|post
argument_list|(
name|in
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ReviewInput
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ReviewInput
name|result
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|psId
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|RestApi
operator|.
name|isNotSignedIn
argument_list|(
name|caught
argument_list|)
condition|)
block|{
name|lc
operator|.
name|setReplyComment
argument_list|(
name|message
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"cancel"
argument_list|)
DECL|method|onCancel (@uppressWarningsR) ClickEvent e)
name|void
name|onCancel
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|message
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|hide
argument_list|()
expr_stmt|;
block|}
DECL|method|replyTo (MessageInfo msg)
name|void
name|replyTo
parameter_list|(
name|MessageInfo
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|.
name|message
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|t
init|=
name|message
operator|.
name|getText
argument_list|()
decl_stmt|;
name|String
name|m
init|=
name|quote
argument_list|(
name|removePatchSetHeaderLine
argument_list|(
name|msg
operator|.
name|message
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
operator|||
name|t
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|endsWith
argument_list|(
literal|"\n\n"
argument_list|)
condition|)
block|{
name|t
operator|+=
name|m
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|endsWith
argument_list|(
literal|"\n"
argument_list|)
condition|)
block|{
name|t
operator|+=
literal|"\n"
operator|+
name|m
expr_stmt|;
block|}
else|else
block|{
name|t
operator|+=
literal|"\n\n"
operator|+
name|m
expr_stmt|;
block|}
name|message
operator|.
name|setText
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|removePatchSetHeaderLine (String msg)
specifier|private
specifier|static
name|String
name|removePatchSetHeaderLine
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|msg
operator|=
name|msg
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
name|msg
operator|.
name|startsWith
argument_list|(
literal|"Patch Set "
argument_list|)
condition|)
block|{
name|int
name|i
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|msg
operator|=
name|msg
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|msg
return|;
block|}
DECL|method|quote (String msg)
specifier|public
specifier|static
name|String
name|quote
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|msg
operator|=
name|msg
operator|.
name|trim
argument_list|()
expr_stmt|;
name|StringBuilder
name|quotedMsg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|msg
operator|.
name|split
argument_list|(
literal|"\\n"
argument_list|)
control|)
block|{
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
while|while
condition|(
name|line
operator|.
name|length
argument_list|()
operator|>
literal|67
condition|)
block|{
name|int
name|i
init|=
name|line
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|,
literal|67
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|50
condition|)
block|{
name|i
operator|=
name|line
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
literal|67
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|quotedMsg
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|quotedMsg
operator|.
name|append
argument_list|(
literal|"> "
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|quotedMsg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
return|return
name|quotedMsg
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|hide ()
specifier|private
name|void
name|hide
parameter_list|()
block|{
for|for
control|(
name|Widget
name|w
init|=
name|getParent
argument_list|()
init|;
name|w
operator|!=
literal|null
condition|;
name|w
operator|=
name|w
operator|.
name|getParent
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|instanceof
name|PopupPanel
condition|)
block|{
operator|(
operator|(
name|PopupPanel
operator|)
name|w
operator|)
operator|.
name|hide
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|renderLabels ( List<String> names, NativeMap<LabelInfo> all, NativeMap<JsArrayString> permitted)
specifier|private
name|void
name|renderLabels
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|NativeMap
argument_list|<
name|LabelInfo
argument_list|>
name|all
parameter_list|,
name|NativeMap
argument_list|<
name|JsArrayString
argument_list|>
name|permitted
parameter_list|)
block|{
name|TreeSet
argument_list|<
name|Short
argument_list|>
name|values
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|LabelAndValues
argument_list|>
name|labels
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|permitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|names
control|)
block|{
name|JsArrayString
name|p
init|=
name|permitted
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|Short
argument_list|>
name|a
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|add
argument_list|(
name|LabelInfo
operator|.
name|parseValue
argument_list|(
name|p
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|labels
operator|.
name|add
argument_list|(
operator|new
name|LabelAndValues
argument_list|(
name|all
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|values
operator|.
name|addAll
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Short
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|labelsTable
operator|.
name|resize
argument_list|(
literal|1
operator|+
name|labels
operator|.
name|size
argument_list|()
argument_list|,
literal|2
operator|+
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|labelsTable
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|c
argument_list|,
name|LabelValue
operator|.
name|formatValue
argument_list|(
name|columns
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|labelsTable
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|c
argument_list|,
name|style
operator|.
name|label_value
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|LabelAndValues
argument_list|>
name|checkboxes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|labels
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|row
init|=
literal|1
decl_stmt|;
for|for
control|(
name|LabelAndValues
name|lv
range|:
name|labels
control|)
block|{
if|if
condition|(
name|isCheckBox
argument_list|(
name|lv
operator|.
name|info
operator|.
name|valueSet
argument_list|()
argument_list|)
condition|)
block|{
name|checkboxes
operator|.
name|add
argument_list|(
name|lv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|renderRadio
argument_list|(
name|row
operator|++
argument_list|,
name|columns
argument_list|,
name|lv
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|LabelAndValues
name|lv
range|:
name|checkboxes
control|)
block|{
name|renderCheckBox
argument_list|(
name|row
operator|++
argument_list|,
name|lv
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|normalizeDefaultValue (Short defaultValue, Set<Short> permittedValues)
specifier|private
name|Short
name|normalizeDefaultValue
parameter_list|(
name|Short
name|defaultValue
parameter_list|,
name|Set
argument_list|<
name|Short
argument_list|>
name|permittedValues
parameter_list|)
block|{
name|Short
name|pmin
init|=
name|Collections
operator|.
name|min
argument_list|(
name|permittedValues
argument_list|)
decl_stmt|;
name|Short
name|pmax
init|=
name|Collections
operator|.
name|max
argument_list|(
name|permittedValues
argument_list|)
decl_stmt|;
name|Short
name|dv
init|=
name|defaultValue
decl_stmt|;
if|if
condition|(
name|dv
operator|>
name|pmax
condition|)
block|{
name|dv
operator|=
name|pmax
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dv
operator|<
name|pmin
condition|)
block|{
name|dv
operator|=
name|pmin
expr_stmt|;
block|}
return|return
name|dv
return|;
block|}
DECL|method|renderRadio (int row, List<Short> columns, LabelAndValues lv)
specifier|private
name|void
name|renderRadio
parameter_list|(
name|int
name|row
parameter_list|,
name|List
argument_list|<
name|Short
argument_list|>
name|columns
parameter_list|,
name|LabelAndValues
name|lv
parameter_list|)
block|{
name|String
name|id
init|=
name|lv
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
name|Short
name|dv
init|=
name|normalizeDefaultValue
argument_list|(
name|lv
operator|.
name|info
operator|.
name|defaultValue
argument_list|()
argument_list|,
name|lv
operator|.
name|permitted
argument_list|)
decl_stmt|;
name|labelHelpColumn
operator|=
literal|1
operator|+
name|columns
operator|.
name|size
argument_list|()
expr_stmt|;
name|labelsTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|CellFormatter
name|fmt
init|=
name|labelsTable
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|style
operator|.
name|label_name
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|style
operator|.
name|label_help
argument_list|()
argument_list|)
expr_stmt|;
name|ApprovalInfo
name|self
init|=
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|?
name|lv
operator|.
name|info
operator|.
name|forUser
argument_list|(
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|LabelRadioGroup
name|group
init|=
operator|new
name|LabelRadioGroup
argument_list|(
name|row
argument_list|,
name|id
argument_list|,
name|lv
operator|.
name|permitted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Short
name|v
init|=
name|columns
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|.
name|permitted
operator|.
name|contains
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|String
name|text
init|=
name|lv
operator|.
name|info
operator|.
name|valueText
argument_list|(
name|LabelValue
operator|.
name|formatValue
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|LabelRadioButton
name|b
init|=
operator|new
name|LabelRadioButton
argument_list|(
name|group
argument_list|,
name|text
argument_list|,
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|self
operator|!=
literal|null
operator|&&
name|v
operator|==
name|self
operator|.
name|value
argument_list|()
operator|)
operator|||
operator|(
name|self
operator|==
literal|null
operator|&&
name|v
operator|.
name|equals
argument_list|(
name|dv
argument_list|)
operator|)
condition|)
block|{
name|b
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group
operator|.
name|select
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
name|group
operator|.
name|label
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|labelsTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|b
operator|.
name|text
argument_list|)
expr_stmt|;
block|}
name|group
operator|.
name|buttons
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|labelsTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
operator|+
name|i
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|renderCheckBox (int row, LabelAndValues lv)
specifier|private
name|void
name|renderCheckBox
parameter_list|(
name|int
name|row
parameter_list|,
name|LabelAndValues
name|lv
parameter_list|)
block|{
name|ApprovalInfo
name|self
init|=
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|?
name|lv
operator|.
name|info
operator|.
name|forUser
argument_list|(
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|String
name|id
init|=
name|lv
operator|.
name|info
operator|.
name|name
argument_list|()
decl_stmt|;
specifier|final
name|CheckBox
name|b
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|b
operator|.
name|setText
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|b
operator|.
name|setEnabled
argument_list|(
name|lv
operator|.
name|permitted
operator|.
name|contains
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|self
operator|!=
literal|null
operator|&&
name|self
operator|.
name|value
argument_list|()
operator|==
literal|1
condition|)
block|{
name|b
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|in
operator|.
name|label
argument_list|(
name|id
argument_list|,
name|event
operator|.
name|getValue
argument_list|()
condition|?
operator|(
name|short
operator|)
literal|1
else|:
operator|(
name|short
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|b
operator|.
name|setStyleName
argument_list|(
name|style
operator|.
name|label_name
argument_list|()
argument_list|)
expr_stmt|;
name|labelsTable
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|CellFormatter
name|fmt
init|=
name|labelsTable
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|style
operator|.
name|label_help
argument_list|()
argument_list|)
expr_stmt|;
name|labelsTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|lv
operator|.
name|info
operator|.
name|valueText
argument_list|(
literal|"+1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isCheckBox (Set<Short> values)
specifier|private
specifier|static
name|boolean
name|isCheckBox
parameter_list|(
name|Set
argument_list|<
name|Short
argument_list|>
name|values
parameter_list|)
block|{
return|return
name|values
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|&&
name|values
operator|.
name|contains
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
operator|&&
name|values
operator|.
name|contains
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
return|;
block|}
DECL|method|displayComments (NativeMap<JsArray<CommentInfo>> m)
specifier|private
name|void
name|displayComments
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|m
parameter_list|)
block|{
name|comments
operator|.
name|clear
argument_list|()
expr_stmt|;
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|l
init|=
name|m
operator|.
name|get
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|comments
operator|.
name|add
argument_list|(
operator|new
name|FileComments
argument_list|(
name|clp
argument_list|,
name|psId
argument_list|,
name|Util
operator|.
name|C
operator|.
name|commitMessage
argument_list|()
argument_list|,
name|copyPath
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|,
name|l
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|m
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|paths
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
argument_list|)
condition|)
block|{
name|comments
operator|.
name|add
argument_list|(
operator|new
name|FileComments
argument_list|(
name|clp
argument_list|,
name|psId
argument_list|,
name|path
argument_list|,
name|copyPath
argument_list|(
name|path
argument_list|,
name|m
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|commentsPanel
operator|.
name|setVisible
argument_list|(
name|comments
operator|.
name|getWidgetCount
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|copyPath (String path, JsArray<CommentInfo> l)
specifier|private
specifier|static
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|copyPath
parameter_list|(
name|String
name|path
parameter_list|,
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|l
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|Natives
operator|.
name|asList
argument_list|(
name|l
argument_list|)
return|;
block|}
DECL|class|LabelAndValues
specifier|private
specifier|static
class|class
name|LabelAndValues
block|{
DECL|field|info
specifier|final
name|LabelInfo
name|info
decl_stmt|;
DECL|field|permitted
specifier|final
name|Set
argument_list|<
name|Short
argument_list|>
name|permitted
decl_stmt|;
DECL|method|LabelAndValues (LabelInfo info, Set<Short> permitted)
name|LabelAndValues
parameter_list|(
name|LabelInfo
name|info
parameter_list|,
name|Set
argument_list|<
name|Short
argument_list|>
name|permitted
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
name|this
operator|.
name|permitted
operator|=
name|permitted
expr_stmt|;
block|}
block|}
DECL|class|LabelRadioGroup
specifier|private
class|class
name|LabelRadioGroup
block|{
DECL|field|row
specifier|final
name|int
name|row
decl_stmt|;
DECL|field|label
specifier|final
name|String
name|label
decl_stmt|;
DECL|field|buttons
specifier|final
name|List
argument_list|<
name|LabelRadioButton
argument_list|>
name|buttons
decl_stmt|;
DECL|field|selected
name|LabelRadioButton
name|selected
decl_stmt|;
DECL|method|LabelRadioGroup (int row, String label, int cnt)
name|LabelRadioGroup
parameter_list|(
name|int
name|row
parameter_list|,
name|String
name|label
parameter_list|,
name|int
name|cnt
parameter_list|)
block|{
name|this
operator|.
name|row
operator|=
name|row
expr_stmt|;
name|this
operator|.
name|label
operator|=
name|label
expr_stmt|;
name|this
operator|.
name|buttons
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cnt
argument_list|)
expr_stmt|;
block|}
DECL|method|select (LabelRadioButton b)
name|void
name|select
parameter_list|(
name|LabelRadioButton
name|b
parameter_list|)
block|{
name|selected
operator|=
name|b
expr_stmt|;
name|labelsTable
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|b
operator|.
name|text
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|LabelRadioButton
specifier|private
class|class
name|LabelRadioButton
extends|extends
name|RadioButton
implements|implements
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
implements|,
name|ClickHandler
implements|,
name|MouseOverHandler
implements|,
name|MouseOutHandler
block|{
DECL|field|group
specifier|private
specifier|final
name|LabelRadioGroup
name|group
decl_stmt|;
DECL|field|text
specifier|private
specifier|final
name|String
name|text
decl_stmt|;
DECL|field|value
specifier|private
specifier|final
name|short
name|value
decl_stmt|;
DECL|method|LabelRadioButton (LabelRadioGroup group, String text, short value)
name|LabelRadioButton
parameter_list|(
name|LabelRadioGroup
name|group
parameter_list|,
name|String
name|text
parameter_list|,
name|short
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|group
operator|.
name|label
argument_list|)
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|text
operator|=
name|text
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|addValueChangeHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addMouseOverHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addMouseOutHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onValueChange (ValueChangeEvent<Boolean> event)
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|select
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onClick (ClickEvent event)
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|select
argument_list|()
expr_stmt|;
block|}
DECL|method|select ()
name|void
name|select
parameter_list|()
block|{
name|group
operator|.
name|select
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|in
operator|.
name|label
argument_list|(
name|group
operator|.
name|label
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMouseOver (MouseOverEvent event)
specifier|public
name|void
name|onMouseOver
parameter_list|(
name|MouseOverEvent
name|event
parameter_list|)
block|{
name|labelsTable
operator|.
name|setText
argument_list|(
name|group
operator|.
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMouseOut (MouseOutEvent event)
specifier|public
name|void
name|onMouseOut
parameter_list|(
name|MouseOutEvent
name|event
parameter_list|)
block|{
name|LabelRadioButton
name|b
init|=
name|group
operator|.
name|selected
decl_stmt|;
name|String
name|s
init|=
name|b
operator|!=
literal|null
condition|?
name|b
operator|.
name|text
else|:
literal|""
decl_stmt|;
name|labelsTable
operator|.
name|setText
argument_list|(
name|group
operator|.
name|row
argument_list|,
name|labelHelpColumn
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

