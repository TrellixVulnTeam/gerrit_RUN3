begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
operator|.
name|WHOLE_FILE_CONTEXT
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Double
operator|.
name|POSITIVE_INFINITY
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|JumpKeys
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|DiffPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|ChangeScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|FileTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
operator|.
name|EditInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffInfo
operator|.
name|FileMeta
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|LineMapper
operator|.
name|LineOnOtherInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|NativeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ResizeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ImageResourceRenderer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|ShowHelpCommand
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|BeforeSelectionChangeHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|GutterClickHandler
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineHandle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|KeyMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|mode
operator|.
name|ModeInfo
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|mode
operator|.
name|ModeInjector
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|theme
operator|.
name|ThemeLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|SideBySide
specifier|public
class|class
name|SideBySide
extends|extends
name|Screen
block|{
DECL|field|RENDER_ENTIRE_FILE_KEYMAP
specifier|private
specifier|static
specifier|final
name|KeyMap
name|RENDER_ENTIRE_FILE_KEYMAP
init|=
name|KeyMap
operator|.
name|create
argument_list|()
operator|.
name|propagate
argument_list|(
literal|"Ctrl-F"
argument_list|)
decl_stmt|;
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|FlowPanel
argument_list|,
name|SideBySide
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|enum|FileSize
enum|enum
name|FileSize
block|{
DECL|enumConstant|SMALL
name|SMALL
argument_list|(
literal|0
argument_list|)
block|,
DECL|enumConstant|LARGE
name|LARGE
argument_list|(
literal|500
argument_list|)
block|,
DECL|enumConstant|HUGE
name|HUGE
argument_list|(
literal|4000
argument_list|)
block|;
DECL|field|lines
specifier|final
name|int
name|lines
decl_stmt|;
DECL|method|FileSize (int n)
name|FileSize
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|this
operator|.
name|lines
operator|=
name|n
expr_stmt|;
block|}
block|}
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|header
name|Header
name|header
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|diffTable
name|DiffTable
name|diffTable
decl_stmt|;
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|startSide
specifier|private
name|DisplaySide
name|startSide
decl_stmt|;
DECL|field|startLine
specifier|private
name|int
name|startLine
decl_stmt|;
DECL|field|prefs
specifier|private
name|DiffPreferences
name|prefs
decl_stmt|;
DECL|field|changeStatus
specifier|private
name|Change
operator|.
name|Status
name|changeStatus
decl_stmt|;
DECL|field|cmA
specifier|private
name|CodeMirror
name|cmA
decl_stmt|;
DECL|field|cmB
specifier|private
name|CodeMirror
name|cmB
decl_stmt|;
DECL|field|resizeHandler
specifier|private
name|HandlerRegistration
name|resizeHandler
decl_stmt|;
DECL|field|scrollSynchronizer
specifier|private
name|ScrollSynchronizer
name|scrollSynchronizer
decl_stmt|;
DECL|field|diff
specifier|private
name|DiffInfo
name|diff
decl_stmt|;
DECL|field|fileSize
specifier|private
name|FileSize
name|fileSize
decl_stmt|;
DECL|field|edit
specifier|private
name|EditInfo
name|edit
decl_stmt|;
DECL|field|chunkManager
specifier|private
name|ChunkManager
name|chunkManager
decl_stmt|;
DECL|field|commentManager
specifier|private
name|CommentManager
name|commentManager
decl_stmt|;
DECL|field|skipManager
specifier|private
name|SkipManager
name|skipManager
decl_stmt|;
DECL|field|keysNavigation
specifier|private
name|KeyCommandSet
name|keysNavigation
decl_stmt|;
DECL|field|keysAction
specifier|private
name|KeyCommandSet
name|keysAction
decl_stmt|;
DECL|field|keysComment
specifier|private
name|KeyCommandSet
name|keysComment
decl_stmt|;
DECL|field|handlers
specifier|private
name|List
argument_list|<
name|HandlerRegistration
argument_list|>
name|handlers
decl_stmt|;
DECL|field|prefsAction
specifier|private
name|PreferencesAction
name|prefsAction
decl_stmt|;
DECL|field|reloadVersionId
specifier|private
name|int
name|reloadVersionId
decl_stmt|;
DECL|method|SideBySide ( PatchSet.Id base, PatchSet.Id revision, String path, DisplaySide startSide, int startLine)
specifier|public
name|SideBySide
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|DisplaySide
name|startSide
parameter_list|,
name|int
name|startLine
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|revision
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|startSide
operator|=
name|startSide
expr_stmt|;
name|this
operator|.
name|startLine
operator|=
name|startLine
expr_stmt|;
name|prefs
operator|=
name|DiffPreferences
operator|.
name|create
argument_list|(
name|Gerrit
operator|.
name|getAccountDiffPreference
argument_list|()
argument_list|)
expr_stmt|;
name|handlers
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|keysNavigation
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|=
operator|new
name|Header
argument_list|(
name|keysNavigation
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|diffTable
operator|=
operator|new
name|DiffTable
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|addDomHandler
argument_list|(
name|GlobalKey
operator|.
name|STOP_PROPAGATION
argument_list|,
name|KeyPressEvent
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|FileInfo
operator|.
name|getFileName
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|CallbackGroup
name|group1
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|CallbackGroup
name|group2
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|CodeMirror
operator|.
name|initLibrary
argument_list|(
name|group1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|themeCallback
init|=
name|group2
operator|.
name|addEmpty
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
comment|// Load theme after CM library to ensure theme can override CSS.
name|ThemeLoader
operator|.
name|loadTheme
argument_list|(
name|prefs
operator|.
name|theme
argument_list|()
argument_list|,
name|themeCallback
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{       }
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|group1
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
specifier|final
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|modeInjectorCb
init|=
name|group2
operator|.
name|addEmpty
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
name|diff
operator|=
name|diffInfo
expr_stmt|;
name|fileSize
operator|=
name|bucketFileSize
argument_list|(
name|diffInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
if|if
condition|(
name|fileSize
operator|.
name|compareTo
argument_list|(
name|FileSize
operator|.
name|SMALL
argument_list|)
operator|>
literal|0
condition|)
block|{
name|modeInjectorCb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|injectMode
argument_list|(
name|diffInfo
argument_list|,
name|modeInjectorCb
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|modeInjectorCb
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|ChangeApi
operator|.
name|edit
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|group2
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|EditInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|EditInfo
name|result
parameter_list|)
block|{
name|edit
operator|=
name|result
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{             }
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CommentsCollections
name|comments
init|=
operator|new
name|CommentsCollections
argument_list|()
decl_stmt|;
name|comments
operator|.
name|load
argument_list|(
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|,
name|group2
argument_list|)
expr_stmt|;
name|RestApi
name|call
init|=
name|ChangeApi
operator|.
name|detail
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeList
operator|.
name|addOptions
argument_list|(
name|call
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|ALL_REVISIONS
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|get
argument_list|(
name|group2
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ChangeInfo
name|info
parameter_list|)
block|{
name|changeStatus
operator|=
name|info
operator|.
name|status
argument_list|()
expr_stmt|;
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
operator|!=
literal|null
condition|)
block|{
name|edit
operator|.
name|set_name
argument_list|(
name|edit
operator|.
name|commit
argument_list|()
operator|.
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|set_edit
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|put
argument_list|(
name|edit
operator|.
name|name
argument_list|()
argument_list|,
name|RevisionInfo
operator|.
name|fromEdit
argument_list|(
name|edit
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|currentPatchSet
init|=
name|info
operator|.
name|revision
argument_list|(
name|info
operator|.
name|current_revision
argument_list|()
argument_list|)
operator|.
name|_number
argument_list|()
decl_stmt|;
name|JsArray
argument_list|<
name|RevisionInfo
argument_list|>
name|list
init|=
name|info
operator|.
name|revisions
argument_list|()
operator|.
name|values
argument_list|()
decl_stmt|;
name|RevisionInfo
operator|.
name|sortRevisionInfoByNumber
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|set
argument_list|(
name|prefs
argument_list|,
name|list
argument_list|,
name|diff
argument_list|,
name|edit
operator|!=
literal|null
argument_list|,
name|currentPatchSet
argument_list|,
name|changeStatus
operator|.
name|isOpen
argument_list|()
argument_list|,
name|diff
operator|.
name|binary
argument_list|()
argument_list|)
expr_stmt|;
name|header
operator|.
name|setChangeInfo
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{       }
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|changeId
argument_list|,
name|group2
operator|.
name|addFinal
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|(
name|SideBySide
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
name|ConfigInfoCache
operator|.
name|Entry
name|result
parameter_list|)
block|{
name|commentManager
operator|=
operator|new
name|CommentManager
argument_list|(
name|SideBySide
operator|.
name|this
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|,
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
argument_list|,
name|changeStatus
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
name|display
argument_list|(
name|comments
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|enable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|hideTopMenu
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|resizeHandler
operator|=
name|Window
operator|.
name|addResizeHandler
argument_list|(
operator|new
name|ResizeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onResize
parameter_list|(
name|ResizeEvent
name|event
parameter_list|)
block|{
name|resizeCodeMirror
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|resizeCodeMirror
argument_list|()
expr_stmt|;
name|chunkManager
operator|.
name|adjustPadding
argument_list|()
expr_stmt|;
name|cmA
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|cmB
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|setLineLength
argument_list|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|?
literal|72
else|:
name|prefs
operator|.
name|lineLength
argument_list|()
argument_list|)
expr_stmt|;
name|diffTable
operator|.
name|refresh
argument_list|()
expr_stmt|;
if|if
condition|(
name|startLine
operator|==
literal|0
condition|)
block|{
name|DiffChunkInfo
name|d
init|=
name|chunkManager
operator|.
name|getFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|d
operator|.
name|isEdit
argument_list|()
operator|&&
name|d
operator|.
name|getSide
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
condition|)
block|{
name|startSide
operator|=
name|DisplaySide
operator|.
name|B
expr_stmt|;
name|startLine
operator|=
name|lineOnOther
argument_list|(
name|d
operator|.
name|getSide
argument_list|()
argument_list|,
name|d
operator|.
name|getStart
argument_list|()
argument_list|)
operator|.
name|getLine
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|startSide
operator|=
name|d
operator|.
name|getSide
argument_list|()
expr_stmt|;
name|startLine
operator|=
name|d
operator|.
name|getStart
argument_list|()
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|startSide
operator|!=
literal|null
operator|&&
name|startLine
operator|>
literal|0
condition|)
block|{
name|CodeMirror
name|cm
init|=
name|getCmFromSide
argument_list|(
name|startSide
argument_list|)
decl_stmt|;
name|cm
operator|.
name|scrollToLine
argument_list|(
name|startLine
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cm
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cmA
operator|.
name|setCursor
argument_list|(
name|Pos
operator|.
name|create
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
name|prefs
operator|.
name|autoReview
argument_list|()
condition|)
block|{
name|header
operator|.
name|autoReview
argument_list|()
expr_stmt|;
block|}
name|prefetchNextFile
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
name|removeKeyHandlerRegistrations
argument_list|()
expr_stmt|;
if|if
condition|(
name|commentManager
operator|!=
literal|null
condition|)
block|{
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|commentManager
operator|.
name|saveAllDrafts
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|resizeHandler
operator|!=
literal|null
condition|)
block|{
name|resizeHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|resizeHandler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cmA
operator|!=
literal|null
condition|)
block|{
name|cmA
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cmB
operator|!=
literal|null
condition|)
block|{
name|cmB
operator|.
name|getWrapperElement
argument_list|()
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prefsAction
operator|!=
literal|null
condition|)
block|{
name|prefsAction
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
name|Window
operator|.
name|enableScrolling
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|setHeaderVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|enable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeyHandlerRegistrations ()
specifier|private
name|void
name|removeKeyHandlerRegistrations
parameter_list|()
block|{
for|for
control|(
name|HandlerRegistration
name|h
range|:
name|handlers
control|)
block|{
name|h
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
block|}
name|handlers
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|registerCmEvents (final CodeMirror cm)
specifier|private
name|void
name|registerCmEvents
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
name|cm
operator|.
name|on
argument_list|(
literal|"cursorActivity"
argument_list|,
name|updateActiveLine
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"focus"
argument_list|,
name|updateActiveLine
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|KeyMap
name|keyMap
init|=
name|KeyMap
operator|.
name|create
argument_list|()
operator|.
name|on
argument_list|(
literal|"A"
argument_list|,
name|upToChange
argument_list|(
literal|true
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"U"
argument_list|,
name|upToChange
argument_list|(
literal|false
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"["
argument_list|,
name|header
operator|.
name|navigate
argument_list|(
name|Direction
operator|.
name|PREV
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"]"
argument_list|,
name|header
operator|.
name|navigate
argument_list|(
name|Direction
operator|.
name|NEXT
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"R"
argument_list|,
name|header
operator|.
name|toggleReviewed
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"O"
argument_list|,
name|commentManager
operator|.
name|toggleOpenBox
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Enter"
argument_list|,
name|commentManager
operator|.
name|toggleOpenBox
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"N"
argument_list|,
name|maybeNextVimSearch
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"M"
argument_list|,
name|modifyInEditScreen
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"P"
argument_list|,
name|chunkManager
operator|.
name|diffChunkNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|PREV
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-A"
argument_list|,
name|diffTable
operator|.
name|toggleA
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-M"
argument_list|,
name|header
operator|.
name|reviewedAndNext
argument_list|()
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-N"
argument_list|,
name|maybePrevVimSearch
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-P"
argument_list|,
name|commentManager
operator|.
name|commentNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|PREV
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-O"
argument_list|,
name|commentManager
operator|.
name|openCloseAll
argument_list|(
name|cm
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-Left"
argument_list|,
name|moveCursorToSide
argument_list|(
name|cm
argument_list|,
name|DisplaySide
operator|.
name|A
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-Right"
argument_list|,
name|moveCursorToSide
argument_list|(
name|cm
argument_list|,
name|DisplaySide
operator|.
name|B
argument_list|)
argument_list|)
operator|.
name|on
argument_list|(
literal|"I"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
switch|switch
condition|(
name|getIntraLineStatus
argument_list|()
condition|)
block|{
case|case
name|OFF
case|:
case|case
name|OK
case|:
name|toggleShowIntraline
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"','"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|prefsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-/"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
operator|new
name|ShowHelpCommand
argument_list|()
operator|.
name|onKeyPress
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Space"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|handleKey
argument_list|(
literal|"<C-d>"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Shift-Space"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|handleKey
argument_list|(
literal|"<C-u>"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Ctrl-F"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|handleKey
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|on
argument_list|(
literal|"Ctrl-A"
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cm
operator|.
name|execCommand
argument_list|(
literal|"selectAll"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|.
name|get
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|cm
operator|.
name|on
argument_list|(
literal|"beforeSelectionChange"
argument_list|,
name|onSelectionChange
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|on
argument_list|(
literal|"gutterClick"
argument_list|,
name|onGutterClick
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
name|keyMap
operator|.
name|on
argument_list|(
literal|"C"
argument_list|,
name|commentManager
operator|.
name|insertNewDraft
argument_list|(
name|cm
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cm
operator|.
name|addKeyMap
argument_list|(
name|keyMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|renderEntireFile
argument_list|()
condition|)
block|{
name|cm
operator|.
name|addKeyMap
argument_list|(
name|RENDER_ENTIRE_FILE_KEYMAP
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onSelectionChange (final CodeMirror cm)
specifier|private
name|BeforeSelectionChangeHandler
name|onSelectionChange
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|BeforeSelectionChangeHandler
argument_list|()
block|{
specifier|private
name|InsertCommentBubble
name|bubble
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|Pos
name|anchor
parameter_list|,
name|Pos
name|head
parameter_list|)
block|{
if|if
condition|(
name|anchor
operator|.
name|equals
argument_list|(
name|head
argument_list|)
condition|)
block|{
if|if
condition|(
name|bubble
operator|!=
literal|null
condition|)
block|{
name|bubble
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|bubble
operator|==
literal|null
condition|)
block|{
name|init
argument_list|(
name|anchor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bubble
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|bubble
operator|.
name|position
argument_list|(
name|cm
operator|.
name|charCoords
argument_list|(
name|head
argument_list|,
literal|"local"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|(
name|Pos
name|anchor
parameter_list|)
block|{
name|bubble
operator|=
operator|new
name|InsertCommentBubble
argument_list|(
name|commentManager
argument_list|,
name|cm
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|bubble
argument_list|)
expr_stmt|;
name|cm
operator|.
name|addWidget
argument_list|(
name|anchor
argument_list|,
name|bubble
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToChangeCommand
argument_list|(
name|revision
argument_list|,
literal|0
argument_list|,
literal|'u'
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
name|KeyCodes
operator|.
name|KEY_LEFT
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|focusSideA
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
name|KeyCodes
operator|.
name|KEY_RIGHT
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|focusSideB
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|lineNext
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|linePrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'n'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkNext2
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'p'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkPrev2
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'n'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentNext
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'p'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentPrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'f'
argument_list|,
name|Gerrit
operator|.
name|C
operator|.
name|keySearch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'m'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|modifyInEditScreen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionActions
argument_list|()
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ENTER
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'o'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'o'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandAllCommentsOnCurrentLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleReviewed
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|header
operator|.
name|toggleReviewed
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'m'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|markAsReviewedAndGoToNext
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|header
operator|.
name|reviewedAndNext
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'a'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|openReply
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|upToChange
argument_list|(
literal|true
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_SHIFT
argument_list|,
literal|'a'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleSideA
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|diffTable
operator|.
name|toggleA
argument_list|()
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|','
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|showPreferences
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|prefsAction
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OFF
operator|||
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OK
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
literal|'i'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleIntraline
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|toggleShowIntraline
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'c'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentInsert
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|commentEditorSet
argument_list|()
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'s'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentSaveDraft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ESCAPE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentCancelEdit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keysComment
operator|=
literal|null
expr_stmt|;
block|}
name|removeKeyHandlerRegistrations
argument_list|()
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysAction
argument_list|)
argument_list|)
expr_stmt|;
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|keysComment
operator|!=
literal|null
condition|)
block|{
name|handlers
operator|.
name|add
argument_list|(
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|handlers
operator|.
name|add
argument_list|(
name|ShowHelpCommand
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|cmB
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|display (final CommentsCollections comments)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|CommentsCollections
name|comments
parameter_list|)
block|{
name|setThemeStyles
argument_list|(
name|prefs
operator|.
name|theme
argument_list|()
operator|.
name|isDark
argument_list|()
argument_list|)
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|showLineNumbers
argument_list|()
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cmA
operator|=
name|newCM
argument_list|(
name|diff
operator|.
name|meta_a
argument_list|()
argument_list|,
name|diff
operator|.
name|text_a
argument_list|()
argument_list|,
name|diffTable
operator|.
name|cmA
argument_list|)
expr_stmt|;
name|cmB
operator|=
name|newCM
argument_list|(
name|diff
operator|.
name|meta_b
argument_list|()
argument_list|,
name|diff
operator|.
name|text_b
argument_list|()
argument_list|,
name|diffTable
operator|.
name|cmB
argument_list|)
expr_stmt|;
name|cmA
operator|.
name|extras
argument_list|()
operator|.
name|side
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|extras
argument_list|()
operator|.
name|side
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|)
expr_stmt|;
name|setShowTabs
argument_list|(
name|prefs
operator|.
name|showTabs
argument_list|()
argument_list|)
expr_stmt|;
name|chunkManager
operator|=
operator|new
name|ChunkManager
argument_list|(
name|this
argument_list|,
name|cmA
argument_list|,
name|cmB
argument_list|,
name|diffTable
operator|.
name|scrollbar
argument_list|)
expr_stmt|;
name|skipManager
operator|=
operator|new
name|SkipManager
argument_list|(
name|this
argument_list|,
name|commentManager
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|renderEntireFile
argument_list|()
operator|&&
operator|!
name|canEnableRenderEntireFile
argument_list|(
name|prefs
argument_list|)
condition|)
block|{
comment|// CodeMirror is too slow to layout an entire huge file.
name|prefs
operator|.
name|renderEntireFile
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// Estimate initial CM3 height, fixed up in onShowView.
name|int
name|height
init|=
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|-
operator|(
name|Gerrit
operator|.
name|getHeaderFooterHeight
argument_list|()
operator|+
literal|18
operator|)
decl_stmt|;
name|cmA
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setHeight
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|commentManager
operator|.
name|render
argument_list|(
name|comments
argument_list|,
name|prefs
operator|.
name|expandAllComments
argument_list|()
argument_list|)
expr_stmt|;
name|skipManager
operator|.
name|render
argument_list|(
name|prefs
operator|.
name|context
argument_list|()
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|registerCmEvents
argument_list|(
name|cmA
argument_list|)
expr_stmt|;
name|registerCmEvents
argument_list|(
name|cmB
argument_list|)
expr_stmt|;
name|scrollSynchronizer
operator|=
operator|new
name|ScrollSynchronizer
argument_list|(
name|diffTable
argument_list|,
name|cmA
argument_list|,
name|cmB
argument_list|,
name|chunkManager
operator|.
name|getLineMapper
argument_list|()
argument_list|)
expr_stmt|;
name|prefsAction
operator|=
operator|new
name|PreferencesAction
argument_list|(
name|this
argument_list|,
name|prefs
argument_list|)
expr_stmt|;
name|header
operator|.
name|init
argument_list|(
name|prefsAction
argument_list|,
name|getLinks
argument_list|()
argument_list|,
name|diff
operator|.
name|side_by_side_web_links
argument_list|()
argument_list|)
expr_stmt|;
name|scrollSynchronizer
operator|.
name|setAutoHideDiffTableHeader
argument_list|(
name|prefs
operator|.
name|autoHideDiffTableHeader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
operator|&&
name|fileSize
operator|.
name|compareTo
argument_list|(
name|FileSize
operator|.
name|SMALL
argument_list|)
operator|>
literal|0
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleFixedDelay
argument_list|(
operator|new
name|RepeatingCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
operator|&&
name|isAttached
argument_list|()
condition|)
block|{
name|setSyntaxHighlighting
argument_list|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|,
literal|250
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getLinks ()
specifier|private
name|List
argument_list|<
name|InlineHyperlink
argument_list|>
name|getLinks
parameter_list|()
block|{
name|InlineHyperlink
name|toUnifiedDiffLink
init|=
operator|new
name|InlineHyperlink
argument_list|()
decl_stmt|;
name|toUnifiedDiffLink
operator|.
name|setHTML
argument_list|(
operator|new
name|ImageResourceRenderer
argument_list|()
operator|.
name|render
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|unifiedDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toUnifiedDiffLink
operator|.
name|setTargetHistoryToken
argument_list|(
name|Dispatcher
operator|.
name|toUnified
argument_list|(
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|toUnifiedDiffLink
operator|.
name|setTitle
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|unifiedDiff
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
name|toUnifiedDiffLink
argument_list|)
return|;
block|}
DECL|method|newCM ( DiffInfo.FileMeta meta, String contents, Element parent)
specifier|private
name|CodeMirror
name|newCM
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|,
name|String
name|contents
parameter_list|,
name|Element
name|parent
parameter_list|)
block|{
return|return
name|CodeMirror
operator|.
name|create
argument_list|(
name|parent
argument_list|,
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"readOnly"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorBlinkRate"
argument_list|,
literal|0
argument_list|)
operator|.
name|set
argument_list|(
literal|"cursorHeight"
argument_list|,
literal|0.85
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineNumbers"
argument_list|,
name|prefs
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"tabSize"
argument_list|,
name|prefs
operator|.
name|tabSize
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"mode"
argument_list|,
name|fileSize
operator|==
name|FileSize
operator|.
name|SMALL
condition|?
name|getContentType
argument_list|(
name|meta
argument_list|)
else|:
literal|null
argument_list|)
operator|.
name|set
argument_list|(
literal|"lineWrapping"
argument_list|,
literal|false
argument_list|)
operator|.
name|set
argument_list|(
literal|"scrollbarStyle"
argument_list|,
literal|"overlay"
argument_list|)
operator|.
name|set
argument_list|(
literal|"styleSelectedText"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"showTrailingSpace"
argument_list|,
name|prefs
operator|.
name|showWhitespaceErrors
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"keyMap"
argument_list|,
literal|"vim_ro"
argument_list|)
operator|.
name|set
argument_list|(
literal|"theme"
argument_list|,
name|prefs
operator|.
name|theme
argument_list|()
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
argument_list|)
operator|.
name|set
argument_list|(
literal|"value"
argument_list|,
name|meta
operator|!=
literal|null
condition|?
name|contents
else|:
literal|""
argument_list|)
operator|.
name|set
argument_list|(
literal|"viewportMargin"
argument_list|,
name|prefs
operator|.
name|renderEntireFile
argument_list|()
condition|?
name|POSITIVE_INFINITY
else|:
literal|10
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getIntraLineStatus ()
name|DiffInfo
operator|.
name|IntraLineStatus
name|getIntraLineStatus
parameter_list|()
block|{
return|return
name|diff
operator|.
name|intraline_status
argument_list|()
return|;
block|}
DECL|method|canEnableRenderEntireFile (DiffPreferences prefs)
name|boolean
name|canEnableRenderEntireFile
parameter_list|(
name|DiffPreferences
name|prefs
parameter_list|)
block|{
return|return
name|fileSize
operator|.
name|compareTo
argument_list|(
name|FileSize
operator|.
name|HUGE
argument_list|)
operator|<
literal|0
operator|||
operator|(
name|prefs
operator|.
name|context
argument_list|()
operator|!=
name|WHOLE_FILE_CONTEXT
operator|&&
name|prefs
operator|.
name|context
argument_list|()
operator|<
literal|100
operator|)
return|;
block|}
DECL|method|getContentType ()
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_b
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setThemeStyles (boolean d)
name|void
name|setThemeStyles
parameter_list|(
name|boolean
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|dark
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|dark
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setShowTabs (boolean show)
name|void
name|setShowTabs
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|cmA
operator|.
name|extras
argument_list|()
operator|.
name|showTabs
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|extras
argument_list|()
operator|.
name|showTabs
argument_list|(
name|show
argument_list|)
expr_stmt|;
block|}
DECL|method|setLineLength (int columns)
name|void
name|setLineLength
parameter_list|(
name|int
name|columns
parameter_list|)
block|{
name|cmA
operator|.
name|extras
argument_list|()
operator|.
name|lineLength
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|extras
argument_list|()
operator|.
name|lineLength
argument_list|(
name|columns
argument_list|)
expr_stmt|;
block|}
DECL|method|setShowLineNumbers (boolean b)
name|void
name|setShowLineNumbers
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"lineNumbers"
argument_list|,
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|showLineNumbers
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setShowIntraline (boolean b)
name|void
name|setShowIntraline
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
operator|&&
name|getIntraLineStatus
argument_list|()
operator|==
name|DiffInfo
operator|.
name|IntraLineStatus
operator|.
name|OFF
condition|)
block|{
name|reloadDiffInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
condition|)
block|{
name|diffTable
operator|.
name|removeStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|noIntraline
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|diffTable
operator|.
name|addStyleName
argument_list|(
name|DiffTable
operator|.
name|style
operator|.
name|noIntraline
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toggleShowIntraline ()
specifier|private
name|void
name|toggleShowIntraline
parameter_list|()
block|{
name|prefs
operator|.
name|intralineDifference
argument_list|(
operator|!
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|prefsAction
operator|.
name|update
argument_list|()
expr_stmt|;
block|}
DECL|method|setSyntaxHighlighting (boolean b)
name|void
name|setSyntaxHighlighting
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
if|if
condition|(
name|b
condition|)
block|{
name|injectMode
argument_list|(
name|diff
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
condition|)
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
name|getContentType
argument_list|(
name|diff
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|prefs
operator|.
name|syntaxHighlighting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmA
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"mode"
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setContext (final int context)
name|void
name|setContext
parameter_list|(
specifier|final
name|int
name|context
parameter_list|)
block|{
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|skipManager
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|skipManager
operator|.
name|render
argument_list|(
name|context
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setAutoHideDiffHeader (boolean hide)
name|void
name|setAutoHideDiffHeader
parameter_list|(
name|boolean
name|hide
parameter_list|)
block|{
name|scrollSynchronizer
operator|.
name|setAutoHideDiffTableHeader
argument_list|(
name|hide
argument_list|)
expr_stmt|;
block|}
DECL|method|render (DiffInfo diff)
specifier|private
name|void
name|render
parameter_list|(
name|DiffInfo
name|diff
parameter_list|)
block|{
name|header
operator|.
name|setNoDiff
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|render
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
DECL|method|otherCm (CodeMirror me)
name|CodeMirror
name|otherCm
parameter_list|(
name|CodeMirror
name|me
parameter_list|)
block|{
return|return
name|me
operator|==
name|cmA
condition|?
name|cmB
else|:
name|cmA
return|;
block|}
DECL|method|getCmFromSide (DisplaySide side)
name|CodeMirror
name|getCmFromSide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|cmA
else|:
name|cmB
return|;
block|}
DECL|method|lineOnOther (DisplaySide side, int line)
name|LineOnOtherInfo
name|lineOnOther
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
return|return
name|chunkManager
operator|.
name|getLineMapper
argument_list|()
operator|.
name|lineOnOther
argument_list|(
name|side
argument_list|,
name|line
argument_list|)
return|;
block|}
DECL|method|updateActiveLine (final CodeMirror cm)
specifier|private
name|Runnable
name|updateActiveLine
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|other
init|=
name|otherCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// The rendering of active lines has to be deferred. Reflow
comment|// caused by adding and removing styles chokes Firefox when arrow
comment|// key (or j/k) is held down. Performance on Chrome is fine
comment|// without the deferral.
comment|//
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandleVisualStart
argument_list|(
name|cm
operator|.
name|getCursor
argument_list|(
literal|"end"
argument_list|)
operator|.
name|line
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|(
name|handle
argument_list|)
condition|)
block|{
return|return;
block|}
name|LineOnOtherInfo
name|info
init|=
name|lineOnOther
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isAligned
argument_list|()
condition|)
block|{
name|other
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|(
name|other
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|other
operator|.
name|extras
argument_list|()
operator|.
name|clearActiveLine
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|onGutterClick (final CodeMirror cm)
specifier|private
name|GutterClickHandler
name|onGutterClick
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|GutterClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|CodeMirror
name|instance
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
name|String
name|gutter
parameter_list|,
name|NativeEvent
name|clickEvent
parameter_list|)
block|{
if|if
condition|(
name|clickEvent
operator|.
name|getButton
argument_list|()
operator|==
name|NativeEvent
operator|.
name|BUTTON_LEFT
operator|&&
operator|!
name|clickEvent
operator|.
name|getMetaKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getAltKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getCtrlKey
argument_list|()
operator|&&
operator|!
name|clickEvent
operator|.
name|getShiftKey
argument_list|()
condition|)
block|{
name|cm
operator|.
name|setCursor
argument_list|(
name|Pos
operator|.
name|create
argument_list|(
name|line
argument_list|)
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|commentManager
operator|.
name|newDraft
argument_list|(
name|cm
argument_list|,
name|line
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|upToChange (final boolean openReplyBox)
specifier|private
name|Runnable
name|upToChange
parameter_list|(
specifier|final
name|boolean
name|openReplyBox
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|commentManager
operator|.
name|saveAllDrafts
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|group
operator|.
name|done
argument_list|()
expr_stmt|;
name|group
operator|.
name|addListener
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|String
name|b
init|=
name|base
operator|!=
literal|null
condition|?
name|base
operator|.
name|getId
argument_list|()
else|:
literal|null
decl_stmt|;
name|String
name|rev
init|=
name|revision
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|changeId
argument_list|,
name|b
argument_list|,
name|rev
argument_list|)
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|changeId
argument_list|,
name|b
argument_list|,
name|rev
argument_list|,
name|openReplyBox
argument_list|,
name|FileTable
operator|.
name|Mode
operator|.
name|REVIEW
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|moveCursorToSide (final CodeMirror cmSrc, DisplaySide sideDst)
specifier|private
name|Runnable
name|moveCursorToSide
parameter_list|(
specifier|final
name|CodeMirror
name|cmSrc
parameter_list|,
name|DisplaySide
name|sideDst
parameter_list|)
block|{
specifier|final
name|CodeMirror
name|cmDst
init|=
name|getCmFromSide
argument_list|(
name|sideDst
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmDst
operator|==
name|cmSrc
condition|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{         }
block|}
return|;
block|}
specifier|final
name|DisplaySide
name|sideSrc
init|=
name|cmSrc
operator|.
name|side
argument_list|()
decl_stmt|;
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cmSrc
operator|.
name|extras
argument_list|()
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|cmDst
operator|.
name|setCursor
argument_list|(
name|Pos
operator|.
name|create
argument_list|(
name|lineOnOther
argument_list|(
name|sideSrc
argument_list|,
name|cmSrc
operator|.
name|getLineNumber
argument_list|(
name|cmSrc
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
argument_list|)
operator|.
name|getLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cmDst
operator|.
name|focus
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|maybePrevVimSearch (final CodeMirror cm)
specifier|private
name|Runnable
name|maybePrevVimSearch
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|hasSearchHighlight
argument_list|()
condition|)
block|{
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|handleKey
argument_list|(
literal|"N"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commentManager
operator|.
name|commentNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|NEXT
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|maybeNextVimSearch (final CodeMirror cm)
specifier|private
name|Runnable
name|maybeNextVimSearch
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|hasSearchHighlight
argument_list|()
condition|)
block|{
name|cm
operator|.
name|vim
argument_list|()
operator|.
name|handleKey
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|chunkManager
operator|.
name|diffChunkNav
argument_list|(
name|cm
argument_list|,
name|Direction
operator|.
name|NEXT
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|adjustCommitMessageLine (int line)
specifier|private
name|int
name|adjustCommitMessageLine
parameter_list|(
name|int
name|line
parameter_list|)
block|{
comment|/* When commit messages are shown in the side-by-side screen they include       a header block that looks like this:        1 Parent:     deadbeef (Parent commit title)       2 Author:     A. U. Thor<author@example.com>       3 AuthorDate: 2015-02-27 19:20:52 +0900       4 Commit:     A. U. Thor<author@example.com>       5 CommitDate: 2015-02-27 19:20:52 +0900       6 [blank line]       7 Commit message title       8       9 Commit message body      10 ...      11 ...      If the commit is a merge commit, both parent commits are listed in the     first two lines instead of a 'Parent' line:        1 Merge Of:   deadbeef (Parent 1 commit title)       2             beefdead (Parent 2 commit title)      */
comment|// Offset to compensate for header lines until the blank line
comment|// after 'CommitDate'
name|int
name|offset
init|=
literal|6
decl_stmt|;
comment|// Adjust for merge commits, which have two parent lines
if|if
condition|(
name|diff
operator|.
name|text_b
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"Merge"
argument_list|)
condition|)
block|{
name|offset
operator|+=
literal|1
expr_stmt|;
block|}
comment|// If the cursor is inside the header line, reset to the first line of the
comment|// commit message. Otherwise if the cursor is on an actual line of the commit
comment|// message, adjust the line number to compensate for the header lines, so the
comment|// focus is on the correct line.
if|if
condition|(
name|line
operator|<=
name|offset
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|line
operator|-
name|offset
return|;
block|}
block|}
DECL|method|modifyInEditScreen (final CodeMirror cm)
specifier|private
name|Runnable
name|modifyInEditScreen
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|line
operator|=
name|adjustCommitMessageLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
name|String
name|token
init|=
name|Dispatcher
operator|.
name|toEditScreen
argument_list|(
name|revision
argument_list|,
name|path
argument_list|,
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|updateRenderEntireFile ()
name|void
name|updateRenderEntireFile
parameter_list|()
block|{
name|cmA
operator|.
name|removeKeyMap
argument_list|(
name|RENDER_ENTIRE_FILE_KEYMAP
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|removeKeyMap
argument_list|(
name|RENDER_ENTIRE_FILE_KEYMAP
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefs
operator|.
name|renderEntireFile
argument_list|()
condition|)
block|{
name|cmA
operator|.
name|addKeyMap
argument_list|(
name|RENDER_ENTIRE_FILE_KEYMAP
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|addKeyMap
argument_list|(
name|RENDER_ENTIRE_FILE_KEYMAP
argument_list|)
expr_stmt|;
block|}
name|cmA
operator|.
name|setOption
argument_list|(
literal|"viewportMargin"
argument_list|,
name|prefs
operator|.
name|renderEntireFile
argument_list|()
condition|?
name|POSITIVE_INFINITY
else|:
literal|10
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|setOption
argument_list|(
literal|"viewportMargin"
argument_list|,
name|prefs
operator|.
name|renderEntireFile
argument_list|()
condition|?
name|POSITIVE_INFINITY
else|:
literal|10
argument_list|)
expr_stmt|;
block|}
DECL|method|resizeCodeMirror ()
name|void
name|resizeCodeMirror
parameter_list|()
block|{
name|int
name|hdr
init|=
name|header
operator|.
name|getOffsetHeight
argument_list|()
operator|+
name|diffTable
operator|.
name|getHeaderHeight
argument_list|()
decl_stmt|;
name|cmA
operator|.
name|adjustHeight
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
name|cmB
operator|.
name|adjustHeight
argument_list|(
name|hdr
argument_list|)
expr_stmt|;
block|}
DECL|method|syncScroll (DisplaySide masterSide)
name|void
name|syncScroll
parameter_list|(
name|DisplaySide
name|masterSide
parameter_list|)
block|{
if|if
condition|(
name|scrollSynchronizer
operator|!=
literal|null
condition|)
block|{
name|scrollSynchronizer
operator|.
name|syncScroll
argument_list|(
name|masterSide
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getContentType (DiffInfo.FileMeta meta)
specifier|private
name|String
name|getContentType
parameter_list|(
name|DiffInfo
operator|.
name|FileMeta
name|meta
parameter_list|)
block|{
if|if
condition|(
name|prefs
operator|.
name|syntaxHighlighting
argument_list|()
operator|&&
name|meta
operator|!=
literal|null
operator|&&
name|meta
operator|.
name|content_type
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ModeInfo
name|m
init|=
name|ModeInfo
operator|.
name|findMode
argument_list|(
name|meta
operator|.
name|content_type
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
name|m
operator|!=
literal|null
condition|?
name|m
operator|.
name|mime
argument_list|()
else|:
literal|null
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|injectMode (DiffInfo diffInfo, AsyncCallback<Void> cb)
specifier|private
name|void
name|injectMode
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|,
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
name|cb
parameter_list|)
block|{
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diffInfo
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|diffInfo
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
DECL|method|getPath ()
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getPrefs ()
name|DiffPreferences
name|getPrefs
parameter_list|()
block|{
return|return
name|prefs
return|;
block|}
DECL|method|getChunkManager ()
name|ChunkManager
name|getChunkManager
parameter_list|()
block|{
return|return
name|chunkManager
return|;
block|}
DECL|method|getCommentManager ()
name|CommentManager
name|getCommentManager
parameter_list|()
block|{
return|return
name|commentManager
return|;
block|}
DECL|method|getSkipManager ()
name|SkipManager
name|getSkipManager
parameter_list|()
block|{
return|return
name|skipManager
return|;
block|}
DECL|method|operation (final Runnable apply)
name|void
name|operation
parameter_list|(
specifier|final
name|Runnable
name|apply
parameter_list|)
block|{
name|cmA
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|cmB
operator|.
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|apply
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|prefetchNextFile ()
specifier|private
name|void
name|prefetchNextFile
parameter_list|()
block|{
name|String
name|nextPath
init|=
name|header
operator|.
name|getNextPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextPath
operator|!=
literal|null
condition|)
block|{
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|nextPath
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|info
parameter_list|)
block|{
operator|new
name|ModeInjector
argument_list|()
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|info
operator|.
name|meta_a
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|getContentType
argument_list|(
name|info
operator|.
name|meta_b
argument_list|()
argument_list|)
argument_list|)
operator|.
name|inject
argument_list|(
name|CallbackGroup
operator|.
expr|<
name|Void
operator|>
name|emptyCallback
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{           }
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|reloadDiffInfo ()
name|void
name|reloadDiffInfo
parameter_list|()
block|{
specifier|final
name|int
name|id
init|=
operator|++
name|reloadVersionId
decl_stmt|;
name|DiffApi
operator|.
name|diff
argument_list|(
name|revision
argument_list|,
name|path
argument_list|)
operator|.
name|base
argument_list|(
name|base
argument_list|)
operator|.
name|wholeFile
argument_list|()
operator|.
name|intraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|(
name|prefs
operator|.
name|ignoreWhitespace
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|DiffInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|DiffInfo
name|diffInfo
parameter_list|)
block|{
if|if
condition|(
name|id
operator|==
name|reloadVersionId
operator|&&
name|isAttached
argument_list|()
condition|)
block|{
name|diff
operator|=
name|diffInfo
expr_stmt|;
name|operation
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|skipManager
operator|.
name|removeAll
argument_list|()
expr_stmt|;
name|chunkManager
operator|.
name|reset
argument_list|()
expr_stmt|;
name|diffTable
operator|.
name|scrollbar
operator|.
name|removeDiffAnnotations
argument_list|()
expr_stmt|;
name|setShowIntraline
argument_list|(
name|prefs
operator|.
name|intralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|render
argument_list|(
name|diff
argument_list|)
expr_stmt|;
name|chunkManager
operator|.
name|adjustPadding
argument_list|()
expr_stmt|;
name|skipManager
operator|.
name|render
argument_list|(
name|prefs
operator|.
name|context
argument_list|()
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|bucketFileSize (DiffInfo diff)
specifier|private
specifier|static
name|FileSize
name|bucketFileSize
parameter_list|(
name|DiffInfo
name|diff
parameter_list|)
block|{
name|FileMeta
name|a
init|=
name|diff
operator|.
name|meta_a
argument_list|()
decl_stmt|;
name|FileMeta
name|b
init|=
name|diff
operator|.
name|meta_b
argument_list|()
decl_stmt|;
name|FileSize
index|[]
name|sizes
init|=
name|FileSize
operator|.
name|values
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|sizes
operator|.
name|length
operator|-
literal|1
init|;
literal|0
operator|<=
name|i
condition|;
name|i
operator|--
control|)
block|{
name|FileSize
name|s
init|=
name|sizes
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|a
operator|!=
literal|null
operator|&&
name|s
operator|.
name|lines
operator|<=
name|a
operator|.
name|lines
argument_list|()
operator|)
operator|||
operator|(
name|b
operator|!=
literal|null
operator|&&
name|s
operator|.
name|lines
operator|<=
name|b
operator|.
name|lines
argument_list|()
operator|)
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
name|FileSize
operator|.
name|SMALL
return|;
block|}
block|}
end_class

end_unit

