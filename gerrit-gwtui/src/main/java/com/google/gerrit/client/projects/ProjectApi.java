begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.projects
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectApi
specifier|public
class|class
name|ProjectApi
block|{
comment|/** Create a new project */
DECL|method|createProject (String projectName, String parent, Boolean createEmptyCcommit, Boolean permissionsOnly, AsyncCallback<VoidResult> cb)
specifier|public
specifier|static
name|void
name|createProject
parameter_list|(
name|String
name|projectName
parameter_list|,
name|String
name|parent
parameter_list|,
name|Boolean
name|createEmptyCcommit
parameter_list|,
name|Boolean
name|permissionsOnly
parameter_list|,
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|cb
parameter_list|)
block|{
name|ProjectInput
name|input
init|=
name|ProjectInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|setName
argument_list|(
name|projectName
argument_list|)
expr_stmt|;
name|input
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|input
operator|.
name|setPermissionsOnly
argument_list|(
name|permissionsOnly
argument_list|)
expr_stmt|;
name|input
operator|.
name|setCreateEmptyCommit
argument_list|(
name|createEmptyCcommit
argument_list|)
expr_stmt|;
operator|new
name|RestApi
argument_list|(
literal|"/projects/"
argument_list|)
operator|.
name|id
argument_list|(
name|projectName
argument_list|)
operator|.
name|ifNoneMatch
argument_list|()
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new branch */
DECL|method|createBranch (Project.NameKey projectName, String ref, String revision, AsyncCallback<BranchInfo> cb)
specifier|public
specifier|static
name|void
name|createBranch
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|String
name|ref
parameter_list|,
name|String
name|revision
parameter_list|,
name|AsyncCallback
argument_list|<
name|BranchInfo
argument_list|>
name|cb
parameter_list|)
block|{
name|BranchInput
name|input
init|=
name|BranchInput
operator|.
name|create
argument_list|()
decl_stmt|;
name|input
operator|.
name|setRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
operator|new
name|RestApi
argument_list|(
literal|"/projects/"
argument_list|)
operator|.
name|id
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"branches"
argument_list|)
operator|.
name|id
argument_list|(
name|ref
argument_list|)
operator|.
name|ifNoneMatch
argument_list|()
operator|.
name|put
argument_list|(
name|input
argument_list|,
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/** Retrieve all visible branches of the project */
DECL|method|getBranches (Project.NameKey projectName, AsyncCallback<JsArray<BranchInfo>> cb)
specifier|public
specifier|static
name|void
name|getBranches
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|AsyncCallback
argument_list|<
name|JsArray
argument_list|<
name|BranchInfo
argument_list|>
argument_list|>
name|cb
parameter_list|)
block|{
operator|new
name|RestApi
argument_list|(
literal|"/projects/"
argument_list|)
operator|.
name|id
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"branches"
argument_list|)
operator|.
name|get
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
comment|/**    * Delete branches. For each branch to be deleted a separate DELETE request is    * fired to the server. The {@code onSuccess} method of the provided callback    * is invoked once after all requests succeeded. If any request fails the    * callbacks' {@code onFailure} method is invoked. In a failure case it can be    * that still some of the branches were successfully deleted.    */
DECL|method|deleteBranches (Project.NameKey projectName, Set<String> refs, AsyncCallback<VoidResult> cb)
specifier|public
specifier|static
name|void
name|deleteBranches
parameter_list|(
name|Project
operator|.
name|NameKey
name|projectName
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|,
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|cb
parameter_list|)
block|{
name|CallbackGroup
name|group
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|refs
control|)
block|{
operator|new
name|RestApi
argument_list|(
literal|"/projects/"
argument_list|)
operator|.
name|id
argument_list|(
name|projectName
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"branches"
argument_list|)
operator|.
name|id
argument_list|(
name|ref
argument_list|)
operator|.
name|delete
argument_list|(
name|group
operator|.
name|add
argument_list|(
name|cb
argument_list|)
argument_list|)
expr_stmt|;
name|cb
operator|=
name|CallbackGroup
operator|.
name|emptyCallback
argument_list|()
expr_stmt|;
block|}
name|group
operator|.
name|done
argument_list|()
expr_stmt|;
block|}
DECL|method|config (Project.NameKey name)
specifier|static
name|RestApi
name|config
parameter_list|(
name|Project
operator|.
name|NameKey
name|name
parameter_list|)
block|{
return|return
operator|new
name|RestApi
argument_list|(
literal|"/projects/"
argument_list|)
operator|.
name|id
argument_list|(
name|name
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"config"
argument_list|)
return|;
block|}
DECL|class|ProjectInput
specifier|private
specifier|static
class|class
name|ProjectInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|ProjectInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|ProjectInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|ProjectInput ()
specifier|protected
name|ProjectInput
parameter_list|()
block|{     }
DECL|method|setName (String n)
specifier|final
specifier|native
name|void
name|setName
parameter_list|(
name|String
name|n
parameter_list|)
comment|/*-{ if(n)this.name=n; }-*/
function_decl|;
DECL|method|setParent (String p)
specifier|final
specifier|native
name|void
name|setParent
parameter_list|(
name|String
name|p
parameter_list|)
comment|/*-{ if(p)this.parent=p; }-*/
function_decl|;
DECL|method|setPermissionsOnly (boolean po)
specifier|final
specifier|native
name|void
name|setPermissionsOnly
parameter_list|(
name|boolean
name|po
parameter_list|)
comment|/*-{ if(po)this.permissions_only=po; }-*/
function_decl|;
DECL|method|setCreateEmptyCommit (boolean cc)
specifier|final
specifier|native
name|void
name|setCreateEmptyCommit
parameter_list|(
name|boolean
name|cc
parameter_list|)
comment|/*-{ if(cc)this.create_empty_commit=cc; }-*/
function_decl|;
block|}
DECL|class|BranchInput
specifier|private
specifier|static
class|class
name|BranchInput
extends|extends
name|JavaScriptObject
block|{
DECL|method|create ()
specifier|static
name|BranchInput
name|create
parameter_list|()
block|{
return|return
operator|(
name|BranchInput
operator|)
name|createObject
argument_list|()
return|;
block|}
DECL|method|BranchInput ()
specifier|protected
name|BranchInput
parameter_list|()
block|{     }
DECL|method|setRevision (String r)
specifier|final
specifier|native
name|void
name|setRevision
parameter_list|(
name|String
name|r
parameter_list|)
comment|/*-{ if(r)this.revision=r; }-*/
function_decl|;
block|}
block|}
end_class

end_unit

