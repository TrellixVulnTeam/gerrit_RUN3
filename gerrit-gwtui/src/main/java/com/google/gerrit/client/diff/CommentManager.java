begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|PaddingManager
operator|.
name|PaddingWidgetWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|SkippedLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|LineWidget
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
operator|.
name|LineHandle
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
operator|.
name|FromTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Tracks comment widgets for {@link SideBySide2}. */
end_comment

begin_class
DECL|class|CommentManager
class|class
name|CommentManager
block|{
DECL|field|host
specifier|private
specifier|final
name|SideBySide2
name|host
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
specifier|final
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|published
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
name|published
decl_stmt|;
DECL|field|lineActiveBox
specifier|private
specifier|final
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
name|lineActiveBox
decl_stmt|;
DECL|field|linePublishedBoxes
specifier|private
specifier|final
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|List
argument_list|<
name|PublishedBox
argument_list|>
argument_list|>
name|linePublishedBoxes
decl_stmt|;
DECL|field|linePaddingManager
specifier|private
specifier|final
name|Map
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
name|linePaddingManager
decl_stmt|;
DECL|field|unsavedDrafts
specifier|private
specifier|final
name|Set
argument_list|<
name|DraftBox
argument_list|>
name|unsavedDrafts
decl_stmt|;
DECL|method|CommentManager (SideBySide2 host, PatchSet.Id base, PatchSet.Id revision, String path, CommentLinkProcessor clp)
name|CommentManager
parameter_list|(
name|SideBySide2
name|host
parameter_list|,
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|CommentLinkProcessor
name|clp
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|commentLinkProcessor
operator|=
name|clp
expr_stmt|;
name|published
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
argument_list|()
expr_stmt|;
name|lineActiveBox
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|CommentBox
argument_list|>
argument_list|()
expr_stmt|;
name|linePublishedBoxes
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|List
argument_list|<
name|PublishedBox
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
name|linePaddingManager
operator|=
operator|new
name|HashMap
argument_list|<
name|LineHandle
argument_list|,
name|PaddingManager
argument_list|>
argument_list|()
expr_stmt|;
name|unsavedDrafts
operator|=
operator|new
name|HashSet
argument_list|<
name|DraftBox
argument_list|>
argument_list|()
expr_stmt|;
block|}
DECL|method|getSideBySide2 ()
name|SideBySide2
name|getSideBySide2
parameter_list|()
block|{
return|return
name|host
return|;
block|}
DECL|method|setExpandAllComments (boolean b)
name|void
name|setExpandAllComments
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
for|for
control|(
name|PublishedBox
name|box
range|:
name|published
operator|.
name|values
argument_list|()
control|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|render (CommentsCollections in)
name|void
name|render
parameter_list|(
name|CommentsCollections
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|.
name|publishedBase
operator|!=
literal|null
condition|)
block|{
name|renderPublished
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
name|in
operator|.
name|publishedBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|publishedRevision
operator|!=
literal|null
condition|)
block|{
name|renderPublished
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
name|in
operator|.
name|publishedRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|draftsBase
operator|!=
literal|null
condition|)
block|{
name|renderDrafts
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
name|in
operator|.
name|draftsBase
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|in
operator|.
name|draftsRevision
operator|!=
literal|null
condition|)
block|{
name|renderDrafts
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
name|in
operator|.
name|draftsRevision
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderPublished (DisplaySide forSide, JsArray<CommentInfo> in)
specifier|private
name|void
name|renderPublished
parameter_list|(
name|DisplaySide
name|forSide
parameter_list|,
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
parameter_list|)
block|{
for|for
control|(
name|CommentInfo
name|info
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|in
argument_list|)
control|)
block|{
name|DisplaySide
name|side
init|=
name|displaySide
argument_list|(
name|info
argument_list|,
name|forSide
argument_list|)
decl_stmt|;
if|if
condition|(
name|side
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|CodeMirror
name|cm
init|=
name|host
operator|.
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
name|PublishedBox
name|box
init|=
operator|new
name|PublishedBox
argument_list|(
name|this
argument_list|,
name|cm
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|published
operator|.
name|put
argument_list|(
name|info
operator|.
name|id
argument_list|()
argument_list|,
name|box
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
name|host
operator|.
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|linePublishedBoxes
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|linePublishedBoxes
operator|.
name|get
argument_list|(
name|handle
argument_list|)
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|PublishedBox
argument_list|>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|linePublishedBoxes
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
name|lineActiveBox
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|renderDrafts (DisplaySide forSide, JsArray<CommentInfo> in)
specifier|private
name|void
name|renderDrafts
parameter_list|(
name|DisplaySide
name|forSide
parameter_list|,
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
parameter_list|)
block|{
for|for
control|(
name|CommentInfo
name|info
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|in
argument_list|)
control|)
block|{
name|DisplaySide
name|side
init|=
name|displaySide
argument_list|(
name|info
argument_list|,
name|forSide
argument_list|)
decl_stmt|;
if|if
condition|(
name|side
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|CodeMirror
name|cm
init|=
name|host
operator|.
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|cm
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|in_reply_to
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|PublishedBox
name|r
init|=
name|published
operator|.
name|get
argument_list|(
name|info
operator|.
name|in_reply_to
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|registerReplyBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
name|host
operator|.
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|lineActiveBox
operator|.
name|put
argument_list|(
name|cm
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|displaySide (CommentInfo info, DisplaySide forSide)
specifier|private
name|DisplaySide
name|displaySide
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
name|DisplaySide
name|forSide
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|)
block|{
return|return
name|base
operator|==
literal|null
condition|?
name|DisplaySide
operator|.
name|A
else|:
literal|null
return|;
block|}
return|return
name|forSide
return|;
block|}
DECL|method|splitSkips (int context, List<SkippedLine> skips)
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|splitSkips
parameter_list|(
name|int
name|context
parameter_list|,
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|skips
parameter_list|)
block|{
comment|// TODO: This is not optimal, but shouldn't be too costly in most cases.
comment|// Maybe rewrite after done keeping track of diff chunk positions.
for|for
control|(
name|CommentBox
name|box
range|:
name|lineActiveBox
operator|.
name|values
argument_list|()
control|)
block|{
name|int
name|boxLine
init|=
name|box
operator|.
name|getCommentInfo
argument_list|()
operator|.
name|line
argument_list|()
decl_stmt|;
name|boolean
name|sideA
init|=
name|box
operator|.
name|getCm
argument_list|()
operator|.
name|side
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
decl_stmt|;
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<
name|SkippedLine
argument_list|>
argument_list|(
name|skips
operator|.
name|size
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|SkippedLine
name|skip
range|:
name|skips
control|)
block|{
name|int
name|startLine
init|=
name|sideA
condition|?
name|skip
operator|.
name|getStartA
argument_list|()
else|:
name|skip
operator|.
name|getStartB
argument_list|()
decl_stmt|;
name|int
name|deltaBefore
init|=
name|boxLine
operator|-
name|startLine
decl_stmt|;
name|int
name|deltaAfter
init|=
name|startLine
operator|+
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|boxLine
decl_stmt|;
if|if
condition|(
name|deltaBefore
operator|<
operator|-
name|context
operator|||
name|deltaAfter
operator|<
operator|-
name|context
condition|)
block|{
name|temp
operator|.
name|add
argument_list|(
name|skip
argument_list|)
expr_stmt|;
comment|// Size guaranteed to be greater than 1
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
operator|&&
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|SkippedLine
name|before
init|=
operator|new
name|SkippedLine
argument_list|(
name|skip
operator|.
name|getStartA
argument_list|()
argument_list|,
name|skip
operator|.
name|getStartB
argument_list|()
argument_list|,
name|skip
operator|.
name|getSize
argument_list|()
operator|-
name|deltaAfter
operator|-
name|context
argument_list|)
decl_stmt|;
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaAfter
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|incrementStart
argument_list|(
name|deltaBefore
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deltaBefore
operator|>
name|context
condition|)
block|{
name|skip
operator|.
name|reduceSize
argument_list|(
name|deltaAfter
operator|+
name|context
argument_list|)
expr_stmt|;
name|checkAndAddSkip
argument_list|(
name|temp
argument_list|,
name|skip
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|temp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|temp
return|;
block|}
name|skips
operator|=
name|temp
expr_stmt|;
block|}
return|return
name|skips
return|;
block|}
DECL|method|checkAndAddSkip (List<SkippedLine> out, SkippedLine s)
specifier|private
specifier|static
name|void
name|checkAndAddSkip
parameter_list|(
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|out
parameter_list|,
name|SkippedLine
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|toggleOpenBox (final CodeMirror cm)
name|Runnable
name|toggleOpenBox
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|CommentBox
name|box
init|=
name|lineActiveBox
operator|.
name|get
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|!=
literal|null
condition|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
operator|!
name|box
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|openClosePublished (final CodeMirror cm)
name|Runnable
name|openClosePublished
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|cm
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
name|linePublishedBoxes
operator|.
name|get
argument_list|(
name|cm
operator|.
name|getActiveLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|open
init|=
literal|false
decl_stmt|;
for|for
control|(
name|PublishedBox
name|box
range|:
name|list
control|)
block|{
if|if
condition|(
operator|!
name|box
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|open
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|PublishedBox
name|box
range|:
name|list
control|)
block|{
name|box
operator|.
name|setOpen
argument_list|(
name|open
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|;
block|}
DECL|method|insertNewDraft (final CodeMirror cm)
name|Runnable
name|insertNewDraft
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
return|return
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|host
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
return|return
operator|new
name|Runnable
argument_list|()
block|{
specifier|public
name|void
name|run
parameter_list|()
block|{
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getActiveLine
argument_list|()
decl_stmt|;
name|int
name|line
init|=
name|cm
operator|.
name|getLineNumber
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|CommentBox
name|box
init|=
name|lineActiveBox
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|FromTo
name|fromTo
init|=
name|cm
operator|.
name|getSelectedRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|somethingSelected
argument_list|()
condition|)
block|{
name|lineActiveBox
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|newRangeDraft
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
name|fromTo
operator|.
name|getTo
argument_list|()
operator|.
name|getLine
argument_list|()
operator|==
name|line
condition|?
name|fromTo
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setSelection
argument_list|(
name|cm
operator|.
name|getCursor
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
name|lineActiveBox
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|newRangeDraft
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|box
operator|instanceof
name|DraftBox
condition|)
block|{
operator|(
operator|(
name|DraftBox
operator|)
name|box
operator|)
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|PublishedBox
operator|)
name|box
operator|)
operator|.
name|doReply
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
DECL|method|newRangeDraft (CodeMirror cm, int line, FromTo fromTo)
specifier|private
name|DraftBox
name|newRangeDraft
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|int
name|line
parameter_list|,
name|FromTo
name|fromTo
parameter_list|)
block|{
name|DisplaySide
name|side
init|=
name|cm
operator|.
name|side
argument_list|()
decl_stmt|;
return|return
name|addDraftBox
argument_list|(
name|CommentInfo
operator|.
name|createRange
argument_list|(
name|path
argument_list|,
name|getStoredSideFromDisplaySide
argument_list|(
name|side
argument_list|)
argument_list|,
name|line
operator|+
literal|1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|CommentRange
operator|.
name|create
argument_list|(
name|fromTo
argument_list|)
argument_list|)
argument_list|,
name|side
argument_list|)
return|;
block|}
DECL|method|newFileDraft (DisplaySide side)
name|DraftBox
name|newFileDraft
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|addDraftBox
argument_list|(
name|CommentInfo
operator|.
name|createFile
argument_list|(
name|path
argument_list|,
name|getStoredSideFromDisplaySide
argument_list|(
name|side
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|side
argument_list|)
return|;
block|}
DECL|method|createReply (CommentInfo replyTo)
name|CommentInfo
name|createReply
parameter_list|(
name|CommentInfo
name|replyTo
parameter_list|)
block|{
if|if
condition|(
operator|!
name|replyTo
operator|.
name|has_line
argument_list|()
operator|&&
name|replyTo
operator|.
name|range
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|CommentInfo
operator|.
name|createFile
argument_list|(
name|path
argument_list|,
name|replyTo
operator|.
name|side
argument_list|()
argument_list|,
name|replyTo
operator|.
name|id
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|CommentInfo
operator|.
name|createRange
argument_list|(
name|path
argument_list|,
name|replyTo
operator|.
name|side
argument_list|()
argument_list|,
name|replyTo
operator|.
name|line
argument_list|()
argument_list|,
name|replyTo
operator|.
name|id
argument_list|()
argument_list|,
literal|null
argument_list|,
name|replyTo
operator|.
name|range
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|method|addDraftBox (CommentInfo info, DisplaySide side)
name|DraftBox
name|addDraftBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
name|DisplaySide
name|side
parameter_list|)
block|{
name|CodeMirror
name|cm
init|=
name|host
operator|.
name|getCmFromSide
argument_list|(
name|side
argument_list|)
decl_stmt|;
specifier|final
name|DraftBox
name|box
init|=
operator|new
name|DraftBox
argument_list|(
name|this
argument_list|,
name|cm
argument_list|,
name|commentLinkProcessor
argument_list|,
name|getPatchSetIdFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|id
argument_list|()
operator|==
literal|null
condition|)
block|{
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|box
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|box
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|info
operator|.
name|has_line
argument_list|()
condition|)
block|{
return|return
name|box
return|;
block|}
name|addCommentBox
argument_list|(
name|info
argument_list|,
name|box
argument_list|)
expr_stmt|;
name|box
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|lineActiveBox
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|box
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
DECL|method|addCommentBox (CommentInfo info, final CommentBox box)
specifier|private
name|CommentBox
name|addCommentBox
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
specifier|final
name|CommentBox
name|box
parameter_list|)
block|{
name|host
operator|.
name|diffTable
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
name|CodeMirror
name|cm
init|=
name|box
operator|.
name|getCm
argument_list|()
decl_stmt|;
name|CodeMirror
name|other
init|=
name|host
operator|.
name|otherCm
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|int
name|line
init|=
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// CommentInfo is 1-based, but CM is 0-based
name|LineHandle
name|handle
init|=
name|cm
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|PaddingManager
name|manager
decl_stmt|;
if|if
condition|(
name|linePaddingManager
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|manager
operator|=
name|linePaddingManager
operator|.
name|get
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Estimated height at 28px, fixed by deferring after display
name|manager
operator|=
operator|new
name|PaddingManager
argument_list|(
name|host
operator|.
name|addPaddingWidget
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|linePaddingManager
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|manager
argument_list|)
expr_stmt|;
block|}
name|int
name|lineToPad
init|=
name|host
operator|.
name|lineOnOther
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|line
argument_list|)
operator|.
name|getLine
argument_list|()
decl_stmt|;
name|LineHandle
name|otherHandle
init|=
name|other
operator|.
name|getLineHandle
argument_list|(
name|lineToPad
argument_list|)
decl_stmt|;
name|DiffChunkInfo
name|myChunk
init|=
name|host
operator|.
name|getDiffChunk
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|DiffChunkInfo
name|otherChunk
init|=
name|host
operator|.
name|getDiffChunk
argument_list|(
name|other
operator|.
name|side
argument_list|()
argument_list|,
name|lineToPad
argument_list|)
decl_stmt|;
name|PaddingManager
name|otherManager
decl_stmt|;
if|if
condition|(
name|linePaddingManager
operator|.
name|containsKey
argument_list|(
name|otherHandle
argument_list|)
condition|)
block|{
name|otherManager
operator|=
name|linePaddingManager
operator|.
name|get
argument_list|(
name|otherHandle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherManager
operator|=
operator|new
name|PaddingManager
argument_list|(
name|host
operator|.
name|addPaddingWidget
argument_list|(
name|other
argument_list|,
name|lineToPad
argument_list|,
literal|0
argument_list|,
name|Unit
operator|.
name|PX
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|linePaddingManager
operator|.
name|put
argument_list|(
name|otherHandle
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|myChunk
operator|==
literal|null
operator|&&
name|otherChunk
operator|==
literal|null
operator|)
operator|||
operator|(
name|myChunk
operator|!=
literal|null
operator|&&
name|otherChunk
operator|!=
literal|null
operator|)
condition|)
block|{
name|PaddingManager
operator|.
name|link
argument_list|(
name|manager
argument_list|,
name|otherManager
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
name|manager
operator|.
name|getCurrentCount
argument_list|()
decl_stmt|;
name|manager
operator|.
name|insert
argument_list|(
name|box
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
name|Configuration
operator|.
name|create
argument_list|()
operator|.
name|set
argument_list|(
literal|"coverGutter"
argument_list|,
literal|true
argument_list|)
operator|.
name|set
argument_list|(
literal|"insertAt"
argument_list|,
name|index
argument_list|)
operator|.
name|set
argument_list|(
literal|"noHScroll"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|LineWidget
name|boxWidget
init|=
name|host
operator|.
name|addLineWidget
argument_list|(
name|cm
argument_list|,
name|line
argument_list|,
name|box
argument_list|,
name|config
argument_list|)
decl_stmt|;
name|box
operator|.
name|setPaddingManager
argument_list|(
name|manager
argument_list|)
expr_stmt|;
name|box
operator|.
name|setSelfWidgetWrapper
argument_list|(
operator|new
name|PaddingWidgetWrapper
argument_list|(
name|boxWidget
argument_list|,
name|box
operator|.
name|getElement
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|otherChunk
operator|==
literal|null
condition|)
block|{
name|box
operator|.
name|setDiffChunkInfo
argument_list|(
name|myChunk
argument_list|)
expr_stmt|;
block|}
name|box
operator|.
name|setGutterWrapper
argument_list|(
name|host
operator|.
name|diffTable
operator|.
name|sidePanel
operator|.
name|addGutter
argument_list|(
name|cm
argument_list|,
name|info
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|,
name|box
operator|instanceof
name|DraftBox
condition|?
name|SidePanel
operator|.
name|GutterType
operator|.
name|DRAFT
else|:
name|SidePanel
operator|.
name|GutterType
operator|.
name|COMMENT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|box
operator|instanceof
name|DraftBox
condition|)
block|{
name|boxWidget
operator|.
name|onRedraw
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|DraftBox
name|draftBox
init|=
operator|(
name|DraftBox
operator|)
name|box
decl_stmt|;
if|if
condition|(
name|draftBox
operator|.
name|isEdit
argument_list|()
condition|)
block|{
name|draftBox
operator|.
name|editArea
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|box
return|;
block|}
DECL|method|removeDraft (DraftBox box)
name|void
name|removeDraft
parameter_list|(
name|DraftBox
name|box
parameter_list|)
block|{
name|int
name|line
init|=
name|box
operator|.
name|getCommentInfo
argument_list|()
operator|.
name|line
argument_list|()
operator|-
literal|1
decl_stmt|;
name|LineHandle
name|handle
init|=
name|box
operator|.
name|getCm
argument_list|()
operator|.
name|getLineHandle
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|lineActiveBox
operator|.
name|remove
argument_list|(
name|handle
argument_list|)
expr_stmt|;
if|if
condition|(
name|linePublishedBoxes
operator|.
name|containsKey
argument_list|(
name|handle
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|PublishedBox
argument_list|>
name|list
init|=
name|linePublishedBoxes
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
name|lineActiveBox
operator|.
name|put
argument_list|(
name|handle
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|unsavedDrafts
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|addFileCommentBox (CommentBox box)
name|void
name|addFileCommentBox
parameter_list|(
name|CommentBox
name|box
parameter_list|)
block|{
name|host
operator|.
name|diffTable
operator|.
name|addFileCommentBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFileCommentBox (DraftBox box)
name|void
name|removeFileCommentBox
parameter_list|(
name|DraftBox
name|box
parameter_list|)
block|{
name|host
operator|.
name|diffTable
operator|.
name|onRemoveDraftBox
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
DECL|method|resizePadding (LineHandle handle)
name|void
name|resizePadding
parameter_list|(
name|LineHandle
name|handle
parameter_list|)
block|{
name|CommentBox
name|box
init|=
name|lineActiveBox
operator|.
name|get
argument_list|(
name|handle
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|!=
literal|null
condition|)
block|{
name|box
operator|.
name|resizePaddingWidget
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|setUnsaved (DraftBox box, boolean isUnsaved)
name|void
name|setUnsaved
parameter_list|(
name|DraftBox
name|box
parameter_list|,
name|boolean
name|isUnsaved
parameter_list|)
block|{
if|if
condition|(
name|isUnsaved
condition|)
block|{
name|unsavedDrafts
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsavedDrafts
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveAllDrafts (CallbackGroup cb)
name|void
name|saveAllDrafts
parameter_list|(
name|CallbackGroup
name|cb
parameter_list|)
block|{
for|for
control|(
name|DraftBox
name|box
range|:
name|unsavedDrafts
control|)
block|{
name|box
operator|.
name|save
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStoredSideFromDisplaySide (DisplaySide side)
specifier|private
name|Side
name|getStoredSideFromDisplaySide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|==
literal|null
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
return|;
block|}
DECL|method|getPatchSetIdFromSide (DisplaySide side)
specifier|private
name|PatchSet
operator|.
name|Id
name|getPatchSetIdFromSide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|!=
literal|null
condition|?
name|base
else|:
name|revision
return|;
block|}
block|}
end_class

end_unit

