begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|SkippedLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|Pos
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
operator|.
name|FromTo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Tracks comment widgets for {@link DiffScreen}. */
end_comment

begin_class
DECL|class|CommentManager
specifier|abstract
class|class
name|CommentManager
block|{
DECL|field|base
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
specifier|final
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|published
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
name|published
decl_stmt|;
DECL|field|unsavedDrafts
specifier|private
specifier|final
name|Set
argument_list|<
name|DraftBox
argument_list|>
name|unsavedDrafts
decl_stmt|;
DECL|field|attached
specifier|private
name|boolean
name|attached
decl_stmt|;
DECL|field|expandAll
specifier|private
name|boolean
name|expandAll
decl_stmt|;
DECL|field|open
specifier|private
name|boolean
name|open
decl_stmt|;
DECL|method|CommentManager ( PatchSet.Id base, PatchSet.Id revision, String path, CommentLinkProcessor clp, boolean open)
name|CommentManager
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|CommentLinkProcessor
name|clp
parameter_list|,
name|boolean
name|open
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|commentLinkProcessor
operator|=
name|clp
expr_stmt|;
name|this
operator|.
name|open
operator|=
name|open
expr_stmt|;
name|published
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|unsavedDrafts
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|setAttached (boolean attached)
name|void
name|setAttached
parameter_list|(
name|boolean
name|attached
parameter_list|)
block|{
name|this
operator|.
name|attached
operator|=
name|attached
expr_stmt|;
block|}
DECL|method|isAttached ()
name|boolean
name|isAttached
parameter_list|()
block|{
return|return
name|attached
return|;
block|}
DECL|method|setExpandAll (boolean expandAll)
name|void
name|setExpandAll
parameter_list|(
name|boolean
name|expandAll
parameter_list|)
block|{
name|this
operator|.
name|expandAll
operator|=
name|expandAll
expr_stmt|;
block|}
DECL|method|isExpandAll ()
name|boolean
name|isExpandAll
parameter_list|()
block|{
return|return
name|expandAll
return|;
block|}
DECL|method|isOpen ()
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|open
return|;
block|}
DECL|method|getPath ()
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|getPublished ()
name|Map
argument_list|<
name|String
argument_list|,
name|PublishedBox
argument_list|>
name|getPublished
parameter_list|()
block|{
return|return
name|published
return|;
block|}
DECL|method|getCommentLinkProcessor ()
name|CommentLinkProcessor
name|getCommentLinkProcessor
parameter_list|()
block|{
return|return
name|commentLinkProcessor
return|;
block|}
DECL|method|renderDrafts (DisplaySide forSide, JsArray<CommentInfo> in)
name|void
name|renderDrafts
parameter_list|(
name|DisplaySide
name|forSide
parameter_list|,
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
parameter_list|)
block|{
for|for
control|(
name|CommentInfo
name|info
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|in
argument_list|)
control|)
block|{
name|DisplaySide
name|side
init|=
name|displaySide
argument_list|(
name|info
argument_list|,
name|forSide
argument_list|)
decl_stmt|;
if|if
condition|(
name|side
operator|!=
literal|null
condition|)
block|{
name|addDraftBox
argument_list|(
name|side
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setUnsaved (DraftBox box, boolean isUnsaved)
name|void
name|setUnsaved
parameter_list|(
name|DraftBox
name|box
parameter_list|,
name|boolean
name|isUnsaved
parameter_list|)
block|{
if|if
condition|(
name|isUnsaved
condition|)
block|{
name|unsavedDrafts
operator|.
name|add
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unsavedDrafts
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|saveAllDrafts (CallbackGroup cb)
name|void
name|saveAllDrafts
parameter_list|(
name|CallbackGroup
name|cb
parameter_list|)
block|{
for|for
control|(
name|DraftBox
name|box
range|:
name|unsavedDrafts
control|)
block|{
name|box
operator|.
name|save
argument_list|(
name|cb
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getStoredSideFromDisplaySide (DisplaySide side)
name|Side
name|getStoredSideFromDisplaySide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|==
literal|null
condition|?
name|Side
operator|.
name|PARENT
else|:
name|Side
operator|.
name|REVISION
return|;
block|}
DECL|method|getPatchSetIdFromSide (DisplaySide side)
name|PatchSet
operator|.
name|Id
name|getPatchSetIdFromSide
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|side
operator|==
name|DisplaySide
operator|.
name|A
operator|&&
name|base
operator|!=
literal|null
condition|?
name|base
else|:
name|revision
return|;
block|}
DECL|method|displaySide (CommentInfo info, DisplaySide forSide)
name|DisplaySide
name|displaySide
parameter_list|(
name|CommentInfo
name|info
parameter_list|,
name|DisplaySide
name|forSide
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|PARENT
condition|)
block|{
return|return
name|base
operator|==
literal|null
condition|?
name|DisplaySide
operator|.
name|A
else|:
literal|null
return|;
block|}
return|return
name|forSide
return|;
block|}
DECL|method|adjustSelection (CodeMirror cm)
specifier|static
name|FromTo
name|adjustSelection
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
name|FromTo
name|fromTo
init|=
name|cm
operator|.
name|getSelectedRange
argument_list|()
decl_stmt|;
name|Pos
name|to
init|=
name|fromTo
operator|.
name|to
argument_list|()
decl_stmt|;
if|if
condition|(
name|to
operator|.
name|ch
argument_list|()
operator|==
literal|0
condition|)
block|{
name|to
operator|.
name|line
argument_list|(
name|to
operator|.
name|line
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|to
operator|.
name|ch
argument_list|(
name|cm
operator|.
name|getLine
argument_list|(
name|to
operator|.
name|line
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fromTo
return|;
block|}
DECL|method|insertNewDraft (DisplaySide side, int line)
specifier|abstract
name|void
name|insertNewDraft
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
DECL|method|newDraftCallback (final CodeMirror cm)
specifier|abstract
name|Runnable
name|newDraftCallback
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
function_decl|;
DECL|method|addDraftBox (DisplaySide side, CommentInfo info)
specifier|abstract
name|DraftBox
name|addDraftBox
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|CommentInfo
name|info
parameter_list|)
function_decl|;
DECL|method|setExpandAllComments (boolean b)
specifier|abstract
name|void
name|setExpandAllComments
parameter_list|(
name|boolean
name|b
parameter_list|)
function_decl|;
DECL|method|commentNav (CodeMirror src, Direction dir)
specifier|abstract
name|Runnable
name|commentNav
parameter_list|(
name|CodeMirror
name|src
parameter_list|,
name|Direction
name|dir
parameter_list|)
function_decl|;
DECL|method|clearLine (DisplaySide side, int line, CommentGroup group)
specifier|abstract
name|void
name|clearLine
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|CommentGroup
name|group
parameter_list|)
function_decl|;
DECL|method|renderPublished (DisplaySide forSide, JsArray<CommentInfo> in)
specifier|abstract
name|void
name|renderPublished
parameter_list|(
name|DisplaySide
name|forSide
parameter_list|,
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
parameter_list|)
function_decl|;
DECL|method|splitSkips (int context, List<SkippedLine> skips)
specifier|abstract
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|splitSkips
parameter_list|(
name|int
name|context
parameter_list|,
name|List
argument_list|<
name|SkippedLine
argument_list|>
name|skips
parameter_list|)
function_decl|;
DECL|method|newDraftOnGutterClick (CodeMirror cm, String gutterClass, int line)
specifier|abstract
name|void
name|newDraftOnGutterClick
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|String
name|gutterClass
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
DECL|method|toggleOpenBox (final CodeMirror cm)
specifier|abstract
name|Runnable
name|toggleOpenBox
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
function_decl|;
DECL|method|openCloseAll (final CodeMirror cm)
specifier|abstract
name|Runnable
name|openCloseAll
parameter_list|(
specifier|final
name|CodeMirror
name|cm
parameter_list|)
function_decl|;
DECL|method|getDiffScreen ()
specifier|abstract
name|DiffScreen
name|getDiffScreen
parameter_list|()
function_decl|;
block|}
end_class

end_unit

