begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ConfirmationCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ConfirmationDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|FancyFlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|HintTextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GitwebLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ListBranchesResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidNameException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|errors
operator|.
name|InvalidRevisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DeferredCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|RemoteJsonException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectBranchesScreen
specifier|public
class|class
name|ProjectBranchesScreen
extends|extends
name|ProjectScreen
block|{
DECL|field|branches
specifier|private
name|BranchesTable
name|branches
decl_stmt|;
DECL|field|delBranch
specifier|private
name|Button
name|delBranch
decl_stmt|;
DECL|field|addBranch
specifier|private
name|Button
name|addBranch
decl_stmt|;
DECL|field|nameTxtBox
specifier|private
name|HintTextBox
name|nameTxtBox
decl_stmt|;
DECL|field|irevTxtBox
specifier|private
name|HintTextBox
name|irevTxtBox
decl_stmt|;
DECL|field|addPanel
specifier|private
name|FlowPanel
name|addPanel
decl_stmt|;
DECL|method|ProjectBranchesScreen (final Project.NameKey toShow)
specifier|public
name|ProjectBranchesScreen
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|toShow
parameter_list|)
block|{
name|super
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|Util
operator|.
name|PROJECT_SVC
operator|.
name|listBranches
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
operator|new
name|ScreenLoadCallback
argument_list|<
name|ListBranchesResult
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|preDisplay
parameter_list|(
specifier|final
name|ListBranchesResult
name|result
parameter_list|)
block|{
name|enableForm
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|display
argument_list|(
name|result
operator|.
name|getBranches
argument_list|()
argument_list|)
expr_stmt|;
name|addPanel
operator|.
name|setVisible
argument_list|(
name|result
operator|.
name|getCanAdd
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|display (final List<Branch> listBranches)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|Branch
argument_list|>
name|listBranches
parameter_list|)
block|{
name|branches
operator|.
name|display
argument_list|(
name|listBranches
argument_list|)
expr_stmt|;
name|delBranch
operator|.
name|setVisible
argument_list|(
name|branches
operator|.
name|hasBranchCanDelete
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|enableForm (final boolean on)
specifier|private
name|void
name|enableForm
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
name|delBranch
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|addBranch
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|addPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|addPanel
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|addSshKeyPanel
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|addGrid
init|=
operator|new
name|Grid
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|nameTxtBox
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|nameTxtBox
operator|.
name|setVisibleLength
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setHintText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|defaultBranchName
argument_list|()
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchName
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|nameTxtBox
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|irevTxtBox
operator|.
name|setVisibleLength
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setHintText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|defaultRevisionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getCharCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|initialRevision
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|irevTxtBox
argument_list|)
expr_stmt|;
name|addBranch
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonAddBranch
argument_list|()
argument_list|)
expr_stmt|;
name|addBranch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addPanel
operator|.
name|add
argument_list|(
name|addGrid
argument_list|)
expr_stmt|;
name|addPanel
operator|.
name|add
argument_list|(
name|addBranch
argument_list|)
expr_stmt|;
name|branches
operator|=
operator|new
name|BranchesTable
argument_list|()
expr_stmt|;
name|delBranch
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonDeleteBranch
argument_list|()
argument_list|)
expr_stmt|;
name|delBranch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|branches
operator|.
name|deleteChecked
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|branches
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|delBranch
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|addPanel
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddNewBranch ()
specifier|private
name|void
name|doAddNewBranch
parameter_list|()
block|{
name|String
name|branchName
init|=
name|nameTxtBox
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|branchName
argument_list|)
condition|)
block|{
name|nameTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|rev
init|=
name|irevTxtBox
operator|.
name|getText
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
condition|)
block|{
name|irevTxtBox
operator|.
name|setText
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|DeferredCommand
operator|.
name|addCommand
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|irevTxtBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|irevTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|branchName
operator|.
name|startsWith
argument_list|(
name|Branch
operator|.
name|R_REFS
argument_list|)
condition|)
block|{
name|branchName
operator|=
name|Branch
operator|.
name|R_HEADS
operator|+
name|branchName
expr_stmt|;
block|}
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|PROJECT_SVC
operator|.
name|addBranch
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|branchName
argument_list|,
name|rev
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ListBranchesResult
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|ListBranchesResult
name|result
parameter_list|)
block|{
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|display
argument_list|(
name|result
operator|.
name|getBranches
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|caught
operator|instanceof
name|InvalidNameException
operator|||
name|caught
operator|instanceof
name|RemoteJsonException
operator|&&
name|caught
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|InvalidNameException
operator|.
name|MESSAGE
argument_list|)
condition|)
block|{
name|nameTxtBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|nameTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|caught
operator|instanceof
name|InvalidRevisionException
operator|||
name|caught
operator|instanceof
name|RemoteJsonException
operator|&&
name|caught
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|InvalidRevisionException
operator|.
name|MESSAGE
argument_list|)
condition|)
block|{
name|irevTxtBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|irevTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|BranchesTable
specifier|private
class|class
name|BranchesTable
extends|extends
name|FancyFlexTable
argument_list|<
name|Branch
argument_list|>
block|{
DECL|field|canDelete
name|boolean
name|canDelete
decl_stmt|;
DECL|method|BranchesTable ()
name|BranchesTable
parameter_list|()
block|{
name|table
operator|.
name|setWidth
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getGitwebLink
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteChecked ()
name|void
name|deleteChecked
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|message
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
operator|.
name|append
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchDeletionConfirmationMessage
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
literal|"<p>"
argument_list|)
expr_stmt|;
specifier|final
name|HashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|ids
init|=
operator|new
name|HashSet
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|Branch
name|k
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
literal|",<br>"
argument_list|)
expr_stmt|;
block|}
name|message
operator|.
name|append
argument_list|(
name|k
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|k
operator|.
name|getNameKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|message
operator|.
name|append
argument_list|(
literal|"</p>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|ConfirmationDialog
name|confirmationDialog
init|=
operator|new
name|ConfirmationDialog
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchDeletionDialogTitle
argument_list|()
argument_list|,
operator|new
name|HTML
argument_list|(
name|message
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ConfirmationCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOk
parameter_list|()
block|{
name|Util
operator|.
name|PROJECT_SVC
operator|.
name|deleteBranch
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|ids
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Branch
operator|.
name|NameKey
argument_list|>
name|deleted
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Branch
name|k
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|deleted
operator|.
name|contains
argument_list|(
name|k
operator|.
name|getNameKey
argument_list|()
argument_list|)
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|confirmationDialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
DECL|method|display (final List<Branch> result)
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|Branch
argument_list|>
name|result
parameter_list|)
block|{
name|canDelete
operator|=
literal|false
expr_stmt|;
while|while
condition|(
literal|1
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
name|table
operator|.
name|removeRow
argument_list|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Branch
name|k
range|:
name|result
control|)
block|{
specifier|final
name|int
name|row
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|applyDataRowStyle
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populate (final int row, final Branch k)
name|void
name|populate
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|Branch
name|k
parameter_list|)
block|{
specifier|final
name|GitwebLink
name|c
init|=
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getGitwebLink
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|getCanDelete
argument_list|()
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
operator|new
name|CheckBox
argument_list|()
argument_list|)
expr_stmt|;
name|canDelete
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
name|k
operator|.
name|getShortName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|.
name|getRevision
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|k
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|4
argument_list|,
operator|new
name|Anchor
argument_list|(
literal|"(gitweb)"
argument_list|,
literal|false
argument_list|,
name|c
operator|.
name|toBranch
argument_list|(
name|k
operator|.
name|getNameKey
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|4
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|setRowItem
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
DECL|method|hasBranchCanDelete ()
name|boolean
name|hasBranchCanDelete
parameter_list|()
block|{
return|return
name|canDelete
return|;
block|}
block|}
block|}
end_class

end_unit

