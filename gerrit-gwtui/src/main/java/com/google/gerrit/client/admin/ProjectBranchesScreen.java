begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.admin
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Util
operator|.
name|highlight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ConfirmationCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ConfirmationDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ErrorDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|access
operator|.
name|AccessMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|access
operator|.
name|ProjectAccessInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|actions
operator|.
name|ActionButton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ActionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|GitwebInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|WebLinkInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|BranchInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ProjectApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|HintTextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|OnEditEnabler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|RefNames
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|NpTextBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectBranchesScreen
specifier|public
class|class
name|ProjectBranchesScreen
extends|extends
name|ProjectScreen
block|{
DECL|field|prev
specifier|private
name|Hyperlink
name|prev
decl_stmt|;
DECL|field|next
specifier|private
name|Hyperlink
name|next
decl_stmt|;
DECL|field|branchTable
specifier|private
name|BranchesTable
name|branchTable
decl_stmt|;
DECL|field|delBranch
specifier|private
name|Button
name|delBranch
decl_stmt|;
DECL|field|addBranch
specifier|private
name|Button
name|addBranch
decl_stmt|;
DECL|field|nameTxtBox
specifier|private
name|HintTextBox
name|nameTxtBox
decl_stmt|;
DECL|field|irevTxtBox
specifier|private
name|HintTextBox
name|irevTxtBox
decl_stmt|;
DECL|field|addPanel
specifier|private
name|FlowPanel
name|addPanel
decl_stmt|;
DECL|field|pageSize
specifier|private
name|int
name|pageSize
decl_stmt|;
DECL|field|start
specifier|private
name|int
name|start
decl_stmt|;
DECL|field|filterTxt
specifier|private
name|NpTextBox
name|filterTxt
decl_stmt|;
DECL|field|match
specifier|private
name|String
name|match
decl_stmt|;
DECL|field|query
specifier|private
name|Query
name|query
decl_stmt|;
DECL|method|ProjectBranchesScreen (final Project.NameKey toShow)
specifier|public
name|ProjectBranchesScreen
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|toShow
parameter_list|)
block|{
name|super
argument_list|(
name|toShow
argument_list|)
expr_stmt|;
name|pageSize
operator|=
name|Gerrit
operator|.
name|getUserPreferences
argument_list|()
operator|.
name|changesPerPage
argument_list|()
expr_stmt|;
block|}
DECL|method|parseToken ()
specifier|private
name|void
name|parseToken
parameter_list|()
block|{
name|String
name|token
init|=
name|getToken
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|kvPair
range|:
name|token
operator|.
name|split
argument_list|(
literal|"[,;&/?]"
argument_list|)
control|)
block|{
name|String
index|[]
name|kv
init|=
name|kvPair
operator|.
name|split
argument_list|(
literal|"="
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|kv
operator|.
name|length
operator|!=
literal|2
operator|||
name|kv
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
literal|"filter"
operator|.
name|equals
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|match
operator|=
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"skip"
operator|.
name|equals
argument_list|(
name|kv
index|[
literal|0
index|]
argument_list|)
operator|&&
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
operator|.
name|matches
argument_list|(
literal|"^[\\d]+"
argument_list|)
condition|)
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|kv
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setupNavigationLink (Hyperlink link, String filter, int skip)
specifier|private
name|void
name|setupNavigationLink
parameter_list|(
name|Hyperlink
name|link
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|skip
parameter_list|)
block|{
name|link
operator|.
name|setTargetHistoryToken
argument_list|(
name|getTokenForScreen
argument_list|(
name|filter
argument_list|,
name|skip
argument_list|)
argument_list|)
expr_stmt|;
name|link
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokenForScreen (String filter, int skip)
specifier|private
name|String
name|getTokenForScreen
parameter_list|(
name|String
name|filter
parameter_list|,
name|int
name|skip
parameter_list|)
block|{
name|String
name|token
init|=
name|PageLinks
operator|.
name|toProjectBranches
argument_list|(
name|getProjectKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|+=
literal|"?filter="
operator|+
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skip
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|token
operator|.
name|contains
argument_list|(
literal|"?filter="
argument_list|)
condition|)
block|{
name|token
operator|+=
literal|","
expr_stmt|;
block|}
else|else
block|{
name|token
operator|+=
literal|"?"
expr_stmt|;
block|}
name|token
operator|+=
literal|"skip="
operator|+
name|skip
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|addPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AccessMap
operator|.
name|get
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ProjectAccessInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ProjectAccessInfo
name|result
parameter_list|)
block|{
name|addPanel
operator|.
name|setVisible
argument_list|(
name|result
operator|.
name|canAddRefs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|Query
argument_list|(
name|match
argument_list|)
operator|.
name|start
argument_list|(
name|start
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|savedPanel
operator|=
name|BRANCH
expr_stmt|;
block|}
DECL|method|updateForm ()
specifier|private
name|void
name|updateForm
parameter_list|()
block|{
name|branchTable
operator|.
name|updateDeleteButton
argument_list|()
expr_stmt|;
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|initPageHeader
argument_list|()
expr_stmt|;
name|prev
operator|=
operator|new
name|Hyperlink
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pagedListPrev
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|prev
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|next
operator|=
operator|new
name|Hyperlink
argument_list|(
name|Util
operator|.
name|C
operator|.
name|pagedListNext
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|next
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
specifier|final
name|Grid
name|addGrid
init|=
operator|new
name|Grid
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|addGrid
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|addBranch
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|texBoxLength
init|=
literal|50
decl_stmt|;
name|nameTxtBox
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|nameTxtBox
operator|.
name|setVisibleLength
argument_list|(
name|texBoxLength
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setHintText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|defaultBranchName
argument_list|()
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchName
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|nameTxtBox
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|=
operator|new
name|HintTextBox
argument_list|()
expr_stmt|;
name|irevTxtBox
operator|.
name|setVisibleLength
argument_list|(
name|texBoxLength
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setHintText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|defaultRevisionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|addKeyPressHandler
argument_list|(
operator|new
name|KeyPressHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeEvent
argument_list|()
operator|.
name|getKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setText
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|initialRevision
argument_list|()
operator|+
literal|":"
argument_list|)
expr_stmt|;
name|addGrid
operator|.
name|setWidget
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|irevTxtBox
argument_list|)
expr_stmt|;
name|addBranch
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonAddBranch
argument_list|()
argument_list|)
expr_stmt|;
name|addBranch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|doAddNewBranch
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|addPanel
operator|.
name|add
argument_list|(
name|addGrid
argument_list|)
expr_stmt|;
name|addPanel
operator|.
name|add
argument_list|(
name|addBranch
argument_list|)
expr_stmt|;
name|branchTable
operator|=
operator|new
name|BranchesTable
argument_list|()
expr_stmt|;
name|delBranch
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonDeleteBranch
argument_list|()
argument_list|)
expr_stmt|;
name|delBranch
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|branchTable
operator|.
name|deleteChecked
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HorizontalPanel
name|buttons
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|buttons
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|branchTablePrevNextLinks
argument_list|()
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|delBranch
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|prev
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|branchTable
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|addPanel
argument_list|)
expr_stmt|;
block|}
DECL|method|initPageHeader ()
specifier|private
name|void
name|initPageHeader
parameter_list|()
block|{
name|parseToken
argument_list|()
expr_stmt|;
name|HorizontalPanel
name|hp
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|hp
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|projectFilterPanel
argument_list|()
argument_list|)
expr_stmt|;
name|Label
name|filterLabel
init|=
operator|new
name|Label
argument_list|(
name|Util
operator|.
name|C
operator|.
name|projectFilter
argument_list|()
argument_list|)
decl_stmt|;
name|filterLabel
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|projectFilterLabel
argument_list|()
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|filterLabel
argument_list|)
expr_stmt|;
name|filterTxt
operator|=
operator|new
name|NpTextBox
argument_list|()
expr_stmt|;
name|filterTxt
operator|.
name|setValue
argument_list|(
name|match
argument_list|)
expr_stmt|;
name|filterTxt
operator|.
name|addKeyUpHandler
argument_list|(
operator|new
name|KeyUpHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyUp
parameter_list|(
name|KeyUpEvent
name|event
parameter_list|)
block|{
name|Query
name|q
init|=
operator|new
name|Query
argument_list|(
name|filterTxt
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|equals
argument_list|(
name|q
operator|.
name|qMatch
argument_list|)
condition|)
block|{
name|q
operator|.
name|start
argument_list|(
name|start
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|q
operator|.
name|run
argument_list|()
expr_stmt|;
name|query
operator|=
name|q
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|hp
operator|.
name|add
argument_list|(
name|filterTxt
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|hp
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddNewBranch ()
specifier|private
name|void
name|doAddNewBranch
parameter_list|()
block|{
specifier|final
name|String
name|branchName
init|=
name|nameTxtBox
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|branchName
argument_list|)
condition|)
block|{
name|nameTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|rev
init|=
name|irevTxtBox
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|rev
argument_list|)
condition|)
block|{
name|irevTxtBox
operator|.
name|setText
argument_list|(
literal|"HEAD"
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|irevTxtBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|irevTxtBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ProjectApi
operator|.
name|createBranch
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|branchName
argument_list|,
name|rev
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|BranchInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|BranchInfo
name|branch
parameter_list|)
block|{
name|showAddedBranch
argument_list|(
name|branch
argument_list|)
expr_stmt|;
name|nameTxtBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|irevTxtBox
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|Query
argument_list|(
name|match
argument_list|)
operator|.
name|start
argument_list|(
name|start
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|addBranch
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|selectAllAndFocus
argument_list|(
name|nameTxtBox
argument_list|)
expr_stmt|;
operator|new
name|ErrorDialog
argument_list|(
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|showAddedBranch (BranchInfo branch)
name|void
name|showAddedBranch
parameter_list|(
name|BranchInfo
name|branch
parameter_list|)
block|{
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|openElement
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchCreationConfirmationMessage
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|closeElement
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|b
operator|.
name|openElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|branch
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|closeElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|ConfirmationDialog
name|confirmationDialog
init|=
operator|new
name|ConfirmationDialog
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchCreationDialogTitle
argument_list|()
argument_list|,
name|b
operator|.
name|toSafeHtml
argument_list|()
argument_list|,
operator|new
name|ConfirmationCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOk
parameter_list|()
block|{
comment|//do nothing
block|}
block|}
argument_list|)
decl_stmt|;
name|confirmationDialog
operator|.
name|center
argument_list|()
expr_stmt|;
name|confirmationDialog
operator|.
name|setCancelVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|selectAllAndFocus (TextBox textBox)
specifier|private
specifier|static
name|void
name|selectAllAndFocus
parameter_list|(
name|TextBox
name|textBox
parameter_list|)
block|{
name|textBox
operator|.
name|selectAll
argument_list|()
expr_stmt|;
name|textBox
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|BranchesTable
specifier|private
class|class
name|BranchesTable
extends|extends
name|NavigationTable
argument_list|<
name|BranchInfo
argument_list|>
block|{
DECL|field|updateDeleteHandler
specifier|private
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|updateDeleteHandler
decl_stmt|;
DECL|field|canDelete
name|boolean
name|canDelete
decl_stmt|;
DECL|method|BranchesTable ()
name|BranchesTable
parameter_list|()
block|{
name|table
operator|.
name|setWidth
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Util
operator|.
name|C
operator|.
name|columnBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|updateDeleteHandler
operator|=
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|updateDeleteButton
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|getCheckedRefs ()
name|Set
argument_list|<
name|String
argument_list|>
name|getCheckedRefs
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|refs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|BranchInfo
name|k
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|instanceof
name|CheckBox
operator|&&
operator|(
operator|(
name|CheckBox
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|k
operator|.
name|ref
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|refs
return|;
block|}
DECL|method|setChecked (Set<String> refs)
name|void
name|setChecked
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|refs
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|BranchInfo
name|k
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|!=
literal|null
operator|&&
name|refs
operator|.
name|contains
argument_list|(
name|k
operator|.
name|ref
argument_list|()
argument_list|)
operator|&&
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|instanceof
name|CheckBox
condition|)
block|{
operator|(
operator|(
name|CheckBox
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
operator|)
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|deleteChecked ()
name|void
name|deleteChecked
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|refs
init|=
name|getCheckedRefs
argument_list|()
decl_stmt|;
name|SafeHtmlBuilder
name|b
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|openElement
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchDeletionConfirmationMessage
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|.
name|closeElement
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|b
operator|.
name|openElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|br
argument_list|()
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
name|ref
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|b
operator|.
name|closeElement
argument_list|(
literal|"p"
argument_list|)
expr_stmt|;
if|if
condition|(
name|refs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|updateDeleteButton
argument_list|()
expr_stmt|;
return|return;
block|}
name|delBranch
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ConfirmationDialog
name|confirmationDialog
init|=
operator|new
name|ConfirmationDialog
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|branchDeletionDialogTitle
argument_list|()
argument_list|,
name|b
operator|.
name|toSafeHtml
argument_list|()
argument_list|,
operator|new
name|ConfirmationCallback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOk
parameter_list|()
block|{
name|deleteBranches
argument_list|(
name|refs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCancel
parameter_list|()
block|{
name|branchTable
operator|.
name|updateDeleteButton
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
name|confirmationDialog
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
DECL|method|deleteBranches (final Set<String> branches)
specifier|private
name|void
name|deleteBranches
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|branches
parameter_list|)
block|{
name|ProjectApi
operator|.
name|deleteBranches
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|branches
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
name|query
operator|=
operator|new
name|Query
argument_list|(
name|match
argument_list|)
operator|.
name|start
argument_list|(
name|start
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|query
operator|=
operator|new
name|Query
argument_list|(
name|match
argument_list|)
operator|.
name|start
argument_list|(
name|start
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|display (List<BranchInfo> branches)
name|void
name|display
parameter_list|(
name|List
argument_list|<
name|BranchInfo
argument_list|>
name|branches
parameter_list|)
block|{
name|displaySubset
argument_list|(
name|branches
argument_list|,
literal|0
argument_list|,
name|branches
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|displaySubset (List<BranchInfo> branches, int fromIndex, int toIndex)
name|void
name|displaySubset
parameter_list|(
name|List
argument_list|<
name|BranchInfo
argument_list|>
name|branches
parameter_list|,
name|int
name|fromIndex
parameter_list|,
name|int
name|toIndex
parameter_list|)
block|{
name|canDelete
operator|=
literal|false
expr_stmt|;
while|while
condition|(
literal|1
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|BranchInfo
name|k
range|:
name|branches
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|toIndex
argument_list|)
control|)
block|{
specifier|final
name|int
name|row
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|applyDataRowStyle
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|populate
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populate (int row, BranchInfo k)
name|void
name|populate
parameter_list|(
name|int
name|row
parameter_list|,
name|BranchInfo
name|k
parameter_list|)
block|{
name|GitwebInfo
name|c
init|=
name|Gerrit
operator|.
name|info
argument_list|()
operator|.
name|gitweb
argument_list|()
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|canDelete
argument_list|()
condition|)
block|{
name|CheckBox
name|sel
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|sel
operator|.
name|addValueChangeHandler
argument_list|(
name|updateDeleteHandler
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|sel
argument_list|)
expr_stmt|;
name|canDelete
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
operator|new
name|InlineHTML
argument_list|(
name|highlight
argument_list|(
name|k
operator|.
name|getShortName
argument_list|()
argument_list|,
name|match
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|.
name|revision
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getShortName
argument_list|()
argument_list|)
condition|)
block|{
name|setHeadRevision
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|k
operator|.
name|revision
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|k
operator|.
name|revision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|FlowPanel
name|actionsPanel
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|actionsPanel
operator|.
name|add
argument_list|(
operator|new
name|Anchor
argument_list|(
name|c
operator|.
name|getLinkName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|c
operator|.
name|toBranch
argument_list|(
operator|new
name|Branch
operator|.
name|NameKey
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|k
operator|.
name|ref
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|.
name|webLinks
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|WebLinkInfo
name|webLink
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|k
operator|.
name|webLinks
argument_list|()
argument_list|)
control|)
block|{
name|actionsPanel
operator|.
name|add
argument_list|(
name|webLink
operator|.
name|toAnchor
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|k
operator|.
name|actions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|k
operator|.
name|actions
argument_list|()
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
for|for
control|(
name|ActionInfo
name|a
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|k
operator|.
name|actions
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
control|)
block|{
name|actionsPanel
operator|.
name|add
argument_list|(
operator|new
name|ActionButton
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|k
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|4
argument_list|,
name|actionsPanel
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|String
name|iconCellStyle
init|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
decl_stmt|;
name|String
name|dataCellStyle
init|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
decl_stmt|;
if|if
condition|(
name|RefNames
operator|.
name|REFS_CONFIG
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getShortName
argument_list|()
argument_list|)
operator|||
literal|"HEAD"
operator|.
name|equals
argument_list|(
name|k
operator|.
name|getShortName
argument_list|()
argument_list|)
condition|)
block|{
name|iconCellStyle
operator|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|specialBranchIconCell
argument_list|()
expr_stmt|;
name|dataCellStyle
operator|=
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|specialBranchDataCell
argument_list|()
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|iconCellStyle
argument_list|)
expr_stmt|;
block|}
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|iconCellStyle
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
name|dataCellStyle
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|dataCellStyle
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|4
argument_list|,
name|dataCellStyle
argument_list|)
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
DECL|method|setHeadRevision (final int row, final int column, final String rev)
specifier|private
name|void
name|setHeadRevision
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|,
specifier|final
name|String
name|rev
parameter_list|)
block|{
name|AccessMap
operator|.
name|get
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|ProjectAccessInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ProjectAccessInfo
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|isOwner
argument_list|()
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|getHeadRevisionWidget
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|rev
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeadRevisionWidget (final String headRevision)
specifier|private
name|Widget
name|getHeadRevisionWidget
parameter_list|(
specifier|final
name|String
name|headRevision
parameter_list|)
block|{
name|FlowPanel
name|p
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
specifier|final
name|InlineLabel
name|l
init|=
operator|new
name|InlineLabel
argument_list|(
name|headRevision
argument_list|)
decl_stmt|;
specifier|final
name|Image
name|edit
init|=
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|edit
argument_list|()
argument_list|)
decl_stmt|;
name|edit
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|editHeadButton
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NpTextBox
name|input
init|=
operator|new
name|NpTextBox
argument_list|()
decl_stmt|;
name|input
operator|.
name|setVisibleLength
argument_list|(
literal|35
argument_list|)
expr_stmt|;
name|input
operator|.
name|setValue
argument_list|(
name|headRevision
argument_list|)
expr_stmt|;
name|input
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Button
name|save
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|save
operator|.
name|setText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|saveHeadButton
argument_list|()
argument_list|)
expr_stmt|;
name|save
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Button
name|cancel
init|=
operator|new
name|Button
argument_list|()
decl_stmt|;
name|cancel
operator|.
name|setText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|cancelHeadButton
argument_list|()
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|OnEditEnabler
name|e
init|=
operator|new
name|OnEditEnabler
argument_list|(
name|save
argument_list|)
decl_stmt|;
name|e
operator|.
name|listenTo
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|edit
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|l
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|input
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|save
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|save
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ProjectApi
operator|.
name|setHead
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|NativeString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeString
name|result
parameter_list|)
block|{
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toProjectBranches
argument_list|(
name|getProjectKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|l
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|input
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|input
operator|.
name|setValue
argument_list|(
name|headRevision
argument_list|)
expr_stmt|;
name|save
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|save
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|edit
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|save
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
name|cancel
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
DECL|method|hasBranchCanDelete ()
name|boolean
name|hasBranchCanDelete
parameter_list|()
block|{
return|return
name|canDelete
return|;
block|}
DECL|method|updateDeleteButton ()
name|void
name|updateDeleteButton
parameter_list|()
block|{
name|boolean
name|on
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|!=
literal|null
operator|&&
name|w
operator|instanceof
name|CheckBox
condition|)
block|{
name|CheckBox
name|sel
init|=
operator|(
name|CheckBox
operator|)
name|w
decl_stmt|;
if|if
condition|(
name|sel
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|on
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|delBranch
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
if|if
condition|(
name|row
operator|>
literal|0
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (BranchInfo item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
name|BranchInfo
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|ref
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
if|if
condition|(
name|match
operator|!=
literal|null
condition|)
block|{
name|filterTxt
operator|.
name|setCursorPos
argument_list|(
name|match
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|filterTxt
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|class|Query
specifier|private
class|class
name|Query
block|{
DECL|field|qMatch
specifier|private
name|String
name|qMatch
decl_stmt|;
DECL|field|qStart
specifier|private
name|int
name|qStart
decl_stmt|;
DECL|method|Query (String match)
name|Query
parameter_list|(
name|String
name|match
parameter_list|)
block|{
name|this
operator|.
name|qMatch
operator|=
name|match
expr_stmt|;
block|}
DECL|method|start (int start)
name|Query
name|start
parameter_list|(
name|int
name|start
parameter_list|)
block|{
name|this
operator|.
name|qStart
operator|=
name|start
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|run ()
name|Query
name|run
parameter_list|()
block|{
comment|// Retrieve one more branch than page size to determine if there are more
comment|// branches to display
name|ProjectApi
operator|.
name|getBranches
argument_list|(
name|getProjectKey
argument_list|()
argument_list|,
name|pageSize
operator|+
literal|1
argument_list|,
name|qStart
argument_list|,
name|qMatch
argument_list|,
operator|new
name|ScreenLoadCallback
argument_list|<
name|JsArray
argument_list|<
name|BranchInfo
argument_list|>
argument_list|>
argument_list|(
name|ProjectBranchesScreen
operator|.
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|preDisplay
parameter_list|(
name|JsArray
argument_list|<
name|BranchInfo
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAttached
argument_list|()
condition|)
block|{
comment|// View has been disposed.
block|}
elseif|else
if|if
condition|(
name|query
operator|==
name|Query
operator|.
name|this
condition|)
block|{
name|query
operator|=
literal|null
expr_stmt|;
name|showList
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|showList (JsArray<BranchInfo> result)
name|void
name|showList
parameter_list|(
name|JsArray
argument_list|<
name|BranchInfo
argument_list|>
name|result
parameter_list|)
block|{
name|setToken
argument_list|(
name|getTokenForScreen
argument_list|(
name|qMatch
argument_list|,
name|qStart
argument_list|)
argument_list|)
expr_stmt|;
name|ProjectBranchesScreen
operator|.
name|this
operator|.
name|match
operator|=
name|qMatch
expr_stmt|;
name|ProjectBranchesScreen
operator|.
name|this
operator|.
name|start
operator|=
name|qStart
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|length
argument_list|()
operator|<=
name|pageSize
condition|)
block|{
name|branchTable
operator|.
name|display
argument_list|(
name|Natives
operator|.
name|asList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|next
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|branchTable
operator|.
name|displaySubset
argument_list|(
name|Natives
operator|.
name|asList
argument_list|(
name|result
argument_list|)
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|setupNavigationLink
argument_list|(
name|next
argument_list|,
name|qMatch
argument_list|,
name|qStart
operator|+
name|pageSize
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|qStart
operator|>
literal|0
condition|)
block|{
name|setupNavigationLink
argument_list|(
name|prev
argument_list|,
name|qMatch
argument_list|,
name|qStart
operator|-
name|pageSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|prev
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|delBranch
operator|.
name|setVisible
argument_list|(
name|branchTable
operator|.
name|hasBranchCanDelete
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|checkedRefs
init|=
name|branchTable
operator|.
name|getCheckedRefs
argument_list|()
decl_stmt|;
name|branchTable
operator|.
name|setChecked
argument_list|(
name|checkedRefs
argument_list|)
expr_stmt|;
name|updateForm
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|isCurrentView
argument_list|()
condition|)
block|{
name|display
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

