begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PatchTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NeedsSignInKeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|CommentDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|client
operator|.
name|ClientSideFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|PrettyFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseFileContent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|SparseHtmlFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|BlurHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Focusable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|UIObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AbstractPatchContentTable
specifier|public
specifier|abstract
class|class
name|AbstractPatchContentTable
extends|extends
name|NavigationTable
argument_list|<
name|Object
argument_list|>
implements|implements
name|CommentEditorContainer
implements|,
name|FocusHandler
implements|,
name|BlurHandler
block|{
DECL|field|fileList
specifier|protected
name|PatchTable
name|fileList
decl_stmt|;
DECL|field|accountCache
specifier|protected
name|AccountInfoCache
name|accountCache
init|=
name|AccountInfoCache
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|patchKey
specifier|protected
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|idSideA
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideA
decl_stmt|;
DECL|field|idSideB
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideB
decl_stmt|;
DECL|field|onlyOneHunk
specifier|protected
name|boolean
name|onlyOneHunk
decl_stmt|;
DECL|field|keysComment
specifier|private
specifier|final
name|KeyCommandSet
name|keysComment
decl_stmt|;
DECL|field|regComment
specifier|private
name|HandlerRegistration
name|regComment
decl_stmt|;
DECL|field|keysOpenByEnter
specifier|private
specifier|final
name|KeyCommandSet
name|keysOpenByEnter
decl_stmt|;
DECL|field|regOpenByEnter
specifier|private
name|HandlerRegistration
name|regOpenByEnter
decl_stmt|;
DECL|method|AbstractPatchContentTable ()
specifier|protected
name|AbstractPatchContentTable
parameter_list|()
block|{
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|linePrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|lineNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevChunkKeyCmd
argument_list|(
literal|0
argument_list|,
literal|'p'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkPrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextChunkKeyCmd
argument_list|(
literal|0
argument_list|,
literal|'n'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|chunkNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevCommentCmd
argument_list|(
literal|0
argument_list|,
literal|'P'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentPrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextCommentCmd
argument_list|(
literal|0
argument_list|,
literal|'N'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'o'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysOpenByEnter
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|keysOpenByEnter
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ENTER
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|expandComment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|InsertCommentCommand
argument_list|(
literal|0
argument_list|,
literal|'c'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentInsert
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|PublishCommentsKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyPublishComments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// See CommentEditorPanel
comment|//
name|keysComment
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|commentEditorSet
argument_list|()
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
name|KeyCommand
operator|.
name|M_CTRL
argument_list|,
literal|'s'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentSaveDraft
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysComment
operator|.
name|add
argument_list|(
operator|new
name|NoOpKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ESCAPE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|commentCancelEdit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keysComment
operator|=
literal|null
expr_stmt|;
block|}
name|table
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchContentTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyDraftDelta (final int delta)
specifier|public
name|void
name|notifyDraftDelta
parameter_list|(
specifier|final
name|int
name|delta
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|fileList
operator|.
name|notifyDraftDelta
argument_list|(
name|patchKey
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
name|Widget
name|p
init|=
name|getParent
argument_list|()
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|CommentEditorContainer
condition|)
block|{
operator|(
operator|(
name|CommentEditorContainer
operator|)
name|p
operator|)
operator|.
name|notifyDraftDelta
argument_list|(
name|delta
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|remove (CommentEditorPanel panel)
specifier|public
name|void
name|remove
parameter_list|(
name|CommentEditorPanel
name|panel
parameter_list|)
block|{
specifier|final
name|int
name|nRows
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|nRows
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|int
name|nCells
init|=
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|nCells
condition|;
name|cell
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|==
name|panel
condition|)
block|{
name|destroyEditor
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
expr_stmt|;
name|Widget
name|p
init|=
name|table
decl_stmt|;
while|while
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|p
operator|instanceof
name|Focusable
condition|)
block|{
operator|(
operator|(
name|Focusable
operator|)
name|p
operator|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
block|}
name|p
operator|=
name|p
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getStyleName
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|cell
argument_list|)
operator|.
name|contains
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentHolder
argument_list|()
argument_list|)
condition|)
block|{
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|cell
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setRegisterKeys (final boolean on)
specifier|public
name|void
name|setRegisterKeys
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
name|super
operator|.
name|setRegisterKeys
argument_list|(
name|on
argument_list|)
expr_stmt|;
if|if
condition|(
name|on
operator|&&
name|keysComment
operator|!=
literal|null
operator|&&
name|regComment
operator|==
literal|null
condition|)
block|{
name|regComment
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysComment
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|on
operator|&&
name|regComment
operator|!=
literal|null
condition|)
block|{
name|regComment
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regComment
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|on
operator|&&
name|keysOpenByEnter
operator|!=
literal|null
operator|&&
name|regOpenByEnter
operator|==
literal|null
condition|)
block|{
name|regOpenByEnter
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysOpenByEnter
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|on
operator|&&
name|regOpenByEnter
operator|!=
literal|null
condition|)
block|{
name|regOpenByEnter
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regOpenByEnter
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|display (final Patch.Key k, final PatchSet.Id a, final PatchSet.Id b, final PatchScript s)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|k
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|a
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|b
parameter_list|,
specifier|final
name|PatchScript
name|s
parameter_list|)
block|{
name|patchKey
operator|=
name|k
expr_stmt|;
name|idSideA
operator|=
name|a
expr_stmt|;
name|idSideB
operator|=
name|b
expr_stmt|;
name|render
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|getSparseHtmlFileA (PatchScript s)
specifier|protected
name|SparseHtmlFile
name|getSparseHtmlFileA
parameter_list|(
name|PatchScript
name|s
parameter_list|)
block|{
name|AccountDiffPreference
name|dp
init|=
operator|new
name|AccountDiffPreference
argument_list|(
name|s
operator|.
name|getDiffPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|dp
operator|.
name|setShowWhitespaceErrors
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PrettyFormatter
name|f
init|=
name|ClientSideFormatter
operator|.
name|FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
name|f
operator|.
name|setDiffPrefs
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFileName
argument_list|(
name|s
operator|.
name|getA
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setEditFilter
argument_list|(
name|PrettyFormatter
operator|.
name|A
argument_list|)
expr_stmt|;
name|f
operator|.
name|setEditList
argument_list|(
name|s
operator|.
name|getEdits
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|format
argument_list|(
name|s
operator|.
name|getA
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|getSparseHtmlFileB (PatchScript s)
specifier|protected
name|SparseHtmlFile
name|getSparseHtmlFileB
parameter_list|(
name|PatchScript
name|s
parameter_list|)
block|{
name|AccountDiffPreference
name|dp
init|=
operator|new
name|AccountDiffPreference
argument_list|(
name|s
operator|.
name|getDiffPrefs
argument_list|()
argument_list|)
decl_stmt|;
name|PrettyFormatter
name|f
init|=
name|ClientSideFormatter
operator|.
name|FACTORY
operator|.
name|get
argument_list|()
decl_stmt|;
name|f
operator|.
name|setDiffPrefs
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFileName
argument_list|(
name|s
operator|.
name|getB
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|setEditFilter
argument_list|(
name|PrettyFormatter
operator|.
name|B
argument_list|)
expr_stmt|;
name|f
operator|.
name|setEditList
argument_list|(
name|s
operator|.
name|getEdits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dp
operator|.
name|isSyntaxHighlighting
argument_list|()
operator|&&
name|s
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
operator|&&
operator|!
name|s
operator|.
name|getB
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
name|f
operator|.
name|format
argument_list|(
name|s
operator|.
name|getB
argument_list|()
operator|.
name|apply
argument_list|(
name|s
operator|.
name|getA
argument_list|()
argument_list|,
name|s
operator|.
name|getEdits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|f
operator|.
name|format
argument_list|(
name|s
operator|.
name|getB
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|f
return|;
block|}
DECL|method|render (PatchScript script)
specifier|protected
specifier|abstract
name|void
name|render
parameter_list|(
name|PatchScript
name|script
parameter_list|)
function_decl|;
DECL|method|onInsertComment (PatchLine pl)
specifier|protected
specifier|abstract
name|void
name|onInsertComment
parameter_list|(
name|PatchLine
name|pl
parameter_list|)
function_decl|;
DECL|method|display (CommentDetail comments, boolean expandComments)
specifier|public
specifier|abstract
name|void
name|display
parameter_list|(
name|CommentDetail
name|comments
parameter_list|,
name|boolean
name|expandComments
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|createFlexTable ()
specifier|protected
name|MyFlexTable
name|createFlexTable
parameter_list|()
block|{
return|return
operator|new
name|DoubleClickFlexTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final Object item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|initScript (final PatchScript script)
specifier|protected
name|void
name|initScript
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|)
block|{
if|if
condition|(
name|script
operator|.
name|getEdits
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|SparseFileContent
name|a
init|=
name|script
operator|.
name|getA
argument_list|()
decl_stmt|;
specifier|final
name|SparseFileContent
name|b
init|=
name|script
operator|.
name|getB
argument_list|()
decl_stmt|;
name|onlyOneHunk
operator|=
name|a
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|b
operator|.
name|size
argument_list|()
operator|==
literal|0
expr_stmt|;
block|}
else|else
block|{
name|onlyOneHunk
operator|=
literal|false
expr_stmt|;
block|}
block|}
DECL|method|isChunk (final int row)
specifier|private
name|boolean
name|isChunk
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|Object
name|o
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|onlyOneHunk
operator|&&
name|o
operator|instanceof
name|PatchLine
condition|)
block|{
specifier|final
name|PatchLine
name|pl
init|=
operator|(
name|PatchLine
operator|)
name|o
decl_stmt|;
switch|switch
condition|(
name|pl
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DELETE
case|:
case|case
name|INSERT
case|:
case|case
name|REPLACE
case|:
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|CommentList
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|findChunkStart (int row)
specifier|private
name|int
name|findChunkStart
parameter_list|(
name|int
name|row
parameter_list|)
block|{
while|while
condition|(
literal|0
operator|<=
name|row
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|--
expr_stmt|;
block|}
return|return
name|row
operator|+
literal|1
return|;
block|}
DECL|method|findChunkEnd (int row)
specifier|private
name|int
name|findChunkEnd
parameter_list|(
name|int
name|row
parameter_list|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|max
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
return|return
name|row
operator|-
literal|1
return|;
block|}
DECL|method|oneBefore (final int begin)
specifier|private
specifier|static
name|int
name|oneBefore
parameter_list|(
specifier|final
name|int
name|begin
parameter_list|)
block|{
return|return
literal|1
operator|<=
name|begin
condition|?
name|begin
operator|-
literal|1
else|:
name|begin
return|;
block|}
DECL|method|oneAfter (final int end)
specifier|private
name|int
name|oneAfter
parameter_list|(
specifier|final
name|int
name|end
parameter_list|)
block|{
return|return
name|end
operator|+
literal|1
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|?
name|end
operator|+
literal|1
else|:
name|end
return|;
block|}
DECL|method|moveToPrevChunk (int row)
specifier|private
name|void
name|moveToPrevChunk
parameter_list|(
name|int
name|row
parameter_list|)
block|{
while|while
condition|(
literal|0
operator|<=
name|row
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|--
expr_stmt|;
block|}
for|for
control|(
init|;
literal|0
operator|<=
name|row
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
specifier|final
name|int
name|start
init|=
name|findChunkStart
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|movePointerTo
argument_list|(
name|start
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|start
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No prior hunk found? Try to hit the first line in the file.
comment|//
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|moveToNextChunk (int row)
specifier|private
name|void
name|moveToNextChunk
parameter_list|(
name|int
name|row
parameter_list|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|max
operator|&&
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
for|for
control|(
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|isChunk
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|row
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|findChunkEnd
argument_list|(
name|row
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No next hunk found? Try to hit the last line in the file.
comment|//
for|for
control|(
name|row
operator|=
name|max
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|moveToPrevComment (int row)
specifier|private
name|void
name|moveToPrevComment
parameter_list|(
name|int
name|row
parameter_list|)
block|{
while|while
condition|(
literal|0
operator|<=
name|row
operator|&&
name|isComment
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|--
expr_stmt|;
block|}
for|for
control|(
init|;
literal|0
operator|<=
name|row
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|isComment
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|row
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No prior comment found? Try to hit the first line in the file.
comment|//
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|moveToNextComment (int row)
specifier|private
name|void
name|moveToNextComment
parameter_list|(
name|int
name|row
parameter_list|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|max
operator|&&
name|isComment
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|row
operator|++
expr_stmt|;
block|}
for|for
control|(
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|isComment
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|scrollIntoView
argument_list|(
name|oneBefore
argument_list|(
name|row
argument_list|)
argument_list|,
name|oneAfter
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
comment|// No next comment found? Try to hit the last line in the file.
comment|//
for|for
control|(
name|row
operator|=
name|max
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|isComment (int row)
specifier|private
name|boolean
name|isComment
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|instanceof
name|CommentList
return|;
block|}
comment|/** Invoked when the user double clicks on a table cell. */
DECL|method|onCellDoubleClick (int row, int column)
specifier|protected
specifier|abstract
name|void
name|onCellDoubleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/** Invoked when the user clicks on a table cell. */
DECL|method|onCellSingleClick (int row, int column)
specifier|protected
specifier|abstract
name|void
name|onCellSingleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
comment|/**    * Invokes createCommentEditor() with an empty string as value for the comment    * parent UUID. This method is invoked by callers that want to create an    * editor for a comment that is not a reply.    */
DECL|method|createCommentEditor (final int suggestRow, final int column, final int line, final short file)
specifier|protected
name|void
name|createCommentEditor
parameter_list|(
specifier|final
name|int
name|suggestRow
parameter_list|,
specifier|final
name|int
name|column
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|short
name|file
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
if|if
condition|(
literal|1
operator|<=
name|line
condition|)
block|{
specifier|final
name|Patch
operator|.
name|Key
name|parentKey
decl_stmt|;
specifier|final
name|short
name|side
decl_stmt|;
switch|switch
condition|(
name|file
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|idSideA
operator|==
literal|null
condition|)
block|{
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideB
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|0
expr_stmt|;
block|}
else|else
block|{
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideA
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|1
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
name|parentKey
operator|=
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|idSideB
argument_list|,
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|side
operator|=
operator|(
name|short
operator|)
literal|1
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected file id "
operator|+
name|file
argument_list|)
throw|;
block|}
specifier|final
name|PatchLineComment
name|newComment
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
name|parentKey
argument_list|,
literal|null
argument_list|)
argument_list|,
name|line
argument_list|,
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|newComment
operator|.
name|setSide
argument_list|(
name|side
argument_list|)
expr_stmt|;
name|newComment
operator|.
name|setMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|findOrCreateCommentEditor
argument_list|(
name|suggestRow
argument_list|,
name|column
argument_list|,
name|newComment
argument_list|,
literal|true
argument_list|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findOrCreateCommentEditor (final int suggestRow, final int column, final PatchLineComment newComment, final boolean create)
specifier|private
name|CommentEditorPanel
name|findOrCreateCommentEditor
parameter_list|(
specifier|final
name|int
name|suggestRow
parameter_list|,
specifier|final
name|int
name|column
parameter_list|,
specifier|final
name|PatchLineComment
name|newComment
parameter_list|,
specifier|final
name|boolean
name|create
parameter_list|)
block|{
name|int
name|row
init|=
name|suggestRow
decl_stmt|;
name|int
name|spans
index|[]
init|=
operator|new
name|int
index|[
name|column
operator|+
literal|1
index|]
decl_stmt|;
name|FIND_ROW
label|:
while|while
condition|(
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
operator|&&
name|cell
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|cell
operator|++
control|)
block|{
while|while
condition|(
name|col
operator|<
name|column
operator|&&
literal|0
operator|<
name|spans
index|[
name|col
index|]
condition|)
block|{
name|spans
index|[
name|col
operator|++
index|]
operator|--
expr_stmt|;
block|}
name|spans
index|[
name|col
index|]
operator|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
name|column
condition|)
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CommentEditorPanel
operator|&&
operator|(
operator|(
name|CommentEditorPanel
operator|)
name|w
operator|)
operator|.
name|getComment
argument_list|()
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|equals
argument_list|(
name|newComment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
condition|)
block|{
comment|// Don't insert two editors on the same position, it doesn't make
comment|// any sense to the user.
comment|//
return|return
operator|(
operator|(
name|CommentEditorPanel
operator|)
name|w
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|w
operator|instanceof
name|CommentPanel
condition|)
block|{
if|if
condition|(
name|newComment
operator|!=
literal|null
operator|&&
name|newComment
operator|.
name|getParentUuid
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// If we are a reply, we were given the exact row to insert
comment|// ourselves at. We should be before this panel so break.
comment|//
break|break
name|FIND_ROW
break|;
block|}
name|row
operator|++
expr_stmt|;
name|cell
operator|--
expr_stmt|;
block|}
else|else
block|{
break|break
name|FIND_ROW
break|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|newComment
operator|==
literal|null
operator|||
operator|!
name|create
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|CommentEditorPanel
name|ed
init|=
operator|new
name|CommentEditorPanel
argument_list|(
name|newComment
argument_list|)
decl_stmt|;
name|ed
operator|.
name|addFocusHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ed
operator|.
name|addBlurHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|boolean
name|isCommentRow
init|=
literal|false
decl_stmt|;
name|boolean
name|needInsert
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
condition|;
name|cell
operator|++
control|)
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CommentEditorPanel
operator|||
name|w
operator|instanceof
name|CommentPanel
condition|)
block|{
if|if
condition|(
name|column
operator|==
name|cell
condition|)
block|{
name|needInsert
operator|=
literal|true
expr_stmt|;
block|}
name|isCommentRow
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|needInsert
operator|||
operator|!
name|isCommentRow
condition|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|styleCommentRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|styleLastCommentCell
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|int
name|span
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
literal|1
init|;
name|r
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|boolean
name|hasComment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
specifier|final
name|Widget
name|w
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|instanceof
name|CommentPanel
operator|||
name|w
operator|instanceof
name|CommentEditorPanel
condition|)
block|{
if|if
condition|(
name|c
operator|!=
name|column
condition|)
block|{
name|hasComment
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|hasComment
condition|)
block|{
name|table
operator|.
name|removeCell
argument_list|(
name|r
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|span
operator|++
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|span
operator|>
literal|1
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|span
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|r
init|=
name|row
operator|-
literal|1
init|;
name|r
operator|>
literal|0
condition|;
name|r
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|r
argument_list|)
operator|instanceof
name|CommentList
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
name|getRowItem
argument_list|(
name|r
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ed
return|;
block|}
DECL|method|insertRow (final int row)
specifier|protected
name|void
name|insertRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (final int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|Object
name|item
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|CommentList
condition|)
block|{
for|for
control|(
specifier|final
name|CommentPanel
name|p
range|:
operator|(
operator|(
name|CommentList
operator|)
name|item
operator|)
operator|.
name|panels
control|)
block|{
name|p
operator|.
name|setOpen
argument_list|(
operator|!
name|p
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setAccountInfoCache (final AccountInfoCache aic)
specifier|public
name|void
name|setAccountInfoCache
parameter_list|(
specifier|final
name|AccountInfoCache
name|aic
parameter_list|)
block|{
assert|assert
name|aic
operator|!=
literal|null
assert|;
name|accountCache
operator|=
name|aic
expr_stmt|;
block|}
DECL|method|destroyEditor (final int row, final int col)
specifier|private
name|void
name|destroyEditor
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|)
block|{
name|table
operator|.
name|clearCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
specifier|final
name|int
name|span
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
decl_stmt|;
name|boolean
name|removeRow
init|=
literal|true
decl_stmt|;
specifier|final
name|int
name|nCells
init|=
name|table
operator|.
name|getCellCount
argument_list|(
name|row
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|cell
init|=
literal|0
init|;
name|cell
operator|<
name|nCells
condition|;
name|cell
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|cell
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|removeRow
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|removeRow
condition|)
block|{
for|for
control|(
name|int
name|r
init|=
name|row
operator|-
literal|1
init|;
literal|0
operator|<=
name|r
condition|;
name|r
operator|--
control|)
block|{
name|boolean
name|data
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|r
argument_list|)
condition|;
name|c
operator|++
control|)
block|{
name|data
operator||=
name|table
operator|.
name|getWidget
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
operator|!=
literal|null
expr_stmt|;
specifier|final
name|int
name|s
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|getRowSpan
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|r
operator|+
name|s
operator|==
name|row
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|r
argument_list|,
name|c
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|data
condition|)
block|{
break|break;
block|}
block|}
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
comment|//
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|span
operator|!=
literal|1
condition|)
block|{
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setRowSpan
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|r
init|=
name|row
operator|+
literal|1
init|;
name|r
operator|<
name|row
operator|+
name|span
condition|;
name|r
operator|++
control|)
block|{
name|table
operator|.
name|insertCell
argument_list|(
name|r
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
comment|//
name|r
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffText
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|bindComment (final int row, final int col, final PatchLineComment line, final boolean isLast, boolean expandComment)
specifier|protected
name|void
name|bindComment
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|PatchLineComment
name|line
parameter_list|,
specifier|final
name|boolean
name|isLast
parameter_list|,
name|boolean
name|expandComment
parameter_list|)
block|{
if|if
condition|(
name|line
operator|.
name|getStatus
argument_list|()
operator|==
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
specifier|final
name|CommentEditorPanel
name|plc
init|=
operator|new
name|CommentEditorPanel
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|plc
operator|.
name|addFocusHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|plc
operator|.
name|addBlurHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|plc
argument_list|)
expr_stmt|;
name|styleLastCommentCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|AccountInfo
name|author
init|=
name|accountCache
operator|.
name|get
argument_list|(
name|line
operator|.
name|getAuthor
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PublishedCommentPanel
name|panel
init|=
operator|new
name|PublishedCommentPanel
argument_list|(
name|author
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|panel
operator|.
name|setOpen
argument_list|(
name|expandComment
argument_list|)
expr_stmt|;
name|panel
operator|.
name|addFocusHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|panel
operator|.
name|addBlurHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|panel
argument_list|)
expr_stmt|;
name|styleLastCommentCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|CommentList
name|l
init|=
operator|(
name|CommentList
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|CommentList
argument_list|()
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|comments
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|l
operator|.
name|panels
operator|.
name|add
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
name|styleCommentRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFocus (FocusEvent event)
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
comment|// when the comment panel gets focused (actually when a button inside the
comment|// comment panel gets focused) we have to unregister the key binding for
comment|// ENTER that expands/collapses the comment panel, if we don't do this the
comment|// focused button in the comment panel cannot be triggered by pressing ENTER
comment|// since ENTER would then be already consumed by this key binding
if|if
condition|(
name|regOpenByEnter
operator|!=
literal|null
condition|)
block|{
name|regOpenByEnter
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regOpenByEnter
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onBlur (BlurEvent event)
specifier|public
name|void
name|onBlur
parameter_list|(
name|BlurEvent
name|event
parameter_list|)
block|{
comment|// when the comment panel gets blurred (actually when a button inside the
comment|// comment panel gets blurred) we have to re-register the key binding for
comment|// ENTER that expands/collapses the comment panel
if|if
condition|(
name|keysOpenByEnter
operator|!=
literal|null
operator|&&
name|regOpenByEnter
operator|==
literal|null
condition|)
block|{
name|regOpenByEnter
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysOpenByEnter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|styleCommentRow (final int row)
specifier|private
name|void
name|styleCommentRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|Element
name|iconCell
init|=
name|fmt
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|UIObject
operator|.
name|setStyleName
argument_list|(
name|DOM
operator|.
name|getParent
argument_list|(
name|iconCell
argument_list|)
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentHolder
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|styleLastCommentCell (final int row, final int col)
specifier|private
name|void
name|styleLastCommentCell
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|)
block|{
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|removeStyleName
argument_list|(
name|row
operator|-
literal|1
argument_list|,
name|col
argument_list|,
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelLast
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentHolder
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelLast
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|fmt
operator|.
name|getStyleName
argument_list|(
name|row
argument_list|,
name|col
operator|-
literal|1
argument_list|)
operator|.
name|contains
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentHolder
argument_list|()
argument_list|)
condition|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentHolderLeftmost
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|CommentList
specifier|protected
specifier|static
class|class
name|CommentList
block|{
DECL|field|comments
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|panels
specifier|final
name|List
argument_list|<
name|PublishedCommentPanel
argument_list|>
name|panels
init|=
operator|new
name|ArrayList
argument_list|<
name|PublishedCommentPanel
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|DoubleClickFlexTable
specifier|protected
class|class
name|DoubleClickFlexTable
extends|extends
name|MyFlexTable
block|{
DECL|method|DoubleClickFlexTable ()
specifier|public
name|DoubleClickFlexTable
parameter_list|()
block|{
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONDBLCLICK
operator||
name|Event
operator|.
name|ONCLICK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onBrowserEvent (final Event event)
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONCLICK
case|:
block|{
comment|// Find out which cell was actually clicked.
specifier|final
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
break|break;
block|}
specifier|final
name|int
name|row
init|=
name|rowOf
argument_list|(
name|td
argument_list|)
decl_stmt|;
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|onCellSingleClick
argument_list|(
name|rowOf
argument_list|(
name|td
argument_list|)
argument_list|,
name|columnOf
argument_list|(
name|td
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
break|break;
block|}
case|case
name|Event
operator|.
name|ONDBLCLICK
case|:
block|{
comment|// Find out which cell was actually clicked.
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|onCellDoubleClick
argument_list|(
name|rowOf
argument_list|(
name|td
argument_list|)
argument_list|,
name|columnOf
argument_list|(
name|td
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NoOpKeyCommand
specifier|public
specifier|static
class|class
name|NoOpKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|NoOpKeyCommand (int mask, int key, String help)
specifier|public
name|NoOpKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{     }
block|}
DECL|class|InsertCommentCommand
specifier|public
class|class
name|InsertCommentCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|InsertCommentCommand (int mask, int key, String help)
specifier|public
name|InsertCommentCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
name|getCurrentRow
argument_list|()
init|;
literal|0
operator|<=
name|row
condition|;
name|row
operator|--
control|)
block|{
specifier|final
name|Object
name|item
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|instanceof
name|PatchLine
condition|)
block|{
name|onInsertComment
argument_list|(
operator|(
name|PatchLine
operator|)
name|item
argument_list|)
expr_stmt|;
return|return;
block|}
elseif|else
if|if
condition|(
name|item
operator|instanceof
name|CommentList
condition|)
block|{
continue|continue;
block|}
else|else
block|{
return|return;
block|}
block|}
block|}
block|}
DECL|class|PublishCommentsKeyCommand
specifier|public
class|class
name|PublishCommentsKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|PublishCommentsKeyCommand (int mask, char key, String help)
specifier|public
name|PublishCommentsKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|id
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|Dispatcher
operator|.
name|toPublish
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrevChunkKeyCmd
specifier|public
class|class
name|PrevChunkKeyCmd
extends|extends
name|KeyCommand
block|{
DECL|method|PrevChunkKeyCmd (int mask, int key, String help)
specifier|public
name|PrevChunkKeyCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToPrevChunk
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NextChunkKeyCmd
specifier|public
class|class
name|NextChunkKeyCmd
extends|extends
name|KeyCommand
block|{
DECL|method|NextChunkKeyCmd (int mask, int key, String help)
specifier|public
name|NextChunkKeyCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToNextChunk
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PrevCommentCmd
specifier|public
class|class
name|PrevCommentCmd
extends|extends
name|KeyCommand
block|{
DECL|method|PrevCommentCmd (int mask, int key, String help)
specifier|public
name|PrevCommentCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToPrevComment
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|NextCommentCmd
specifier|public
class|class
name|NextCommentCmd
extends|extends
name|KeyCommand
block|{
DECL|method|NextCommentCmd (int mask, int key, String help)
specifier|public
name|NextCommentCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|ensurePointerVisible
argument_list|()
expr_stmt|;
name|moveToNextComment
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PublishedCommentPanel
specifier|private
class|class
name|PublishedCommentPanel
extends|extends
name|CommentPanel
implements|implements
name|ClickHandler
block|{
DECL|field|comment
specifier|final
name|PatchLineComment
name|comment
decl_stmt|;
DECL|field|reply
specifier|final
name|Button
name|reply
decl_stmt|;
DECL|field|replyDone
specifier|final
name|Button
name|replyDone
decl_stmt|;
DECL|method|PublishedCommentPanel (final AccountInfo author, final PatchLineComment c)
name|PublishedCommentPanel
parameter_list|(
specifier|final
name|AccountInfo
name|author
parameter_list|,
specifier|final
name|PatchLineComment
name|c
parameter_list|)
block|{
name|super
argument_list|(
name|author
argument_list|,
name|c
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|c
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|c
expr_stmt|;
name|reply
operator|=
operator|new
name|Button
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonReply
argument_list|()
argument_list|)
expr_stmt|;
name|reply
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|replyDone
operator|=
operator|new
name|Button
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|buttonReplyDone
argument_list|()
argument_list|)
expr_stmt|;
name|replyDone
operator|.
name|addClickHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|replyDone
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onClick (final ClickEvent event)
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
if|if
condition|(
name|reply
operator|==
name|event
operator|.
name|getSource
argument_list|()
condition|)
block|{
name|createReplyEditor
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|replyDone
operator|==
name|event
operator|.
name|getSource
argument_list|()
condition|)
block|{
name|cannedReply
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|cannedReplyDone
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createReplyEditor ()
specifier|private
name|void
name|createReplyEditor
parameter_list|()
block|{
specifier|final
name|PatchLineComment
name|newComment
init|=
name|newComment
argument_list|()
decl_stmt|;
name|newComment
operator|.
name|setMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|findOrCreateEditor
argument_list|(
name|newComment
argument_list|,
literal|true
argument_list|)
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|cannedReply (String message)
specifier|private
name|void
name|cannedReply
parameter_list|(
name|String
name|message
parameter_list|)
block|{
specifier|final
name|PatchLineComment
name|newComment
init|=
name|newComment
argument_list|()
decl_stmt|;
name|newComment
operator|.
name|setMessage
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|CommentEditorPanel
name|p
init|=
name|findOrCreateEditor
argument_list|(
name|newComment
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|enableButtons
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|saveDraft
argument_list|(
name|newComment
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PatchLineComment
name|result
parameter_list|)
block|{
name|enableButtons
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|notifyDraftDelta
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|findOrCreateEditor
argument_list|(
name|result
argument_list|,
literal|true
argument_list|)
operator|.
name|setOpen
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|enableButtons
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|p
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|p
operator|.
name|setOpen
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|findOrCreateEditor ( PatchLineComment newComment, boolean create)
specifier|private
name|CommentEditorPanel
name|findOrCreateEditor
parameter_list|(
name|PatchLineComment
name|newComment
parameter_list|,
name|boolean
name|create
parameter_list|)
block|{
name|int
name|row
init|=
name|rowOf
argument_list|(
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|column
init|=
name|columnOf
argument_list|(
name|getElement
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|findOrCreateCommentEditor
argument_list|(
name|row
operator|+
literal|1
argument_list|,
name|column
argument_list|,
name|newComment
argument_list|,
name|create
argument_list|)
return|;
block|}
DECL|method|newComment ()
specifier|private
name|PatchLineComment
name|newComment
parameter_list|()
block|{
name|PatchLineComment
name|newComment
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
name|comment
operator|.
name|getLine
argument_list|()
argument_list|,
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|comment
operator|.
name|getKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|newComment
operator|.
name|setSide
argument_list|(
name|comment
operator|.
name|getSide
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|newComment
return|;
block|}
block|}
block|}
end_class

end_unit

