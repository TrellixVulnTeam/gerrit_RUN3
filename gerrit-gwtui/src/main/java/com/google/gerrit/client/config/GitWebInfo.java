begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.config
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|config
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
operator|.
name|RevisionInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ParameterizedString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|GitWebInfo
specifier|public
class|class
name|GitWebInfo
extends|extends
name|JavaScriptObject
block|{
DECL|method|url ()
specifier|public
specifier|final
specifier|native
name|String
name|url
parameter_list|()
comment|/*-{ return this.url; }-*/
function_decl|;
DECL|method|type ()
specifier|public
specifier|final
specifier|native
name|GitWebTypeInfo
name|type
parameter_list|()
comment|/*-{ return this.type; }-*/
function_decl|;
comment|/**    * Checks whether the given patch set can be linked.    *    * Draft patch sets can only be linked if linking of drafts was enabled by    * configuration.    *    * @param ps patch set to check whether it can be linked    * @return true if the patch set can be linked, otherwise false    */
DECL|method|canLink (PatchSet ps)
specifier|public
specifier|final
name|boolean
name|canLink
parameter_list|(
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
operator|!
name|ps
operator|.
name|isDraft
argument_list|()
operator|||
name|type
argument_list|()
operator|.
name|linkDrafts
argument_list|()
return|;
block|}
comment|/**    * Checks whether the given revision can be linked.    *    * Draft revisions can only be linked if linking of drafts was enabled by    * configuration.    *    * @param revision revision to check whether it can be linked    * @return true if the revision can be linked, otherwise false    */
DECL|method|canLink (RevisionInfo revision)
specifier|public
specifier|final
name|boolean
name|canLink
parameter_list|(
name|RevisionInfo
name|revision
parameter_list|)
block|{
return|return
name|revision
operator|.
name|draft
argument_list|()
operator|||
name|type
argument_list|()
operator|.
name|linkDrafts
argument_list|()
return|;
block|}
comment|/**    * Returns the name for GitWeb links.    *    * @return the name for GitWeb links    */
DECL|method|getLinkName ()
specifier|public
specifier|final
name|String
name|getLinkName
parameter_list|()
block|{
return|return
literal|"("
operator|+
name|type
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|/**    * Returns the GitWeb link to a revision.    *    * @param project the name of the project    * @param commit the commit ID    * @return GitWeb link to a revision    */
DECL|method|toRevision (String project, String commit)
specifier|public
specifier|final
name|String
name|toRevision
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|commit
parameter_list|)
block|{
name|ParameterizedString
name|pattern
init|=
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|revision
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"project"
argument_list|,
name|encode
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"commit"
argument_list|,
name|encode
argument_list|(
name|commit
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|url
argument_list|()
operator|+
name|pattern
operator|.
name|replace
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Returns the GitWeb link to a revision.    *    * @param project the name of the project    * @param ps the patch set    * @return GitWeb link to a revision    */
DECL|method|toRevision (Project.NameKey project, PatchSet ps)
specifier|public
specifier|final
name|String
name|toRevision
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|PatchSet
name|ps
parameter_list|)
block|{
return|return
name|toRevision
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|,
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Returns the GitWeb link to a project.    *    * @param project the project name key    * @return GitWeb link to a project    */
DECL|method|toProject (Project.NameKey project)
specifier|public
specifier|final
name|String
name|toProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|ParameterizedString
name|pattern
init|=
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|project
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"project"
argument_list|,
name|encode
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|url
argument_list|()
operator|+
name|pattern
operator|.
name|replace
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Returns the GitWeb link to a branch.    *    * @param branch the branch name key    * @return GitWeb link to a branch    */
DECL|method|toBranch (Branch.NameKey branch)
specifier|public
specifier|final
name|String
name|toBranch
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|ParameterizedString
name|pattern
init|=
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|branch
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"project"
argument_list|,
name|encode
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"branch"
argument_list|,
name|encode
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|url
argument_list|()
operator|+
name|pattern
operator|.
name|replace
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Returns the GitWeb link to a file.    *    * @param project the branch name key    * @param commit the commit ID    * @param file the path of the file    * @return GitWeb link to a file    */
DECL|method|toFile (String project, String commit, String file)
specifier|public
specifier|final
name|String
name|toFile
parameter_list|(
name|String
name|project
parameter_list|,
name|String
name|commit
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"project"
argument_list|,
name|encode
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"commit"
argument_list|,
name|encode
argument_list|(
name|commit
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"file"
argument_list|,
name|encode
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|ParameterizedString
name|pattern
init|=
operator|(
name|file
operator|==
literal|null
operator|||
name|file
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|rootTree
argument_list|()
argument_list|)
else|:
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|file
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|url
argument_list|()
operator|+
name|pattern
operator|.
name|replace
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Returns the GitWeb link to a file history.    *    * @param branch the branch name key    * @param file the path of the file    * @return GitWeb link to a file history    */
DECL|method|toFileHistory (Branch.NameKey branch, String file)
specifier|public
specifier|final
name|String
name|toFileHistory
parameter_list|(
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|,
name|String
name|file
parameter_list|)
block|{
name|ParameterizedString
name|pattern
init|=
operator|new
name|ParameterizedString
argument_list|(
name|type
argument_list|()
operator|.
name|fileHistory
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"project"
argument_list|,
name|encode
argument_list|(
name|branch
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"branch"
argument_list|,
name|encode
argument_list|(
name|branch
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|put
argument_list|(
literal|"file"
argument_list|,
name|encode
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|url
argument_list|()
operator|+
name|pattern
operator|.
name|replace
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|encode (String segment)
specifier|private
specifier|final
name|String
name|encode
parameter_list|(
name|String
name|segment
parameter_list|)
block|{
if|if
condition|(
name|type
argument_list|()
operator|.
name|urlEncode
argument_list|()
condition|)
block|{
return|return
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|type
argument_list|()
operator|.
name|replacePathSeparator
argument_list|(
name|segment
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|segment
return|;
block|}
block|}
DECL|method|GitWebInfo ()
specifier|protected
name|GitWebInfo
parameter_list|()
block|{   }
block|}
end_class

end_unit

