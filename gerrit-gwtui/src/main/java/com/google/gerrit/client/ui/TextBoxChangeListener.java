begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|FocusHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseUpEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|MouseUpHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|GwtEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TextBoxBase
import|;
end_import

begin_class
DECL|class|TextBoxChangeListener
specifier|public
specifier|abstract
class|class
name|TextBoxChangeListener
implements|implements
name|KeyPressHandler
implements|,
name|KeyDownHandler
implements|,
name|MouseUpHandler
block|{
DECL|field|oldText
specifier|private
name|String
name|oldText
decl_stmt|;
DECL|method|TextBoxChangeListener (final TextBoxBase tb)
specifier|public
name|TextBoxChangeListener
parameter_list|(
specifier|final
name|TextBoxBase
name|tb
parameter_list|)
block|{
name|oldText
operator|=
name|tb
operator|.
name|getText
argument_list|()
expr_stmt|;
name|tb
operator|.
name|addKeyPressHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Is there another way to capture middle button X11 pastes in browsers
comment|// which do not yet support ONPASTE events (Firefox)?
name|tb
operator|.
name|addMouseUpHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Resetting the "original text" on focus ensures that we are
comment|// up to date with non-user updates of the text (calls to
comment|// setText()...) and also up to date with user changes which
comment|// occurred after enabling "widget".
name|tb
operator|.
name|addFocusHandler
argument_list|(
operator|new
name|FocusHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFocus
parameter_list|(
name|FocusEvent
name|event
parameter_list|)
block|{
name|oldText
operator|=
name|tb
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// CTRL-V Pastes in Chrome seem only detectable via BrowserEvents or
comment|// KeyDownEvents, the latter is better.
name|tb
operator|.
name|addKeyDownHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent e)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|e
parameter_list|)
block|{
name|on
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyDown (final KeyDownEvent e)
specifier|public
name|void
name|onKeyDown
parameter_list|(
specifier|final
name|KeyDownEvent
name|e
parameter_list|)
block|{
name|on
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onMouseUp (final MouseUpEvent e)
specifier|public
name|void
name|onMouseUp
parameter_list|(
specifier|final
name|MouseUpEvent
name|e
parameter_list|)
block|{
name|on
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|method|on (final GwtEvent<?> e)
specifier|private
name|void
name|on
parameter_list|(
specifier|final
name|GwtEvent
argument_list|<
name|?
argument_list|>
name|e
parameter_list|)
block|{
specifier|final
name|TextBoxBase
name|tb
init|=
operator|(
name|TextBoxBase
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tb
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|oldText
argument_list|)
condition|)
block|{
name|onTextChanged
argument_list|(
name|tb
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|oldText
operator|=
name|tb
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// The text appears to not always get updated until the handlers complete.
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
if|if
condition|(
operator|!
name|tb
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
name|oldText
argument_list|)
condition|)
block|{
name|onTextChanged
argument_list|(
name|tb
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|oldText
operator|=
name|tb
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onTextChanged (String newText)
specifier|public
specifier|abstract
name|void
name|onTextChanged
parameter_list|(
name|String
name|newText
parameter_list|)
function_decl|;
block|}
end_class

end_unit

