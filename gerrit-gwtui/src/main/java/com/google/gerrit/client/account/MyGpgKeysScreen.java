begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2015 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|GpgKeyInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|FancyFlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiBinder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiField
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|uibinder
operator|.
name|client
operator|.
name|UiHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|StatusCodeException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|CheckBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|VerticalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|clippy
operator|.
name|client
operator|.
name|CopyableLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|NpTextArea
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|MyGpgKeysScreen
specifier|public
class|class
name|MyGpgKeysScreen
extends|extends
name|SettingsScreen
block|{
DECL|interface|Binder
interface|interface
name|Binder
extends|extends
name|UiBinder
argument_list|<
name|HTMLPanel
argument_list|,
name|MyGpgKeysScreen
argument_list|>
block|{}
DECL|field|uiBinder
specifier|private
specifier|static
specifier|final
name|Binder
name|uiBinder
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Binder
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|UiField
argument_list|(
name|provided
operator|=
literal|true
argument_list|)
DECL|field|keys
name|GpgKeyTable
name|keys
decl_stmt|;
DECL|field|deleteKey
annotation|@
name|UiField
name|Button
name|deleteKey
decl_stmt|;
DECL|field|addKey
annotation|@
name|UiField
name|Button
name|addKey
decl_stmt|;
DECL|field|addKeyBlock
annotation|@
name|UiField
name|VerticalPanel
name|addKeyBlock
decl_stmt|;
DECL|field|keyText
annotation|@
name|UiField
name|NpTextArea
name|keyText
decl_stmt|;
DECL|field|errorPanel
annotation|@
name|UiField
name|VerticalPanel
name|errorPanel
decl_stmt|;
DECL|field|errorText
annotation|@
name|UiField
name|Label
name|errorText
decl_stmt|;
DECL|field|clearButton
annotation|@
name|UiField
name|Button
name|clearButton
decl_stmt|;
DECL|field|addButton
annotation|@
name|UiField
name|Button
name|addButton
decl_stmt|;
DECL|field|closeButton
annotation|@
name|UiField
name|Button
name|closeButton
decl_stmt|;
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|keys
operator|=
operator|new
name|GpgKeyTable
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|uiBinder
operator|.
name|createAndBindUi
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|keys
operator|.
name|updateDeleteButton
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|refreshKeys
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"deleteKey"
argument_list|)
DECL|method|onDeleteKey (@uppressWarningsR) ClickEvent e)
name|void
name|onDeleteKey
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|keys
operator|.
name|deleteChecked
argument_list|()
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"addKey"
argument_list|)
DECL|method|onAddKey (@uppressWarningsR) ClickEvent e)
name|void
name|onAddKey
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|showAddKeyBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"clearButton"
argument_list|)
DECL|method|onClearButton (@uppressWarningsR) ClickEvent e)
name|void
name|onClearButton
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|keyText
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|keyText
operator|.
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|errorPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"closeButton"
argument_list|)
DECL|method|onCloseButton (@uppressWarningsR) ClickEvent e)
name|void
name|onCloseButton
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|showAddKeyBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|UiHandler
argument_list|(
literal|"addButton"
argument_list|)
DECL|method|onAddButton (@uppressWarningsR) ClickEvent e)
name|void
name|onAddButton
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ClickEvent
name|e
parameter_list|)
block|{
name|doAddKey
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshKeys ()
specifier|private
name|void
name|refreshKeys
parameter_list|()
block|{
name|AccountApi
operator|.
name|self
argument_list|()
operator|.
name|view
argument_list|(
literal|"gpgkeys"
argument_list|)
operator|.
name|get
argument_list|(
name|NativeMap
operator|.
name|copyKeysIntoChildren
argument_list|(
literal|"id"
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
name|result
parameter_list|)
block|{
name|List
argument_list|<
name|GpgKeyInfo
argument_list|>
name|list
init|=
name|Natives
operator|.
name|asList
argument_list|(
name|result
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
comment|// TODO(dborowitz): Sort on something more meaningful, like
comment|// created date?
name|Collections
operator|.
name|sort
argument_list|(
name|list
argument_list|,
operator|new
name|Comparator
argument_list|<
name|GpgKeyInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|GpgKeyInfo
name|a
parameter_list|,
name|GpgKeyInfo
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|id
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|id
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|keys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyText
operator|.
name|setText
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|errorPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|addButton
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|keys
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|GpgKeyInfo
name|k
range|:
name|list
control|)
block|{
name|keys
operator|.
name|addOneKey
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
name|showKeyTable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|showAddKeyBlock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|keys
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|showAddKeyBlock
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|showKeyTable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|display
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|showAddKeyBlock (boolean show)
specifier|private
name|void
name|showAddKeyBlock
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|addKey
operator|.
name|setVisible
argument_list|(
operator|!
name|show
argument_list|)
expr_stmt|;
name|addKeyBlock
operator|.
name|setVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
block|}
DECL|method|showKeyTable (boolean show)
specifier|private
name|void
name|showKeyTable
parameter_list|(
name|boolean
name|show
parameter_list|)
block|{
name|keys
operator|.
name|setVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|deleteKey
operator|.
name|setVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
name|addKey
operator|.
name|setVisible
argument_list|(
name|show
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddKey ()
specifier|private
name|void
name|doAddKey
parameter_list|()
block|{
if|if
condition|(
name|keyText
operator|.
name|getText
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|addButton
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|keyText
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|AccountApi
operator|.
name|addGpgKey
argument_list|(
literal|"self"
argument_list|,
name|keyText
operator|.
name|getText
argument_list|()
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
name|result
parameter_list|)
block|{
name|keyText
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|refreshKeys
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|keyText
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addButton
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|caught
operator|instanceof
name|StatusCodeException
condition|)
block|{
name|StatusCodeException
name|sce
init|=
operator|(
name|StatusCodeException
operator|)
name|caught
decl_stmt|;
if|if
condition|(
name|sce
operator|.
name|getStatusCode
argument_list|()
operator|==
name|Response
operator|.
name|SC_CONFLICT
operator|||
name|sce
operator|.
name|getStatusCode
argument_list|()
operator|==
name|Response
operator|.
name|SC_BAD_REQUEST
condition|)
block|{
name|errorText
operator|.
name|setText
argument_list|(
name|sce
operator|.
name|getEncodedResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorText
operator|.
name|setText
argument_list|(
name|sce
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|errorText
operator|.
name|setText
argument_list|(
literal|"Unexpected error saving key: "
operator|+
name|caught
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|errorPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|GpgKeyTable
specifier|private
class|class
name|GpgKeyTable
extends|extends
name|FancyFlexTable
argument_list|<
name|GpgKeyInfo
argument_list|>
block|{
DECL|field|updateDeleteHandler
specifier|private
specifier|final
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
name|updateDeleteHandler
decl_stmt|;
DECL|method|GpgKeyTable ()
name|GpgKeyTable
parameter_list|()
block|{
name|table
operator|.
name|setWidth
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|Util
operator|.
name|C
operator|.
name|gpgKeyId
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Util
operator|.
name|C
operator|.
name|gpgKeyFingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Util
operator|.
name|C
operator|.
name|gpgKeyUserIds
argument_list|()
argument_list|)
expr_stmt|;
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|updateDeleteHandler
operator|=
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|updateDeleteButton
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
block|}
DECL|method|addOneKey (GpgKeyInfo k)
specifier|private
name|void
name|addOneKey
parameter_list|(
name|GpgKeyInfo
name|k
parameter_list|)
block|{
name|int
name|row
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|applyDataRowStyle
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|CheckBox
name|sel
init|=
operator|new
name|CheckBox
argument_list|()
decl_stmt|;
name|sel
operator|.
name|addValueChangeHandler
argument_list|(
name|updateDeleteHandler
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|sel
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
operator|new
name|CopyableLabel
argument_list|(
name|k
operator|.
name|id
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
name|k
operator|.
name|fingerprint
argument_list|()
argument_list|)
expr_stmt|;
name|VerticalPanel
name|userIds
init|=
operator|new
name|VerticalPanel
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|k
operator|.
name|userIds
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|userIds
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|k
operator|.
name|userIds
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|userIds
argument_list|)
expr_stmt|;
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|2
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|3
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
DECL|method|updateDeleteButton ()
specifier|private
name|void
name|updateDeleteButton
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|isChecked
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|deleteKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|deleteKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteChecked ()
specifier|private
name|void
name|deleteChecked
parameter_list|()
block|{
name|deleteKey
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|toDelete
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|table
operator|.
name|getRowCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|1
init|;
name|row
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|isChecked
argument_list|(
name|row
argument_list|)
condition|)
block|{
name|toDelete
operator|.
name|add
argument_list|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|.
name|fingerprint
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|AccountApi
operator|.
name|deleteGpgKeys
argument_list|(
literal|"self"
argument_list|,
name|toDelete
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|GpgKeyInfo
argument_list|>
name|result
parameter_list|)
block|{
name|refreshKeys
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
name|deleteKey
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|isChecked (int row)
specifier|private
name|boolean
name|isChecked
parameter_list|(
name|int
name|row
parameter_list|)
block|{
return|return
operator|(
operator|(
name|CheckBox
operator|)
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
DECL|method|clear ()
specifier|private
name|void
name|clear
parameter_list|()
block|{
while|while
condition|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|>
literal|1
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|table
operator|.
name|getRowCount
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

