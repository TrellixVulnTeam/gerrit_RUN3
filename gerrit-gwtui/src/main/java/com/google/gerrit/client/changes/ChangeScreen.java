begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|RelatedChanges
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
operator|.
name|RelatedChanges
operator|.
name|ChangeAndCommit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|DiffApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|FileInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RestApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ComplexDisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ExpandAllCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NeedsSignInKeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|ListChangesOption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|AccountInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ChangeDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SubmitTypeRecord
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
operator|.
name|CommentVisibilityStrategy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
operator|.
name|Status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|ChangeMessage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|PatchType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArrayString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|LocaleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HorizontalPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ListBox
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Panel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ChangeScreen
specifier|public
class|class
name|ChangeScreen
extends|extends
name|Screen
implements|implements
name|ValueChangeHandler
argument_list|<
name|ChangeDetail
argument_list|>
block|{
DECL|field|changeId
specifier|private
specifier|final
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|openPatchSetId
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|openPatchSetId
decl_stmt|;
DECL|field|detailCache
specifier|private
name|ChangeDetailCache
name|detailCache
decl_stmt|;
DECL|field|changeInfo
specifier|private
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
name|changeInfo
decl_stmt|;
DECL|field|descriptionBlock
specifier|private
name|ChangeDescriptionBlock
name|descriptionBlock
decl_stmt|;
DECL|field|approvals
specifier|private
name|ApprovalTable
name|approvals
decl_stmt|;
DECL|field|includedInTable
specifier|private
name|IncludedInTable
name|includedInTable
decl_stmt|;
DECL|field|includedInPanel
specifier|private
name|DisclosurePanel
name|includedInPanel
decl_stmt|;
DECL|field|dependenciesPanel
specifier|private
name|ComplexDisclosurePanel
name|dependenciesPanel
decl_stmt|;
DECL|field|dependencies
specifier|private
name|ChangeTable
name|dependencies
decl_stmt|;
DECL|field|dependsOn
specifier|private
name|ChangeTable
operator|.
name|Section
name|dependsOn
decl_stmt|;
DECL|field|neededBy
specifier|private
name|ChangeTable
operator|.
name|Section
name|neededBy
decl_stmt|;
DECL|field|patchSetsBlock
specifier|private
name|PatchSetsBlock
name|patchSetsBlock
decl_stmt|;
DECL|field|comments
specifier|private
name|Panel
name|comments
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|private
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|keysNavigation
specifier|private
name|KeyCommandSet
name|keysNavigation
decl_stmt|;
DECL|field|keysAction
specifier|private
name|KeyCommandSet
name|keysAction
decl_stmt|;
DECL|field|regNavigation
specifier|private
name|HandlerRegistration
name|regNavigation
decl_stmt|;
DECL|field|regAction
specifier|private
name|HandlerRegistration
name|regAction
decl_stmt|;
DECL|field|regDetailCache
specifier|private
name|HandlerRegistration
name|regDetailCache
decl_stmt|;
DECL|field|patchesGrid
specifier|private
name|Grid
name|patchesGrid
decl_stmt|;
DECL|field|patchesList
specifier|private
name|ListBox
name|patchesList
decl_stmt|;
comment|/**    * The change id for which the old version history is valid.    */
DECL|field|currentChangeId
specifier|private
specifier|static
name|Change
operator|.
name|Id
name|currentChangeId
decl_stmt|;
comment|/**    * Which patch set id is the diff base.    */
DECL|field|diffBaseId
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|diffBaseId
decl_stmt|;
DECL|method|ChangeScreen (final Change.Id toShow)
specifier|public
name|ChangeScreen
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|toShow
parameter_list|)
block|{
name|changeId
operator|=
name|toShow
expr_stmt|;
name|openPatchSetId
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|ChangeScreen (final PatchSet.Id toShow)
specifier|public
name|ChangeScreen
parameter_list|(
specifier|final
name|PatchSet
operator|.
name|Id
name|toShow
parameter_list|)
block|{
name|changeId
operator|=
name|toShow
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|openPatchSetId
operator|=
name|toShow
expr_stmt|;
block|}
DECL|method|ChangeScreen (final ChangeInfo c)
specifier|public
name|ChangeScreen
parameter_list|(
specifier|final
name|ChangeInfo
name|c
parameter_list|)
block|{
name|this
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|detailCache
operator|.
name|refresh
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|regNavigation
operator|!=
literal|null
condition|)
block|{
name|regNavigation
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regNavigation
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|regAction
operator|!=
literal|null
condition|)
block|{
name|regAction
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regAction
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|regDetailCache
operator|!=
literal|null
condition|)
block|{
name|regDetailCache
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regDetailCache
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|regNavigation
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
expr_stmt|;
name|regAction
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|openPatchSetId
operator|!=
literal|null
condition|)
block|{
name|patchSetsBlock
operator|.
name|activate
argument_list|(
name|openPatchSetId
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|ChangeCache
name|cache
init|=
name|ChangeCache
operator|.
name|get
argument_list|(
name|changeId
argument_list|)
decl_stmt|;
name|detailCache
operator|=
name|cache
operator|.
name|getChangeDetailCache
argument_list|()
expr_stmt|;
name|regDetailCache
operator|=
name|detailCache
operator|.
name|addValueChangeHandler
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|changeScreen
argument_list|()
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|screenNoHeader
argument_list|()
argument_list|)
expr_stmt|;
name|keysNavigation
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|keysAction
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionActions
argument_list|()
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToListKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'u'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|upToChangeList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|ExpandCollapseDependencySectionKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'d'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|expandCollapseDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|PublishCommentsKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'r'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|keyPublishComments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|descriptionBlock
operator|=
operator|new
name|ChangeDescriptionBlock
argument_list|(
name|keysAction
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|descriptionBlock
argument_list|)
expr_stmt|;
name|approvals
operator|=
operator|new
name|ApprovalTable
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|approvals
argument_list|)
expr_stmt|;
name|includedInPanel
operator|=
operator|new
name|DisclosurePanel
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenIncludedIn
argument_list|()
argument_list|)
expr_stmt|;
name|includedInTable
operator|=
operator|new
name|IncludedInTable
argument_list|(
name|changeId
argument_list|)
expr_stmt|;
name|includedInPanel
operator|.
name|setContent
argument_list|(
name|includedInTable
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|includedInPanel
argument_list|)
expr_stmt|;
name|dependencies
operator|=
operator|new
name|ChangeTable
argument_list|()
block|{
block|{
name|table
operator|.
name|setWidth
argument_list|(
literal|"auto"
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|dependsOn
operator|=
operator|new
name|ChangeTable
operator|.
name|Section
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenDependsOn
argument_list|()
argument_list|)
expr_stmt|;
name|dependsOn
operator|.
name|setChangeRowFormatter
argument_list|(
operator|new
name|ChangeTable
operator|.
name|ChangeRowFormatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getRowStyle
parameter_list|(
name|ChangeInfo
name|c
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isLatest
argument_list|()
operator|||
name|Change
operator|.
name|Status
operator|.
name|ABANDONED
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|outdated
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDisplayText
parameter_list|(
specifier|final
name|ChangeInfo
name|c
parameter_list|,
specifier|final
name|String
name|displayText
parameter_list|)
block|{
if|if
condition|(
operator|!
name|c
operator|.
name|isLatest
argument_list|()
condition|)
block|{
return|return
name|displayText
operator|+
literal|" [OUTDATED]"
return|;
block|}
return|return
name|displayText
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|neededBy
operator|=
operator|new
name|ChangeTable
operator|.
name|Section
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenNeededBy
argument_list|()
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|addSection
argument_list|(
name|dependsOn
argument_list|)
expr_stmt|;
name|dependencies
operator|.
name|addSection
argument_list|(
name|neededBy
argument_list|)
expr_stmt|;
name|dependenciesPanel
operator|=
operator|new
name|ComplexDisclosurePanel
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenDependencies
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dependenciesPanel
operator|.
name|setContent
argument_list|(
name|dependencies
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|dependenciesPanel
argument_list|)
expr_stmt|;
name|patchesList
operator|=
operator|new
name|ListBox
argument_list|()
expr_stmt|;
name|patchesList
operator|.
name|addChangeHandler
argument_list|(
operator|new
name|ChangeHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onChange
parameter_list|(
name|ChangeEvent
name|event
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|patchesList
operator|.
name|getSelectedIndex
argument_list|()
decl_stmt|;
specifier|final
name|String
name|selectedPatchSet
init|=
name|patchesList
operator|.
name|getValue
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|diffBaseId
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|diffBaseId
operator|=
name|PatchSet
operator|.
name|Id
operator|.
name|parse
argument_list|(
name|selectedPatchSet
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|patchSetsBlock
operator|!=
literal|null
condition|)
block|{
name|patchSetsBlock
operator|.
name|refresh
argument_list|(
name|diffBaseId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|patchesGrid
operator|=
operator|new
name|Grid
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|patchesGrid
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|selectPatchSetOldVersion
argument_list|()
argument_list|)
expr_stmt|;
name|patchesGrid
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|referenceVersion
argument_list|()
argument_list|)
expr_stmt|;
name|patchesGrid
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|patchesList
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|patchesGrid
argument_list|)
expr_stmt|;
name|patchSetsBlock
operator|=
operator|new
name|PatchSetsBlock
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|patchSetsBlock
argument_list|)
expr_stmt|;
name|comments
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|comments
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|changeComments
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|comments
argument_list|)
expr_stmt|;
block|}
DECL|method|displayTitle (final Change.Key changeId, final String subject)
specifier|private
name|void
name|displayTitle
parameter_list|(
specifier|final
name|Change
operator|.
name|Key
name|changeId
parameter_list|,
specifier|final
name|String
name|subject
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|titleBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|LocaleInfo
operator|.
name|getCurrentLocale
argument_list|()
operator|.
name|isRTL
argument_list|()
condition|)
block|{
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|titleBuf
operator|.
name|append
argument_list|(
name|subject
argument_list|)
expr_stmt|;
name|titleBuf
operator|.
name|append
argument_list|(
literal|" :"
argument_list|)
expr_stmt|;
block|}
name|titleBuf
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|changeScreenTitleId
argument_list|(
name|changeId
operator|.
name|abbreviate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|titleBuf
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|changeScreenTitleId
argument_list|(
name|changeId
operator|.
name|abbreviate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|subject
operator|!=
literal|null
condition|)
block|{
name|titleBuf
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
expr_stmt|;
name|titleBuf
operator|.
name|append
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
block|}
name|setPageTitle
argument_list|(
name|titleBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|setHeaderVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onValueChange (final ValueChangeEvent<ChangeDetail> event)
specifier|public
name|void
name|onValueChange
parameter_list|(
specifier|final
name|ValueChangeEvent
argument_list|<
name|ChangeDetail
argument_list|>
name|event
parameter_list|)
block|{
if|if
condition|(
name|isAttached
argument_list|()
operator|&&
name|isLastValueChangeHandler
argument_list|()
condition|)
block|{
comment|// Until this screen is fully migrated to the new API, these calls must
comment|// happen sequentially after the ChangeDetail lookup, because we can't
comment|// start an async get at the source of every call that might trigger a
comment|// value change.
name|CallbackGroup
name|cbs1
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|CallbackGroup
name|cbs2
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Patch
argument_list|>
name|patches
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Patch
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|revId
init|=
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getCurrentPatchSetDetail
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getRevId
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|"current"
argument_list|)
operator|.
name|view
argument_list|(
literal|"submit_type"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|NativeString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeString
name|result
parameter_list|)
block|{
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|setSubmitTypeRecord
argument_list|(
name|SubmitTypeRecord
operator|.
name|OK
argument_list|(
name|Project
operator|.
name|SubmitType
operator|.
name|valueOf
argument_list|(
name|result
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|""
operator|+
name|psId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"related"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|RelatedChanges
operator|.
name|RelatedInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|RelatedChanges
operator|.
name|RelatedInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|.
name|changes
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|dependsOn
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|neededBy
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dependsOn
parameter_list|(
name|RelatedChanges
operator|.
name|RelatedInfo
name|info
parameter_list|)
block|{
name|ChangeAndCommit
name|self
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ChangeAndCommit
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ChangeAndCommit
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|changes
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChangeAndCommit
name|c
init|=
name|info
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|changeId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|legacy_id
argument_list|()
argument_list|)
condition|)
block|{
name|self
operator|=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|.
name|commit
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|commit
argument_list|()
operator|.
name|commit
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|m
operator|.
name|put
argument_list|(
name|c
operator|.
name|commit
argument_list|()
operator|.
name|commit
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|self
operator|!=
literal|null
operator|&&
name|self
operator|.
name|commit
argument_list|()
operator|!=
literal|null
operator|&&
name|self
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|d
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|CommitInfo
name|p
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|self
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
argument_list|)
control|)
block|{
name|ChangeAndCommit
name|pc
init|=
name|m
operator|.
name|get
argument_list|(
name|p
operator|.
name|commit
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pc
operator|!=
literal|null
condition|)
block|{
name|ChangeInfo
name|i
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|load
argument_list|(
name|pc
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|d
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|setDependsOn
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|neededBy
parameter_list|(
name|RelatedChanges
operator|.
name|RelatedInfo
name|info
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|mine
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
name|mine
operator|.
name|add
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|n
init|=
operator|new
name|ArrayList
argument_list|<
name|ChangeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|info
operator|.
name|changes
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ChangeAndCommit
name|c
init|=
name|info
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|commit
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|c
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|CommitInfo
name|p
init|=
name|c
operator|.
name|commit
argument_list|()
operator|.
name|parents
argument_list|()
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|mine
operator|.
name|contains
argument_list|(
name|p
operator|.
name|commit
argument_list|()
argument_list|)
condition|)
block|{
name|ChangeInfo
name|u
init|=
operator|new
name|ChangeInfo
argument_list|()
decl_stmt|;
name|load
argument_list|(
name|c
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|n
operator|.
name|add
argument_list|(
name|u
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|setNeededBy
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|load
parameter_list|(
specifier|final
name|ChangeAndCommit
name|pc
parameter_list|,
specifier|final
name|ChangeInfo
name|i
parameter_list|)
block|{
name|RestApi
name|call
init|=
name|ChangeApi
operator|.
name|change
argument_list|(
name|pc
operator|.
name|legacy_id
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|ChangeList
operator|.
name|addOptions
argument_list|(
name|call
argument_list|,
name|EnumSet
operator|.
name|of
argument_list|(
name|ListChangesOption
operator|.
name|DETAILED_ACCOUNTS
argument_list|,
name|ListChangesOption
operator|.
name|CURRENT_REVISION
argument_list|)
argument_list|)
expr_stmt|;
name|call
operator|.
name|get
argument_list|(
name|cbs2
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
specifier|public
name|void
name|onSuccess
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
name|result
parameter_list|)
block|{
name|i
operator|.
name|set
argument_list|(
name|ChangeDetailCache
operator|.
name|toChange
argument_list|(
name|result
argument_list|)
argument_list|,
name|pc
operator|.
name|patch_set_id
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setStarred
argument_list|(
name|result
operator|.
name|starred
argument_list|()
argument_list|)
expr_stmt|;
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getAccounts
argument_list|()
operator|.
name|merge
argument_list|(
name|ChangeDetailCache
operator|.
name|users
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|revId
argument_list|)
operator|.
name|view
argument_list|(
literal|"files"
argument_list|)
operator|.
name|addParameterTrue
argument_list|(
literal|"reviewed"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|JsArrayString
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|JsArrayString
name|result
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|result
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Patch
name|p
init|=
name|patches
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Patch
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|patches
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setReviewedByCurrentUser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|withDrafts
init|=
operator|new
name|HashSet
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|setPatchSetsWithDraftComments
argument_list|(
name|withDrafts
argument_list|)
expr_stmt|;
for|for
control|(
name|PatchSet
name|ps
range|:
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|ps
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|psId
argument_list|)
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|id
init|=
name|ps
operator|.
name|getId
argument_list|()
decl_stmt|;
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|""
operator|+
name|id
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"drafts"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|withDrafts
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|""
operator|+
name|psId
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|view
argument_list|(
literal|"drafts"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|result
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Patch
name|p
init|=
name|patches
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Patch
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|patches
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setDraftCount
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|withDrafts
operator|.
name|add
argument_list|(
name|psId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ChangeApi
operator|.
name|revision
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|revId
argument_list|)
operator|.
name|view
argument_list|(
literal|"comments"
argument_list|)
operator|.
name|get
argument_list|(
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|result
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Patch
name|p
init|=
name|patches
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Patch
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|patches
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setCommentCount
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|DiffApi
operator|.
name|list
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
literal|null
argument_list|,
name|revId
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|FileInfo
argument_list|>
name|result
parameter_list|)
block|{
name|JsArray
argument_list|<
name|FileInfo
argument_list|>
name|fileInfos
init|=
name|result
operator|.
name|values
argument_list|()
decl_stmt|;
name|FileInfo
operator|.
name|sortFileInfoByPath
argument_list|(
name|fileInfos
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Patch
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Patch
argument_list|>
argument_list|(
name|fileInfos
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FileInfo
name|f
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|fileInfos
argument_list|)
control|)
block|{
name|Patch
name|p
init|=
name|patches
operator|.
name|get
argument_list|(
name|f
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
name|p
operator|=
operator|new
name|Patch
argument_list|(
operator|new
name|Patch
operator|.
name|Key
argument_list|(
name|psId
argument_list|,
name|f
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|patches
operator|.
name|put
argument_list|(
name|f
operator|.
name|path
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setInsertions
argument_list|(
name|f
operator|.
name|lines_inserted
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setDeletions
argument_list|(
name|f
operator|.
name|lines_deleted
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPatchType
argument_list|(
name|f
operator|.
name|binary
argument_list|()
condition|?
name|PatchType
operator|.
name|BINARY
else|:
name|PatchType
operator|.
name|UNIFIED
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|status
argument_list|()
operator|==
literal|null
condition|)
block|{
name|p
operator|.
name|setChangeType
argument_list|(
name|ChangeType
operator|.
name|MODIFIED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|setChangeType
argument_list|(
name|ChangeType
operator|.
name|forCode
argument_list|(
name|f
operator|.
name|status
argument_list|()
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|list
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getCurrentPatchSetDetail
argument_list|()
operator|.
name|setPatches
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
operator|.
name|getChange
argument_list|()
operator|.
name|getProject
argument_list|()
argument_list|,
name|cbs1
operator|.
name|add
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ConfigInfoCache
operator|.
name|Entry
name|result
parameter_list|)
block|{
name|commentLinkProcessor
operator|=
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
comment|// Handled by last callback's onFailure.
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ChangeApi
operator|.
name|detail
argument_list|(
name|changeId
operator|.
name|get
argument_list|()
argument_list|,
name|cbs1
operator|.
name|addFinal
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeInfo
name|result
parameter_list|)
block|{
name|changeInfo
operator|=
name|result
expr_stmt|;
name|cbs2
operator|.
name|addFinal
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|Void
name|result
parameter_list|)
block|{
name|display
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
operator|.
name|onSuccess
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Find the last attached screen.
comment|// When DialogBox is used (i. e. CommentedActionDialog) then the original
comment|// ChangeScreen is still in attached state.
comment|// Use here the fact, that the handlers (ChangeScreen) are sorted.
DECL|method|isLastValueChangeHandler ()
specifier|private
name|boolean
name|isLastValueChangeHandler
parameter_list|()
block|{
name|int
name|count
init|=
name|detailCache
operator|.
name|getHandlerCount
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
operator|&&
name|detailCache
operator|.
name|getHandler
argument_list|(
name|count
operator|-
literal|1
argument_list|)
operator|==
name|this
return|;
block|}
DECL|method|display (final ChangeDetail detail)
specifier|private
name|void
name|display
parameter_list|(
specifier|final
name|ChangeDetail
name|detail
parameter_list|)
block|{
name|displayTitle
argument_list|(
name|detail
operator|.
name|getChange
argument_list|()
operator|.
name|getKey
argument_list|()
argument_list|,
name|detail
operator|.
name|getChange
argument_list|()
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|discardDiffBaseIfNotApplicable
argument_list|(
name|detail
operator|.
name|getChange
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Status
operator|.
name|MERGED
operator|==
name|detail
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
condition|)
block|{
name|includedInPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|includedInPanel
operator|.
name|addOpenHandler
argument_list|(
name|includedInTable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|includedInPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|dependencies
operator|.
name|setAccountInfoCache
argument_list|(
name|detail
operator|.
name|getAccounts
argument_list|()
argument_list|)
expr_stmt|;
name|descriptionBlock
operator|.
name|display
argument_list|(
name|detail
argument_list|,
name|detail
operator|.
name|isStarred
argument_list|()
argument_list|,
name|detail
operator|.
name|canEditCommitMessage
argument_list|()
argument_list|,
name|detail
operator|.
name|getCurrentPatchSetDetail
argument_list|()
operator|.
name|getInfo
argument_list|()
argument_list|,
name|detail
operator|.
name|getAccounts
argument_list|()
argument_list|,
name|detail
operator|.
name|getSubmitTypeRecord
argument_list|()
argument_list|,
name|commentLinkProcessor
argument_list|)
expr_stmt|;
name|dependsOn
operator|.
name|display
argument_list|(
name|detail
operator|.
name|getDependsOn
argument_list|()
argument_list|)
expr_stmt|;
name|neededBy
operator|.
name|display
argument_list|(
name|detail
operator|.
name|getNeededBy
argument_list|()
argument_list|)
expr_stmt|;
name|approvals
operator|.
name|display
argument_list|(
name|changeInfo
argument_list|)
expr_stmt|;
name|patchesList
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|detail
operator|.
name|getCurrentPatchSetDetail
argument_list|()
operator|.
name|getInfo
argument_list|()
operator|.
name|getParents
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|patchesList
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|autoMerge
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|patchesList
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|baseDiffItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PatchSet
name|pId
range|:
name|detail
operator|.
name|getPatchSets
argument_list|()
control|)
block|{
name|patchesList
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchSetHeader
argument_list|(
name|pId
operator|.
name|getPatchSetId
argument_list|()
argument_list|)
argument_list|,
name|pId
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|diffBaseId
operator|!=
literal|null
condition|)
block|{
name|patchesList
operator|.
name|setSelectedIndex
argument_list|(
name|diffBaseId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|patchSetsBlock
operator|.
name|display
argument_list|(
name|detail
argument_list|,
name|diffBaseId
argument_list|)
expr_stmt|;
name|addComments
argument_list|(
name|detail
argument_list|)
expr_stmt|;
comment|// If any dependency change is still open, or is outdated,
comment|// or the change is needed by a change that is new or submitted,
comment|// show our dependency list.
comment|//
name|boolean
name|depsOpen
init|=
literal|false
decl_stmt|;
name|int
name|outdated
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|detail
operator|.
name|getChange
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|.
name|isClosed
argument_list|()
condition|)
block|{
specifier|final
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|dependsOn
init|=
name|detail
operator|.
name|getDependsOn
argument_list|()
decl_stmt|;
if|if
condition|(
name|dependsOn
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ChangeInfo
name|ci
range|:
name|dependsOn
control|)
block|{
if|if
condition|(
operator|!
name|ci
operator|.
name|isLatest
argument_list|()
condition|)
block|{
name|depsOpen
operator|=
literal|true
expr_stmt|;
name|outdated
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ci
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|MERGED
condition|)
block|{
name|depsOpen
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|neededBy
init|=
name|detail
operator|.
name|getNeededBy
argument_list|()
decl_stmt|;
if|if
condition|(
name|neededBy
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|ChangeInfo
name|ci
range|:
name|neededBy
control|)
block|{
if|if
condition|(
operator|(
name|ci
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|NEW
operator|)
operator|||
operator|(
name|ci
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|SUBMITTED
operator|)
operator|||
operator|(
name|ci
operator|.
name|getStatus
argument_list|()
operator|==
name|Change
operator|.
name|Status
operator|.
name|DRAFT
operator|)
condition|)
block|{
name|depsOpen
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
name|dependenciesPanel
operator|.
name|setOpen
argument_list|(
name|depsOpen
argument_list|)
expr_stmt|;
name|dependenciesPanel
operator|.
name|getHeader
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|outdated
operator|>
literal|0
condition|)
block|{
name|dependenciesPanel
operator|.
name|getHeader
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|Util
operator|.
name|M
operator|.
name|outdatedHeader
argument_list|(
name|outdated
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isCurrentView
argument_list|()
condition|)
block|{
name|display
argument_list|()
expr_stmt|;
block|}
name|patchSetsBlock
operator|.
name|setRegisterKeys
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|discardDiffBaseIfNotApplicable (final Change.Id toShow)
specifier|private
specifier|static
name|void
name|discardDiffBaseIfNotApplicable
parameter_list|(
specifier|final
name|Change
operator|.
name|Id
name|toShow
parameter_list|)
block|{
if|if
condition|(
name|currentChangeId
operator|!=
literal|null
operator|&&
operator|!
name|currentChangeId
operator|.
name|equals
argument_list|(
name|toShow
argument_list|)
condition|)
block|{
name|diffBaseId
operator|=
literal|null
expr_stmt|;
block|}
name|currentChangeId
operator|=
name|toShow
expr_stmt|;
block|}
DECL|method|addComments (final ChangeDetail detail)
specifier|private
name|void
name|addComments
parameter_list|(
specifier|final
name|ChangeDetail
name|detail
parameter_list|)
block|{
name|comments
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|AccountInfoCache
name|accts
init|=
name|detail
operator|.
name|getAccounts
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ChangeMessage
argument_list|>
name|msgList
init|=
name|detail
operator|.
name|getMessages
argument_list|()
decl_stmt|;
name|HorizontalPanel
name|title
init|=
operator|new
name|HorizontalPanel
argument_list|()
decl_stmt|;
name|title
operator|.
name|setWidth
argument_list|(
literal|"100%"
argument_list|)
expr_stmt|;
name|title
operator|.
name|add
argument_list|(
operator|new
name|Label
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenComments
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|msgList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|title
operator|.
name|add
argument_list|(
name|messagesMenuBar
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|title
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|blockHeader
argument_list|()
argument_list|)
expr_stmt|;
name|comments
operator|.
name|add
argument_list|(
name|title
argument_list|)
expr_stmt|;
specifier|final
name|long
name|AGE
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
specifier|final
name|Timestamp
name|aged
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|AGE
argument_list|)
decl_stmt|;
name|CommentVisibilityStrategy
name|commentVisibilityStrategy
init|=
name|CommentVisibilityStrategy
operator|.
name|EXPAND_RECENT
decl_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|commentVisibilityStrategy
operator|=
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getGeneralPreferences
argument_list|()
operator|.
name|getCommentVisibilityStrategy
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|msgList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ChangeMessage
name|msg
init|=
name|msgList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|AccountInfo
name|author
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|author
operator|=
name|FormatUtil
operator|.
name|asInfo
argument_list|(
name|accts
operator|.
name|get
argument_list|(
name|msg
operator|.
name|getAuthor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|author
operator|=
name|AccountInfo
operator|.
name|create
argument_list|(
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|messageNoAuthor
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isRecent
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|msgList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|isRecent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Instead of opening messages by strict age, do it by "unread"?
name|isRecent
operator|=
name|msg
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|after
argument_list|(
name|aged
argument_list|)
expr_stmt|;
block|}
specifier|final
name|CommentPanel
name|cp
init|=
operator|new
name|CommentPanel
argument_list|(
name|author
argument_list|,
name|msg
operator|.
name|getWrittenOn
argument_list|()
argument_list|,
name|msg
operator|.
name|getMessage
argument_list|()
argument_list|,
name|commentLinkProcessor
argument_list|)
decl_stmt|;
name|cp
operator|.
name|setRecent
argument_list|(
name|isRecent
argument_list|)
expr_stmt|;
name|cp
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelBorder
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|msgList
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|cp
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelLast
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isOpen
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|commentVisibilityStrategy
condition|)
block|{
case|case
name|COLLAPSE_ALL
case|:
break|break;
case|case
name|EXPAND_ALL
case|:
name|isOpen
operator|=
literal|true
expr_stmt|;
break|break;
case|case
name|EXPAND_MOST_RECENT
case|:
name|isOpen
operator|=
name|i
operator|==
name|msgList
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
break|break;
case|case
name|EXPAND_RECENT
case|:
default|default:
name|isOpen
operator|=
name|isRecent
expr_stmt|;
break|break;
block|}
name|cp
operator|.
name|setOpen
argument_list|(
name|isOpen
argument_list|)
expr_stmt|;
name|comments
operator|.
name|add
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Button
name|b
init|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|changeScreenAddComment
argument_list|()
argument_list|)
decl_stmt|;
name|b
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
init|=
name|patchSetsBlock
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|Dispatcher
operator|.
name|toPublish
argument_list|(
name|currentPatchSetId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|comments
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|comments
operator|.
name|setVisible
argument_list|(
name|msgList
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|messagesMenuBar ()
specifier|private
name|LinkMenuBar
name|messagesMenuBar
parameter_list|()
block|{
specifier|final
name|Panel
name|c
init|=
name|comments
decl_stmt|;
specifier|final
name|LinkMenuBar
name|menuBar
init|=
operator|new
name|LinkMenuBar
argument_list|()
decl_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|messageExpandRecent
argument_list|()
argument_list|,
operator|new
name|ExpandAllCommand
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|expand
parameter_list|(
specifier|final
name|CommentPanel
name|w
parameter_list|)
block|{
name|w
operator|.
name|setOpen
argument_list|(
name|w
operator|.
name|isRecent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|messageExpandAll
argument_list|()
argument_list|,
operator|new
name|ExpandAllCommand
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|Util
operator|.
name|C
operator|.
name|messageCollapseAll
argument_list|()
argument_list|,
operator|new
name|ExpandAllCommand
argument_list|(
name|c
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentPanelMenuBar
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|menuBar
return|;
block|}
DECL|class|UpToListKeyCommand
specifier|public
class|class
name|UpToListKeyCommand
extends|extends
name|KeyCommand
block|{
DECL|method|UpToListKeyCommand (int mask, char key, String help)
specifier|public
name|UpToListKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Gerrit
operator|.
name|displayLastChangeList
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ExpandCollapseDependencySectionKeyCommand
specifier|public
class|class
name|ExpandCollapseDependencySectionKeyCommand
extends|extends
name|KeyCommand
block|{
DECL|method|ExpandCollapseDependencySectionKeyCommand (int mask, char key, String help)
specifier|public
name|ExpandCollapseDependencySectionKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|dependenciesPanel
operator|.
name|setOpen
argument_list|(
operator|!
name|dependenciesPanel
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|PublishCommentsKeyCommand
specifier|public
class|class
name|PublishCommentsKeyCommand
extends|extends
name|NeedsSignInKeyCommand
block|{
DECL|method|PublishCommentsKeyCommand (int mask, char key, String help)
specifier|public
name|PublishCommentsKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|PatchSet
operator|.
name|Id
name|currentPatchSetId
init|=
name|patchSetsBlock
operator|.
name|getCurrentPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|Dispatcher
operator|.
name|toPublish
argument_list|(
name|currentPatchSetId
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

