begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ProjectApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ProjectInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ParentProjectBox
specifier|public
class|class
name|ParentProjectBox
extends|extends
name|Composite
block|{
DECL|field|suggestBox
specifier|private
specifier|final
name|RemoteSuggestBox
name|suggestBox
decl_stmt|;
DECL|field|suggestOracle
specifier|private
specifier|final
name|ParentProjectNameSuggestOracle
name|suggestOracle
decl_stmt|;
DECL|method|ParentProjectBox ()
specifier|public
name|ParentProjectBox
parameter_list|()
block|{
name|suggestOracle
operator|=
operator|new
name|ParentProjectNameSuggestOracle
argument_list|()
expr_stmt|;
name|suggestBox
operator|=
operator|new
name|RemoteSuggestBox
argument_list|(
name|suggestOracle
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|suggestBox
argument_list|)
expr_stmt|;
block|}
DECL|method|setVisibleLength (int len)
specifier|public
name|void
name|setVisibleLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|suggestBox
operator|.
name|setVisibleLength
argument_list|(
name|len
argument_list|)
expr_stmt|;
block|}
DECL|method|setProject (final Project.NameKey project)
specifier|public
name|void
name|setProject
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|suggestOracle
operator|.
name|setProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
block|}
DECL|method|setParentProject (final Project.NameKey parent)
specifier|public
name|void
name|setParentProject
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|parent
parameter_list|)
block|{
name|suggestBox
operator|.
name|setText
argument_list|(
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|get
argument_list|()
else|:
literal|""
argument_list|)
expr_stmt|;
block|}
DECL|method|getParentProjectName ()
specifier|public
name|Project
operator|.
name|NameKey
name|getParentProjectName
parameter_list|()
block|{
specifier|final
name|String
name|projectName
init|=
name|suggestBox
operator|.
name|getText
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|projectName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|projectName
argument_list|)
return|;
block|}
DECL|class|ParentProjectNameSuggestOracle
specifier|private
specifier|static
class|class
name|ParentProjectNameSuggestOracle
extends|extends
name|ProjectNameSuggestOracle
block|{
DECL|field|exclude
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|exclude
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|setProject (Project.NameKey project)
specifier|public
name|void
name|setProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|exclude
operator|.
name|clear
argument_list|()
expr_stmt|;
name|exclude
operator|.
name|add
argument_list|(
name|project
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|ProjectApi
operator|.
name|getChildren
argument_list|(
name|project
argument_list|,
literal|true
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|JsArray
argument_list|<
name|ProjectInfo
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|JsArray
argument_list|<
name|ProjectInfo
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|ProjectInfo
name|p
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|result
argument_list|)
control|)
block|{
name|exclude
operator|.
name|add
argument_list|(
name|p
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|_onRequestSuggestions (Request req, final Callback callback)
specifier|public
name|void
name|_onRequestSuggestions
parameter_list|(
name|Request
name|req
parameter_list|,
specifier|final
name|Callback
name|callback
parameter_list|)
block|{
name|super
operator|.
name|_onRequestSuggestions
argument_list|(
name|req
argument_list|,
operator|new
name|Callback
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuggestionsReady
parameter_list|(
name|Request
name|request
parameter_list|,
name|Response
name|response
parameter_list|)
block|{
if|if
condition|(
name|exclude
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|Suggestion
argument_list|>
name|filteredSuggestions
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|response
operator|.
name|getSuggestions
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Suggestion
name|s
range|:
name|response
operator|.
name|getSuggestions
argument_list|()
control|)
block|{
if|if
condition|(
name|exclude
operator|.
name|contains
argument_list|(
name|s
operator|.
name|getReplacementString
argument_list|()
argument_list|)
condition|)
block|{
name|filteredSuggestions
operator|.
name|remove
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|response
operator|.
name|setSuggestions
argument_list|(
name|filteredSuggestions
argument_list|)
expr_stmt|;
block|}
name|callback
operator|.
name|onSuggestionsReady
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

