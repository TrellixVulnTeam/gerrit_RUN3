begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|DiffObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|TextMarker
operator|.
name|FromTo
import|;
end_import

begin_comment
comment|/** Tracks comment widgets for {@link SideBySide}. */
end_comment

begin_class
DECL|class|SideBySideCommentManager
class|class
name|SideBySideCommentManager
extends|extends
name|CommentManager
block|{
DECL|method|SideBySideCommentManager ( SideBySide host, DiffObject base, PatchSet.Id revision, String path, CommentLinkProcessor clp, boolean open)
name|SideBySideCommentManager
parameter_list|(
name|SideBySide
name|host
parameter_list|,
name|DiffObject
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|,
name|CommentLinkProcessor
name|clp
parameter_list|,
name|boolean
name|open
parameter_list|)
block|{
name|super
argument_list|(
name|host
argument_list|,
name|base
argument_list|,
name|revision
argument_list|,
name|path
argument_list|,
name|clp
argument_list|,
name|open
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMapForNav (DisplaySide side)
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|CommentGroup
argument_list|>
name|getMapForNav
parameter_list|(
name|DisplaySide
name|side
parameter_list|)
block|{
return|return
name|map
argument_list|(
name|side
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|clearLine (DisplaySide side, int line, CommentGroup group)
name|void
name|clearLine
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|,
name|CommentGroup
name|group
parameter_list|)
block|{
name|super
operator|.
name|clearLine
argument_list|(
name|side
argument_list|,
name|line
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newDraftOnGutterClick (CodeMirror cm, String gutterClass, int line)
name|void
name|newDraftOnGutterClick
parameter_list|(
name|CodeMirror
name|cm
parameter_list|,
name|String
name|gutterClass
parameter_list|,
name|int
name|line
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|signInCallback
argument_list|(
name|cm
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|insertNewDraft
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCommentGroupOnActiveLine (CodeMirror cm)
name|CommentGroup
name|getCommentGroupOnActiveLine
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
name|CommentGroup
name|group
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|hasActiveLine
argument_list|()
condition|)
block|{
name|group
operator|=
name|map
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|cm
operator|.
name|getLineNumber
argument_list|(
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|group
return|;
block|}
annotation|@
name|Override
DECL|method|getLinesWithCommentGroups ()
name|Collection
argument_list|<
name|Integer
argument_list|>
name|getLinesWithCommentGroups
parameter_list|()
block|{
return|return
name|sideB
operator|.
name|tailMap
argument_list|(
literal|1
argument_list|)
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getTokenSuffixForActiveLine (CodeMirror cm)
name|String
name|getTokenSuffixForActiveLine
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
return|return
operator|(
name|cm
operator|.
name|side
argument_list|()
operator|==
name|DisplaySide
operator|.
name|A
condition|?
literal|"a"
else|:
literal|""
operator|)
operator|+
operator|(
name|cm
operator|.
name|getLineNumber
argument_list|(
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
operator|+
literal|1
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|newDraft (CodeMirror cm)
name|void
name|newDraft
parameter_list|(
name|CodeMirror
name|cm
parameter_list|)
block|{
name|int
name|line
init|=
name|cm
operator|.
name|getLineNumber
argument_list|(
name|cm
operator|.
name|extras
argument_list|()
operator|.
name|activeLine
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|cm
operator|.
name|somethingSelected
argument_list|()
condition|)
block|{
name|FromTo
name|fromTo
init|=
name|adjustSelection
argument_list|(
name|cm
argument_list|)
decl_stmt|;
name|addDraftBox
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|CommentInfo
operator|.
name|create
argument_list|(
name|getPath
argument_list|()
argument_list|,
name|getStoredSideFromDisplaySide
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|)
argument_list|,
name|getParentNumFromDisplaySide
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|)
argument_list|,
name|line
argument_list|,
name|CommentRange
operator|.
name|create
argument_list|(
name|fromTo
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|setEdit
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setCursor
argument_list|(
name|fromTo
operator|.
name|to
argument_list|()
argument_list|)
expr_stmt|;
name|cm
operator|.
name|setSelection
argument_list|(
name|cm
operator|.
name|getCursor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|insertNewDraft
argument_list|(
name|cm
operator|.
name|side
argument_list|()
argument_list|,
name|line
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|group (DisplaySide side, int line)
name|CommentGroup
name|group
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|CommentGroup
name|existing
init|=
name|map
argument_list|(
name|side
argument_list|)
operator|.
name|get
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
return|return
name|existing
return|;
block|}
name|SideBySideCommentGroup
name|newGroup
init|=
name|newGroup
argument_list|(
name|side
argument_list|,
name|line
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|CommentGroup
argument_list|>
name|map
init|=
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|sideA
else|:
name|sideB
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|CommentGroup
argument_list|>
name|otherMap
init|=
name|side
operator|==
name|DisplaySide
operator|.
name|A
condition|?
name|sideB
else|:
name|sideA
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|line
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
name|int
name|otherLine
init|=
name|host
operator|.
name|lineOnOther
argument_list|(
name|side
argument_list|,
name|line
operator|-
literal|1
argument_list|)
operator|.
name|getLine
argument_list|()
operator|+
literal|1
decl_stmt|;
name|existing
operator|=
name|map
argument_list|(
name|side
operator|.
name|otherSide
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|otherLine
argument_list|)
expr_stmt|;
name|CommentGroup
name|otherGroup
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|otherGroup
operator|=
name|existing
expr_stmt|;
block|}
else|else
block|{
name|otherGroup
operator|=
name|newGroup
argument_list|(
name|side
operator|.
name|otherSide
argument_list|()
argument_list|,
name|otherLine
argument_list|)
expr_stmt|;
name|otherMap
operator|.
name|put
argument_list|(
name|otherLine
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
block|}
name|SideBySideCommentGroup
operator|.
name|pair
argument_list|(
name|newGroup
argument_list|,
operator|(
name|SideBySideCommentGroup
operator|)
name|otherGroup
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAttached
argument_list|()
condition|)
block|{
name|newGroup
operator|.
name|init
argument_list|(
name|host
operator|.
name|getDiffTable
argument_list|()
argument_list|)
expr_stmt|;
name|otherGroup
operator|.
name|handleRedraw
argument_list|()
expr_stmt|;
block|}
return|return
name|newGroup
return|;
block|}
DECL|method|newGroup (DisplaySide side, int line)
specifier|private
name|SideBySideCommentGroup
name|newGroup
parameter_list|(
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
return|return
operator|new
name|SideBySideCommentGroup
argument_list|(
name|this
argument_list|,
name|host
operator|.
name|getCmFromSide
argument_list|(
name|side
argument_list|)
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
return|;
block|}
block|}
end_class

end_unit

