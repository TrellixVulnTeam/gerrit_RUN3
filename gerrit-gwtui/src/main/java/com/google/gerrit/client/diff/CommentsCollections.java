begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Comparator
operator|.
name|comparing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|DiffObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|client
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_comment
comment|/** Collection of published and draft comments loaded from the server. */
end_comment

begin_class
DECL|class|CommentsCollections
class|class
name|CommentsCollections
block|{
DECL|field|project
annotation|@
name|Nullable
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|base
specifier|private
specifier|final
name|DiffObject
name|base
decl_stmt|;
DECL|field|revision
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|revision
decl_stmt|;
DECL|field|publishedBaseAll
specifier|private
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|publishedBaseAll
decl_stmt|;
DECL|field|publishedRevisionAll
specifier|private
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|publishedRevisionAll
decl_stmt|;
DECL|field|publishedBase
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|publishedBase
decl_stmt|;
DECL|field|publishedRevision
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|publishedRevision
decl_stmt|;
DECL|field|draftsBase
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|draftsBase
decl_stmt|;
DECL|field|draftsRevision
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|draftsRevision
decl_stmt|;
DECL|method|CommentsCollections ( @ullable Project.NameKey project, DiffObject base, PatchSet.Id revision, String path)
name|CommentsCollections
parameter_list|(
annotation|@
name|Nullable
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|DiffObject
name|base
parameter_list|,
name|PatchSet
operator|.
name|Id
name|revision
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|revision
operator|=
name|revision
expr_stmt|;
block|}
DECL|method|load (CallbackGroup group)
name|void
name|load
parameter_list|(
name|CallbackGroup
name|group
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|isPatchSet
argument_list|()
condition|)
block|{
name|CommentApi
operator|.
name|comments
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|project
argument_list|)
argument_list|,
name|base
operator|.
name|asPatchSetId
argument_list|()
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|publishedBase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CommentApi
operator|.
name|comments
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|project
argument_list|)
argument_list|,
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|publishedRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
if|if
condition|(
name|base
operator|.
name|isPatchSet
argument_list|()
condition|)
block|{
name|CommentApi
operator|.
name|drafts
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|project
argument_list|)
argument_list|,
name|base
operator|.
name|asPatchSetId
argument_list|()
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|draftsBase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|CommentApi
operator|.
name|drafts
argument_list|(
name|Project
operator|.
name|NameKey
operator|.
name|asStringOrNull
argument_list|(
name|project
argument_list|)
argument_list|,
name|revision
argument_list|,
name|group
operator|.
name|add
argument_list|(
name|draftsRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|hasCommentForPath (String filePath)
name|boolean
name|hasCommentForPath
parameter_list|(
name|String
name|filePath
parameter_list|)
block|{
if|if
condition|(
name|base
operator|.
name|isPatchSet
argument_list|()
condition|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|forBase
init|=
name|publishedBaseAll
operator|.
name|get
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|forBase
operator|!=
literal|null
operator|&&
name|forBase
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|forRevision
init|=
name|publishedRevisionAll
operator|.
name|get
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|forRevision
operator|!=
literal|null
operator|&&
name|forRevision
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|publishedBase ()
specifier|private
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|publishedBase
parameter_list|()
block|{
return|return
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|publishedBaseAll
operator|=
name|result
expr_stmt|;
name|publishedBase
operator|=
name|sort
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
return|;
block|}
DECL|method|publishedRevision ()
specifier|private
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|publishedRevision
parameter_list|()
block|{
return|return
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|k
range|:
name|result
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|filterForParent
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|publishedRevisionAll
operator|=
name|result
expr_stmt|;
name|publishedRevision
operator|=
name|sort
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
return|;
block|}
DECL|method|filterForParent (JsArray<CommentInfo> list)
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|filterForParent
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|list
parameter_list|)
block|{
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|result
init|=
name|JsArray
operator|.
name|createArray
argument_list|()
operator|.
name|cast
argument_list|()
decl_stmt|;
for|for
control|(
name|CommentInfo
name|c
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|list
argument_list|)
control|)
block|{
if|if
condition|(
name|c
operator|.
name|side
argument_list|()
operator|==
name|Side
operator|.
name|REVISION
condition|)
block|{
name|result
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|.
name|isBaseOrAutoMerge
argument_list|()
operator|&&
operator|!
name|c
operator|.
name|hasParent
argument_list|()
condition|)
block|{
name|result
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|base
operator|.
name|isParent
argument_list|()
operator|&&
name|c
operator|.
name|parent
argument_list|()
operator|==
name|base
operator|.
name|getParentNum
argument_list|()
condition|)
block|{
name|result
operator|.
name|push
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|draftsBase ()
specifier|private
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|draftsBase
parameter_list|()
block|{
return|return
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
name|draftsBase
operator|=
name|sort
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
return|;
block|}
DECL|method|draftsRevision ()
specifier|private
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
name|draftsRevision
parameter_list|()
block|{
return|return
operator|new
name|AsyncCallback
argument_list|<
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|result
parameter_list|)
block|{
for|for
control|(
name|String
name|k
range|:
name|result
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|filterForParent
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|draftsRevision
operator|=
name|sort
argument_list|(
name|result
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{}
block|}
return|;
block|}
DECL|method|sort (JsArray<CommentInfo> in)
specifier|private
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|sort
parameter_list|(
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|CommentInfo
name|c
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|in
argument_list|)
control|)
block|{
name|c
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Natives
operator|.
name|asList
argument_list|(
name|in
argument_list|)
operator|.
name|sort
argument_list|(
name|comparing
argument_list|(
name|CommentInfo
operator|::
name|updated
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|in
return|;
block|}
block|}
end_class

end_unit

