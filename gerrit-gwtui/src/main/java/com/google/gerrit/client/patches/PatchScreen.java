begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ErrorDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|RpcStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommitMessageBlock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PatchTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|projects
operator|.
name|ConfigInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|CallbackGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ListenableAccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|client
operator|.
name|ClientSideFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|client
operator|.
name|PrettyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|ScheduledCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_class
DECL|class|PatchScreen
specifier|public
specifier|abstract
class|class
name|PatchScreen
extends|extends
name|Screen
implements|implements
name|CommentEditorContainer
block|{
DECL|field|PRETTY
specifier|static
specifier|final
name|PrettyFactory
name|PRETTY
init|=
name|ClientSideFormatter
operator|.
name|FACTORY
decl_stmt|;
DECL|field|LARGE_FILE_CONTEXT
specifier|static
specifier|final
name|short
name|LARGE_FILE_CONTEXT
init|=
literal|100
decl_stmt|;
DECL|class|SideBySide
specifier|public
specifier|static
class|class
name|SideBySide
extends|extends
name|PatchScreen
block|{
DECL|method|SideBySide (final Patch.Key id, final int patchIndex, final PatchSetDetail patchSetDetail, final PatchTable patchTable, final TopView topView, final PatchSet.Id baseId)
specifier|public
name|SideBySide
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|patchSetDetail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|TopView
name|topView
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|baseId
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchSetDetail
argument_list|,
name|patchTable
argument_list|,
name|topView
argument_list|,
name|baseId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContentTable ()
specifier|protected
name|SideBySideTable
name|createContentTable
parameter_list|()
block|{
return|return
operator|new
name|SideBySideTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPatchScreenType ()
specifier|public
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
block|{
return|return
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
return|;
block|}
block|}
DECL|class|Unified
specifier|public
specifier|static
class|class
name|Unified
extends|extends
name|PatchScreen
block|{
DECL|method|Unified (final Patch.Key id, final int patchIndex, final PatchSetDetail patchSetDetail, final PatchTable patchTable, final TopView topView, final PatchSet.Id baseId)
specifier|public
name|Unified
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|patchSetDetail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|TopView
name|topView
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|baseId
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchSetDetail
argument_list|,
name|patchTable
argument_list|,
name|topView
argument_list|,
name|baseId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContentTable ()
specifier|protected
name|UnifiedDiffTable
name|createContentTable
parameter_list|()
block|{
return|return
operator|new
name|UnifiedDiffTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPatchScreenType ()
specifier|public
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
block|{
return|return
name|PatchScreen
operator|.
name|Type
operator|.
name|UNIFIED
return|;
block|}
block|}
comment|/**    * What should be displayed in the top of the screen    */
DECL|enum|TopView
specifier|public
specifier|static
enum|enum
name|TopView
block|{
DECL|enumConstant|MAIN
DECL|enumConstant|COMMIT
DECL|enumConstant|PREFERENCES
DECL|enumConstant|PATCH_SETS
DECL|enumConstant|FILES
name|MAIN
block|,
name|COMMIT
block|,
name|PREFERENCES
block|,
name|PATCH_SETS
block|,
name|FILES
block|}
DECL|field|patchKey
specifier|protected
specifier|final
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|patchSetDetail
specifier|protected
name|PatchSetDetail
name|patchSetDetail
decl_stmt|;
DECL|field|fileList
specifier|protected
name|PatchTable
name|fileList
decl_stmt|;
DECL|field|idSideA
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideA
decl_stmt|;
DECL|field|idSideB
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideB
decl_stmt|;
DECL|field|settingsPanel
specifier|protected
name|PatchScriptSettingsPanel
name|settingsPanel
decl_stmt|;
DECL|field|topView
specifier|protected
name|TopView
name|topView
decl_stmt|;
DECL|field|commentLinkProcessor
specifier|protected
name|CommentLinkProcessor
name|commentLinkProcessor
decl_stmt|;
DECL|field|reviewedPanels
specifier|private
name|ReviewedPanels
name|reviewedPanels
decl_stmt|;
DECL|field|historyTable
specifier|private
name|HistoryTable
name|historyTable
decl_stmt|;
DECL|field|topPanel
specifier|private
name|FlowPanel
name|topPanel
decl_stmt|;
DECL|field|contentPanel
specifier|private
name|FlowPanel
name|contentPanel
decl_stmt|;
DECL|field|contentTable
specifier|private
name|AbstractPatchContentTable
name|contentTable
decl_stmt|;
DECL|field|commitMessageBlock
specifier|private
name|CommitMessageBlock
name|commitMessageBlock
decl_stmt|;
DECL|field|topNav
specifier|private
name|NavLinks
name|topNav
decl_stmt|;
DECL|field|bottomNav
specifier|private
name|NavLinks
name|bottomNav
decl_stmt|;
DECL|field|rpcSequence
specifier|private
name|int
name|rpcSequence
decl_stmt|;
DECL|field|lastScript
specifier|private
name|PatchScript
name|lastScript
decl_stmt|;
comment|/** The index of the file we are currently looking at among the fileList */
DECL|field|patchIndex
specifier|private
name|int
name|patchIndex
decl_stmt|;
DECL|field|prefs
specifier|private
name|ListenableAccountDiffPreference
name|prefs
decl_stmt|;
DECL|field|prefsHandler
specifier|private
name|HandlerRegistration
name|prefsHandler
decl_stmt|;
comment|/** Keys that cause an action on this screen */
DECL|field|keysNavigation
specifier|private
name|KeyCommandSet
name|keysNavigation
decl_stmt|;
DECL|field|keysAction
specifier|private
name|KeyCommandSet
name|keysAction
decl_stmt|;
DECL|field|regNavigation
specifier|private
name|HandlerRegistration
name|regNavigation
decl_stmt|;
DECL|field|regAction
specifier|private
name|HandlerRegistration
name|regAction
decl_stmt|;
DECL|field|intralineFailure
specifier|private
name|boolean
name|intralineFailure
decl_stmt|;
DECL|field|intralineTimeout
specifier|private
name|boolean
name|intralineTimeout
decl_stmt|;
comment|/**    * How this patch should be displayed in the patch screen.    */
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|UNIFIED
DECL|enumConstant|SIDE_BY_SIDE
name|UNIFIED
block|,
name|SIDE_BY_SIDE
block|}
DECL|method|PatchScreen (final Patch.Key id, final int patchIndex, final PatchSetDetail detail, final PatchTable patchTable, final TopView top, final PatchSet.Id baseId)
specifier|protected
name|PatchScreen
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchSetDetail
name|detail
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|,
specifier|final
name|TopView
name|top
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|baseId
parameter_list|)
block|{
name|patchKey
operator|=
name|id
expr_stmt|;
name|patchSetDetail
operator|=
name|detail
expr_stmt|;
name|fileList
operator|=
name|patchTable
expr_stmt|;
name|topView
operator|=
name|top
expr_stmt|;
name|idSideA
operator|=
name|baseId
expr_stmt|;
comment|// null here means we're diff'ing from the Base
name|idSideB
operator|=
name|id
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|patchIndex
operator|=
name|patchIndex
expr_stmt|;
name|prefs
operator|=
name|fileList
operator|!=
literal|null
condition|?
name|fileList
operator|.
name|getPreferences
argument_list|()
else|:
operator|new
name|ListenableAccountDiffPreference
argument_list|()
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|prefs
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|reviewedPanels
operator|=
operator|new
name|ReviewedPanels
argument_list|()
expr_stmt|;
name|settingsPanel
operator|=
operator|new
name|PatchScriptSettingsPanel
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyDraftDelta (int delta)
specifier|public
name|void
name|notifyDraftDelta
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|lastScript
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (CommentEditorPanel panel)
specifier|public
name|void
name|remove
parameter_list|(
name|CommentEditorPanel
name|panel
parameter_list|)
block|{
name|lastScript
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|update (AccountDiffPreference dp)
specifier|private
name|void
name|update
parameter_list|(
name|AccountDiffPreference
name|dp
parameter_list|)
block|{
comment|// Did the user just turn on auto-review?
if|if
condition|(
operator|!
name|reviewedPanels
operator|.
name|getValue
argument_list|()
operator|&&
name|prefs
operator|.
name|getOld
argument_list|()
operator|.
name|isManualReview
argument_list|()
operator|&&
operator|!
name|dp
operator|.
name|isManualReview
argument_list|()
condition|)
block|{
name|reviewedPanels
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reviewedPanels
operator|.
name|setReviewedByCurrentUser
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lastScript
operator|!=
literal|null
operator|&&
name|canReuse
argument_list|(
name|dp
argument_list|,
name|lastScript
argument_list|)
condition|)
block|{
name|lastScript
operator|.
name|setDiffPrefs
argument_list|(
name|dp
argument_list|)
expr_stmt|;
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcStart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleDeferred
argument_list|(
operator|new
name|ScheduledCommand
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|onResult
argument_list|(
name|lastScript
argument_list|,
literal|false
comment|/* not the first time */
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcComplete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canReuse (AccountDiffPreference dp, PatchScript last)
specifier|private
name|boolean
name|canReuse
parameter_list|(
name|AccountDiffPreference
name|dp
parameter_list|,
name|PatchScript
name|last
parameter_list|)
block|{
if|if
condition|(
name|last
operator|.
name|getDiffPrefs
argument_list|()
operator|.
name|getIgnoreWhitespace
argument_list|()
operator|!=
name|dp
operator|.
name|getIgnoreWhitespace
argument_list|()
condition|)
block|{
comment|// Whitespace ignore setting requires server computation.
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|ctx
init|=
name|dp
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
name|AccountDiffPreference
operator|.
name|WHOLE_FILE_CONTEXT
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We don't have the entire file here, so we can't render it.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|last
operator|.
name|getDiffPrefs
argument_list|()
operator|.
name|getContext
argument_list|()
operator|<
name|ctx
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We don't have sufficient context.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dp
operator|.
name|isSyntaxHighlighting
argument_list|()
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We need the whole file to syntax highlight accurately.
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|setTitleFarEast
argument_list|(
name|reviewedPanels
operator|.
name|top
argument_list|)
expr_stmt|;
block|}
name|keysNavigation
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToChangeCommand
argument_list|(
name|patchKey
operator|.
name|getParentKey
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|'u'
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|FileListCmd
argument_list|(
literal|0
argument_list|,
literal|'f'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|fileList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|keysAction
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionActions
argument_list|()
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|ToggleReviewedCmd
argument_list|(
literal|0
argument_list|,
literal|'m'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|toggleReviewed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysAction
operator|.
name|add
argument_list|(
operator|new
name|MarkAsReviewedAndGoToNextCmd
argument_list|(
literal|0
argument_list|,
literal|'M'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|markAsReviewedAndGoToNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|historyTable
operator|=
operator|new
name|HistoryTable
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|commitMessageBlock
operator|=
operator|new
name|CommitMessageBlock
argument_list|()
expr_stmt|;
name|topPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|add
argument_list|(
name|topPanel
argument_list|)
expr_stmt|;
name|contentTable
operator|=
name|createContentTable
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|fileList
operator|=
name|fileList
expr_stmt|;
name|topNav
operator|=
operator|new
name|NavLinks
argument_list|(
name|keysNavigation
argument_list|,
name|patchKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|bottomNav
operator|=
operator|new
name|NavLinks
argument_list|(
literal|null
argument_list|,
name|patchKey
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|topNav
argument_list|)
expr_stmt|;
name|contentPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
if|if
condition|(
name|getPatchScreenType
argument_list|()
operator|==
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
condition|)
block|{
name|contentPanel
operator|.
name|setStyleName
argument_list|(
comment|//
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|sideBySideScreenSideBySideTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|contentPanel
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|unifiedTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contentPanel
operator|.
name|add
argument_list|(
name|contentTable
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|contentPanel
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|bottomNav
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|add
argument_list|(
name|reviewedPanels
operator|.
name|bottom
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|topNav
operator|.
name|display
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|,
name|fileList
argument_list|)
expr_stmt|;
name|bottomNav
operator|.
name|display
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|,
name|fileList
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
if|if
condition|(
name|patchSetDetail
operator|==
literal|null
condition|)
block|{
name|Util
operator|.
name|DETAIL_SVC
operator|.
name|patchSetDetail
argument_list|(
name|idSideB
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchSetDetail
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PatchSetDetail
name|result
parameter_list|)
block|{
name|patchSetDetail
operator|=
name|result
expr_stmt|;
if|if
condition|(
name|fileList
operator|==
literal|null
condition|)
block|{
name|fileList
operator|=
operator|new
name|PatchTable
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|display
argument_list|(
name|idSideA
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|patchIndex
operator|=
name|fileList
operator|.
name|indexOf
argument_list|(
name|patchKey
argument_list|)
expr_stmt|;
block|}
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|prefsHandler
operator|!=
literal|null
condition|)
block|{
name|prefsHandler
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|prefsHandler
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|regNavigation
operator|!=
literal|null
condition|)
block|{
name|regNavigation
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regNavigation
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|regAction
operator|!=
literal|null
condition|)
block|{
name|regAction
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regAction
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|setRegisterKeys
argument_list|(
name|contentTable
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|regNavigation
operator|!=
literal|null
condition|)
block|{
name|regNavigation
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regNavigation
operator|=
literal|null
expr_stmt|;
block|}
name|regNavigation
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
expr_stmt|;
if|if
condition|(
name|regAction
operator|!=
literal|null
condition|)
block|{
name|regAction
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regAction
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|keysAction
operator|!=
literal|null
condition|)
block|{
name|regAction
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysAction
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createContentTable ()
specifier|protected
specifier|abstract
name|AbstractPatchContentTable
name|createContentTable
parameter_list|()
function_decl|;
DECL|method|getPatchScreenType ()
specifier|public
specifier|abstract
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
function_decl|;
DECL|method|getSideA ()
specifier|public
name|PatchSet
operator|.
name|Id
name|getSideA
parameter_list|()
block|{
return|return
name|idSideA
return|;
block|}
DECL|method|getPatchKey ()
specifier|public
name|Patch
operator|.
name|Key
name|getPatchKey
parameter_list|()
block|{
return|return
name|patchKey
return|;
block|}
DECL|method|getPatchIndex ()
specifier|public
name|int
name|getPatchIndex
parameter_list|()
block|{
return|return
name|patchIndex
return|;
block|}
DECL|method|getPatchSetDetail ()
specifier|public
name|PatchSetDetail
name|getPatchSetDetail
parameter_list|()
block|{
return|return
name|patchSetDetail
return|;
block|}
DECL|method|getFileList ()
specifier|public
name|PatchTable
name|getFileList
parameter_list|()
block|{
return|return
name|fileList
return|;
block|}
DECL|method|getTopView ()
specifier|public
name|TopView
name|getTopView
parameter_list|()
block|{
return|return
name|topView
return|;
block|}
DECL|method|refresh (final boolean isFirst)
specifier|protected
name|void
name|refresh
parameter_list|(
specifier|final
name|boolean
name|isFirst
parameter_list|)
block|{
specifier|final
name|int
name|rpcseq
init|=
operator|++
name|rpcSequence
decl_stmt|;
name|lastScript
operator|=
literal|null
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|reviewedPanels
operator|.
name|populate
argument_list|(
name|patchKey
argument_list|,
name|fileList
argument_list|,
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isFirst
operator|&&
name|fileList
operator|!=
literal|null
operator|&&
name|fileList
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|fileList
operator|.
name|movePointerTo
argument_list|(
name|patchKey
argument_list|)
expr_stmt|;
block|}
name|CallbackGroup
name|cb
init|=
operator|new
name|CallbackGroup
argument_list|()
decl_stmt|;
name|ConfigInfoCache
operator|.
name|get
argument_list|(
name|patchSetDetail
operator|.
name|getProject
argument_list|()
argument_list|,
name|cb
operator|.
name|add
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|ConfigInfoCache
operator|.
name|Entry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|ConfigInfoCache
operator|.
name|Entry
name|result
parameter_list|)
block|{
name|commentLinkProcessor
operator|=
name|result
operator|.
name|getCommentLinkProcessor
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|setCommentLinkProcessor
argument_list|(
name|commentLinkProcessor
argument_list|)
expr_stmt|;
name|setTheme
argument_list|(
name|result
operator|.
name|getTheme
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{
comment|// Handled by ScreenLoadCallback.onFailure.
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|patchScript
argument_list|(
name|patchKey
argument_list|,
name|idSideA
argument_list|,
name|idSideB
argument_list|,
name|settingsPanel
operator|.
name|getValue
argument_list|()
argument_list|,
name|cb
operator|.
name|addFinal
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|PatchScript
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
specifier|final
name|PatchScript
name|result
parameter_list|)
block|{
if|if
condition|(
name|rpcSequence
operator|==
name|rpcseq
condition|)
block|{
name|onResult
argument_list|(
name|result
argument_list|,
name|isFirst
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|rpcSequence
operator|==
name|rpcseq
condition|)
block|{
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|onResult (final PatchScript script, final boolean isFirst)
specifier|private
name|void
name|onResult
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|boolean
name|isFirst
parameter_list|)
block|{
specifier|final
name|String
name|path
init|=
name|PatchTable
operator|.
name|getDisplayFileName
argument_list|(
name|patchKey
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|path
decl_stmt|;
specifier|final
name|int
name|last
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|>=
literal|0
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|last
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|setWindowTitle
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|setPageTitle
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|idSideB
operator|.
name|equals
argument_list|(
name|patchSetDetail
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|commitMessageBlock
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|commitMessageBlock
operator|.
name|display
argument_list|(
name|patchSetDetail
operator|.
name|getInfo
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|commentLinkProcessor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|commitMessageBlock
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|DETAIL_SVC
operator|.
name|patchSetDetail
argument_list|(
name|idSideB
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchSetDetail
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|PatchSetDetail
name|result
parameter_list|)
block|{
name|commitMessageBlock
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|commitMessageBlock
operator|.
name|display
argument_list|(
name|result
operator|.
name|getInfo
argument_list|()
operator|.
name|getMessage
argument_list|()
argument_list|,
name|commentLinkProcessor
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|historyTable
operator|.
name|display
argument_list|(
name|script
operator|.
name|getHistory
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Patch
name|p
range|:
name|patchSetDetail
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|patchKey
argument_list|)
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getPatchType
argument_list|()
operator|.
name|equals
argument_list|(
name|Patch
operator|.
name|PatchType
operator|.
name|BINARY
argument_list|)
condition|)
block|{
name|contentTable
operator|.
name|isDisplayBinary
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|contentTable
operator|instanceof
name|SideBySideTable
operator|&&
name|contentTable
operator|.
name|isPureMetaChange
argument_list|(
name|script
argument_list|)
operator|&&
operator|!
name|contentTable
operator|.
name|isDisplayBinary
condition|)
block|{
comment|// User asked for SideBySide (or a link guessed, wrong) and we can't
comment|// show a pure-rename change there accurately. Switch to
comment|// the unified view instead. User can set file comments on binary file
comment|// in SideBySide view.
comment|//
name|contentTable
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|contentTable
operator|=
operator|new
name|UnifiedDiffTable
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|fileList
operator|=
name|fileList
expr_stmt|;
name|contentTable
operator|.
name|setCommentLinkProcessor
argument_list|(
name|commentLinkProcessor
argument_list|)
expr_stmt|;
name|contentPanel
operator|.
name|add
argument_list|(
name|contentTable
argument_list|)
expr_stmt|;
name|setToken
argument_list|(
name|Dispatcher
operator|.
name|toPatchUnified
argument_list|(
name|idSideA
argument_list|,
name|patchKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|.
name|isHugeFile
argument_list|()
condition|)
block|{
name|AccountDiffPreference
name|dp
init|=
name|script
operator|.
name|getDiffPrefs
argument_list|()
decl_stmt|;
name|int
name|context
init|=
name|dp
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
name|AccountDiffPreference
operator|.
name|WHOLE_FILE_CONTEXT
condition|)
block|{
name|context
operator|=
name|Short
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|context
operator|>
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
name|context
operator|=
name|Short
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
name|dp
operator|.
name|setContext
argument_list|(
operator|(
name|short
operator|)
name|Math
operator|.
name|min
argument_list|(
name|context
argument_list|,
name|LARGE_FILE_CONTEXT
argument_list|)
argument_list|)
expr_stmt|;
name|dp
operator|.
name|setSyntaxHighlighting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|script
operator|.
name|setDiffPrefs
argument_list|(
name|dp
argument_list|)
expr_stmt|;
block|}
name|contentTable
operator|.
name|display
argument_list|(
name|patchKey
argument_list|,
name|idSideA
argument_list|,
name|idSideB
argument_list|,
name|script
argument_list|,
name|patchSetDetail
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|display
argument_list|(
name|script
operator|.
name|getCommentDetail
argument_list|()
argument_list|,
name|script
operator|.
name|isExpandAllComments
argument_list|()
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|finishDisplay
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|setRegisterKeys
argument_list|(
name|isCurrentView
argument_list|()
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnableSmallFileFeatures
argument_list|(
operator|!
name|script
operator|.
name|isHugeFile
argument_list|()
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnableIntralineDifference
argument_list|(
name|script
operator|.
name|hasIntralineDifference
argument_list|()
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lastScript
operator|=
name|script
expr_stmt|;
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|topNav
operator|.
name|display
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|,
name|fileList
argument_list|)
expr_stmt|;
name|bottomNav
operator|.
name|display
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|,
name|fileList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|boolean
name|isReviewed
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isFirst
operator|&&
operator|!
name|prefs
operator|.
name|get
argument_list|()
operator|.
name|isManualReview
argument_list|()
condition|)
block|{
name|isReviewed
operator|=
literal|true
expr_stmt|;
name|reviewedPanels
operator|.
name|setReviewedByCurrentUser
argument_list|(
name|isReviewed
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Patch
name|p
range|:
name|patchSetDetail
operator|.
name|getPatches
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|patchKey
argument_list|)
condition|)
block|{
name|isReviewed
operator|=
name|p
operator|.
name|isReviewedByCurrentUser
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
name|reviewedPanels
operator|.
name|setValue
argument_list|(
name|isReviewed
argument_list|)
expr_stmt|;
block|}
name|intralineFailure
operator|=
name|isFirst
operator|&&
name|script
operator|.
name|hasIntralineFailure
argument_list|()
expr_stmt|;
name|intralineTimeout
operator|=
name|isFirst
operator|&&
name|script
operator|.
name|hasIntralineTimeout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onShowView ()
specifier|public
name|void
name|onShowView
parameter_list|()
block|{
name|super
operator|.
name|onShowView
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefsHandler
operator|==
literal|null
condition|)
block|{
name|prefsHandler
operator|=
name|prefs
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|AccountDiffPreference
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|AccountDiffPreference
argument_list|>
name|event
parameter_list|)
block|{
name|update
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|intralineFailure
condition|)
block|{
name|intralineFailure
operator|=
literal|false
expr_stmt|;
operator|new
name|ErrorDialog
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|intralineFailure
argument_list|()
argument_list|)
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|intralineTimeout
condition|)
block|{
name|intralineTimeout
operator|=
literal|false
expr_stmt|;
operator|new
name|ErrorDialog
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|intralineTimeout
argument_list|()
argument_list|)
operator|.
name|setText
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|warnTitle
argument_list|()
argument_list|)
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|topView
operator|!=
literal|null
operator|&&
name|prefs
operator|.
name|get
argument_list|()
operator|.
name|isRetainHeader
argument_list|()
condition|)
block|{
name|setTopView
argument_list|(
name|topView
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setTopView (TopView tv)
specifier|public
name|void
name|setTopView
parameter_list|(
name|TopView
name|tv
parameter_list|)
block|{
name|topView
operator|=
name|tv
expr_stmt|;
name|topPanel
operator|.
name|clear
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|tv
condition|)
block|{
case|case
name|COMMIT
case|:
name|topPanel
operator|.
name|add
argument_list|(
name|commitMessageBlock
argument_list|)
expr_stmt|;
break|break;
case|case
name|PREFERENCES
case|:
name|topPanel
operator|.
name|add
argument_list|(
name|settingsPanel
argument_list|)
expr_stmt|;
break|break;
case|case
name|PATCH_SETS
case|:
name|topPanel
operator|.
name|add
argument_list|(
name|historyTable
argument_list|)
expr_stmt|;
break|break;
case|case
name|FILES
case|:
name|topPanel
operator|.
name|add
argument_list|(
name|fileList
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAIN
case|:
break|break;
block|}
block|}
DECL|class|FileListCmd
specifier|public
class|class
name|FileListCmd
extends|extends
name|KeyCommand
block|{
DECL|method|FileListCmd (int mask, int key, String help)
specifier|public
name|FileListCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|==
literal|null
operator|||
name|fileList
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psid
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|fileList
operator|=
operator|new
name|PatchTable
argument_list|(
name|prefs
argument_list|)
expr_stmt|;
name|fileList
operator|.
name|setSavePointerId
argument_list|(
literal|"PatchTable "
operator|+
name|psid
argument_list|)
expr_stmt|;
name|Util
operator|.
name|DETAIL_SVC
operator|.
name|patchSetDetail
argument_list|(
name|psid
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchSetDetail
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PatchSetDetail
name|result
parameter_list|)
block|{
name|fileList
operator|.
name|display
argument_list|(
name|idSideA
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PatchBrowserPopup
name|p
init|=
operator|new
name|PatchBrowserPopup
argument_list|(
name|patchKey
argument_list|,
name|fileList
argument_list|)
decl_stmt|;
name|p
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|ToggleReviewedCmd
specifier|public
class|class
name|ToggleReviewedCmd
extends|extends
name|KeyCommand
block|{
DECL|method|ToggleReviewedCmd (int mask, int key, String help)
specifier|public
name|ToggleReviewedCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
specifier|final
name|boolean
name|isReviewed
init|=
operator|!
name|reviewedPanels
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|reviewedPanels
operator|.
name|setValue
argument_list|(
name|isReviewed
argument_list|)
expr_stmt|;
name|reviewedPanels
operator|.
name|setReviewedByCurrentUser
argument_list|(
name|isReviewed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|MarkAsReviewedAndGoToNextCmd
specifier|public
class|class
name|MarkAsReviewedAndGoToNextCmd
extends|extends
name|KeyCommand
block|{
DECL|method|MarkAsReviewedAndGoToNextCmd (int mask, int key, String help)
specifier|public
name|MarkAsReviewedAndGoToNextCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|reviewedPanels
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

