begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGeneralPreferences
operator|.
name|WHOLE_FILE_CONTEXT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|RpcStatus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|PatchTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ChangeLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScript
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchScriptSettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|client
operator|.
name|ClientSideFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|PrettyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|CloseHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|OpenHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|HandlerRegistration
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DeferredCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasHorizontalAlignment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|GlobalKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommandSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_class
DECL|class|PatchScreen
specifier|public
specifier|abstract
class|class
name|PatchScreen
extends|extends
name|Screen
implements|implements
name|CommentEditorContainer
block|{
DECL|field|PRETTY
specifier|static
specifier|final
name|PrettyFactory
name|PRETTY
init|=
name|ClientSideFormatter
operator|.
name|FACTORY
decl_stmt|;
DECL|class|SideBySide
specifier|public
specifier|static
class|class
name|SideBySide
extends|extends
name|PatchScreen
block|{
DECL|method|SideBySide (final Patch.Key id, final int patchIndex, final PatchTable patchTable)
specifier|public
name|SideBySide
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContentTable ()
specifier|protected
name|SideBySideTable
name|createContentTable
parameter_list|()
block|{
return|return
operator|new
name|SideBySideTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPatchScreenType ()
specifier|protected
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
block|{
return|return
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
return|;
block|}
block|}
DECL|class|Unified
specifier|public
specifier|static
class|class
name|Unified
extends|extends
name|PatchScreen
block|{
DECL|method|Unified (final Patch.Key id, final int patchIndex, final PatchTable patchTable)
specifier|public
name|Unified
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|patchIndex
argument_list|,
name|patchTable
argument_list|)
expr_stmt|;
specifier|final
name|PatchScriptSettings
name|s
init|=
name|settingsPanel
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|s
operator|.
name|getPrettySettings
argument_list|()
operator|.
name|setSyntaxHighlighting
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setValue
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createContentTable ()
specifier|protected
name|UnifiedDiffTable
name|createContentTable
parameter_list|()
block|{
return|return
operator|new
name|UnifiedDiffTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPatchScreenType ()
specifier|protected
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
block|{
return|return
name|PatchScreen
operator|.
name|Type
operator|.
name|UNIFIED
return|;
block|}
block|}
comment|// Which patch set id's are being diff'ed
DECL|field|diffSideA
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|diffSideA
init|=
literal|null
decl_stmt|;
DECL|field|diffSideB
specifier|private
specifier|static
name|PatchSet
operator|.
name|Id
name|diffSideB
init|=
literal|null
decl_stmt|;
DECL|field|historyOpen
specifier|private
specifier|static
name|Boolean
name|historyOpen
init|=
literal|null
decl_stmt|;
DECL|field|cacheOpenState
specifier|private
specifier|static
specifier|final
name|OpenHandler
argument_list|<
name|DisclosurePanel
argument_list|>
name|cacheOpenState
init|=
operator|new
name|OpenHandler
argument_list|<
name|DisclosurePanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onOpen
parameter_list|(
name|OpenEvent
argument_list|<
name|DisclosurePanel
argument_list|>
name|event
parameter_list|)
block|{
name|historyOpen
operator|=
literal|true
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|field|cacheCloseState
specifier|private
specifier|static
specifier|final
name|CloseHandler
argument_list|<
name|DisclosurePanel
argument_list|>
name|cacheCloseState
init|=
operator|new
name|CloseHandler
argument_list|<
name|DisclosurePanel
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClose
parameter_list|(
name|CloseEvent
argument_list|<
name|DisclosurePanel
argument_list|>
name|event
parameter_list|)
block|{
name|historyOpen
operator|=
literal|false
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|// The change id for which the above patch set id's are valid
DECL|field|currentChangeId
specifier|private
specifier|static
name|Change
operator|.
name|Id
name|currentChangeId
init|=
literal|null
decl_stmt|;
DECL|field|patchKey
specifier|protected
specifier|final
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|fileList
specifier|protected
name|PatchTable
name|fileList
decl_stmt|;
DECL|field|idSideA
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideA
decl_stmt|;
DECL|field|idSideB
specifier|protected
name|PatchSet
operator|.
name|Id
name|idSideB
decl_stmt|;
DECL|field|settingsPanel
specifier|protected
name|PatchScriptSettingsPanel
name|settingsPanel
decl_stmt|;
DECL|field|historyPanel
specifier|private
name|DisclosurePanel
name|historyPanel
decl_stmt|;
DECL|field|historyTable
specifier|private
name|HistoryTable
name|historyTable
decl_stmt|;
DECL|field|contentPanel
specifier|private
name|FlowPanel
name|contentPanel
decl_stmt|;
DECL|field|noDifference
specifier|private
name|Label
name|noDifference
decl_stmt|;
DECL|field|contentTable
specifier|private
name|AbstractPatchContentTable
name|contentTable
decl_stmt|;
DECL|field|rpcSequence
specifier|private
name|int
name|rpcSequence
decl_stmt|;
DECL|field|lastScript
specifier|private
name|PatchScript
name|lastScript
decl_stmt|;
comment|/** The index of the file we are currently looking at among the fileList */
DECL|field|patchIndex
specifier|private
name|int
name|patchIndex
decl_stmt|;
comment|/** Keys that cause an action on this screen */
DECL|field|keysNavigation
specifier|private
name|KeyCommandSet
name|keysNavigation
decl_stmt|;
DECL|field|regNavigation
specifier|private
name|HandlerRegistration
name|regNavigation
decl_stmt|;
comment|/** Link to the screen for the previous file, null if not applicable */
DECL|field|previousFileLink
specifier|private
name|InlineHyperlink
name|previousFileLink
decl_stmt|;
comment|/** Link to the screen for the next file, null if not applicable */
DECL|field|nextFileLink
specifier|private
name|InlineHyperlink
name|nextFileLink
decl_stmt|;
DECL|field|SHORTCUT_PREVIOUS_FILE
specifier|private
specifier|static
specifier|final
name|char
name|SHORTCUT_PREVIOUS_FILE
init|=
literal|'['
decl_stmt|;
DECL|field|SHORTCUT_NEXT_FILE
specifier|private
specifier|static
specifier|final
name|char
name|SHORTCUT_NEXT_FILE
init|=
literal|']'
decl_stmt|;
comment|/**    * How this patch should be displayed in the patch screen.    */
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|UNIFIED
DECL|enumConstant|SIDE_BY_SIDE
name|UNIFIED
block|,
name|SIDE_BY_SIDE
block|}
DECL|method|PatchScreen (final Patch.Key id, final int patchIndex, final PatchTable patchTable)
specifier|protected
name|PatchScreen
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|,
specifier|final
name|int
name|patchIndex
parameter_list|,
specifier|final
name|PatchTable
name|patchTable
parameter_list|)
block|{
name|patchKey
operator|=
name|id
expr_stmt|;
name|fileList
operator|=
name|patchTable
expr_stmt|;
comment|// If we have any diff side stored, make sure they are applicable to the
comment|// current change, discard them otherwise.
comment|//
name|Change
operator|.
name|Id
name|thisChangeId
init|=
name|id
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentChangeId
operator|!=
literal|null
operator|&&
operator|!
name|currentChangeId
operator|.
name|equals
argument_list|(
name|thisChangeId
argument_list|)
condition|)
block|{
name|diffSideA
operator|=
literal|null
expr_stmt|;
name|diffSideB
operator|=
literal|null
expr_stmt|;
name|historyOpen
operator|=
literal|null
expr_stmt|;
block|}
name|currentChangeId
operator|=
name|thisChangeId
expr_stmt|;
name|idSideA
operator|=
name|diffSideA
expr_stmt|;
comment|// null here means we're diff'ing from the Base
name|idSideB
operator|=
name|diffSideB
operator|!=
literal|null
condition|?
name|diffSideB
else|:
name|id
operator|.
name|getParentKey
argument_list|()
expr_stmt|;
name|this
operator|.
name|patchIndex
operator|=
name|patchIndex
expr_stmt|;
name|settingsPanel
operator|=
operator|new
name|PatchScriptSettingsPanel
argument_list|()
expr_stmt|;
name|settingsPanel
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|PatchScriptSettings
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|PatchScriptSettings
argument_list|>
name|event
parameter_list|)
block|{
name|update
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|getReviewedCheckBox
argument_list|()
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|Boolean
argument_list|>
name|event
parameter_list|)
block|{
name|setReviewedByCurrentUser
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|notifyDraftDelta (int delta)
specifier|public
name|void
name|notifyDraftDelta
parameter_list|(
name|int
name|delta
parameter_list|)
block|{
name|lastScript
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|remove (CommentEditorPanel panel)
specifier|public
name|void
name|remove
parameter_list|(
name|CommentEditorPanel
name|panel
parameter_list|)
block|{
name|lastScript
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|update (PatchScriptSettings s)
specifier|private
name|void
name|update
parameter_list|(
name|PatchScriptSettings
name|s
parameter_list|)
block|{
if|if
condition|(
name|lastScript
operator|!=
literal|null
operator|&&
name|canReuse
argument_list|(
name|s
argument_list|,
name|lastScript
argument_list|)
condition|)
block|{
name|lastScript
operator|.
name|setSettings
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcStart
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|DeferredCommand
operator|.
name|addCommand
argument_list|(
operator|new
name|Command
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|()
block|{
try|try
block|{
name|onResult
argument_list|(
name|lastScript
argument_list|,
literal|false
comment|/* not the first time */
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|RpcStatus
operator|.
name|INSTANCE
operator|.
name|onRpcComplete
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|canReuse (PatchScriptSettings s, PatchScript last)
specifier|private
name|boolean
name|canReuse
parameter_list|(
name|PatchScriptSettings
name|s
parameter_list|,
name|PatchScript
name|last
parameter_list|)
block|{
if|if
condition|(
name|last
operator|.
name|getSettings
argument_list|()
operator|.
name|getWhitespace
argument_list|()
operator|!=
name|s
operator|.
name|getWhitespace
argument_list|()
condition|)
block|{
comment|// Whitespace ignore setting requires server computation.
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|ctx
init|=
name|s
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|ctx
operator|==
name|WHOLE_FILE_CONTEXT
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We don't have the entire file here, so we can't render it.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|last
operator|.
name|getSettings
argument_list|()
operator|.
name|getContext
argument_list|()
operator|<
name|ctx
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We don't have sufficient context.
return|return
literal|false
return|;
block|}
if|if
condition|(
name|s
operator|.
name|getPrettySettings
argument_list|()
operator|.
name|isSyntaxHighlighting
argument_list|()
operator|&&
operator|!
name|last
operator|.
name|getA
argument_list|()
operator|.
name|isWholeFile
argument_list|()
condition|)
block|{
comment|// We need the whole file to syntax highlight accurately.
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|keysNavigation
operator|=
operator|new
name|KeyCommandSet
argument_list|(
name|Gerrit
operator|.
name|C
operator|.
name|sectionNavigation
argument_list|()
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|UpToChangeCommand
argument_list|(
literal|0
argument_list|,
literal|'u'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|upToChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|FileListCmd
argument_list|(
literal|0
argument_list|,
literal|'f'
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|fileList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|historyTable
operator|=
operator|new
name|HistoryTable
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|historyPanel
operator|=
operator|new
name|DisclosurePanel
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|patchHistoryTitle
argument_list|()
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setContent
argument_list|(
name|historyTable
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// If the user selected a different patch set than the default for either
comment|// side, expand the history panel
name|historyPanel
operator|.
name|setOpen
argument_list|(
name|diffSideA
operator|!=
literal|null
operator|||
name|diffSideB
operator|!=
literal|null
operator|||
operator|(
name|historyOpen
operator|!=
literal|null
operator|&&
name|historyOpen
operator|)
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|addOpenHandler
argument_list|(
name|cacheOpenState
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|addCloseHandler
argument_list|(
name|cacheCloseState
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|historyPanel
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|settingsPanel
argument_list|)
expr_stmt|;
name|noDifference
operator|=
operator|new
name|Label
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|noDifference
argument_list|()
argument_list|)
expr_stmt|;
name|noDifference
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchNoDifference
argument_list|()
argument_list|)
expr_stmt|;
name|noDifference
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|contentTable
operator|=
name|createContentTable
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|fileList
operator|=
name|fileList
expr_stmt|;
name|add
argument_list|(
name|createNextPrevLinks
argument_list|()
argument_list|)
expr_stmt|;
name|contentPanel
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|contentPanel
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|sideBySideScreenSideBySideTable
argument_list|()
argument_list|)
expr_stmt|;
name|contentPanel
operator|.
name|add
argument_list|(
name|noDifference
argument_list|)
expr_stmt|;
name|contentPanel
operator|.
name|add
argument_list|(
name|contentTable
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|contentPanel
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|createNextPrevLinks
argument_list|()
argument_list|)
expr_stmt|;
comment|// This must be done after calling createNextPrevLinks(), which initializes
comment|// these fields
if|if
condition|(
name|previousFileLink
operator|!=
literal|null
condition|)
block|{
name|installLinkShortCut
argument_list|(
name|previousFileLink
argument_list|,
name|SHORTCUT_PREVIOUS_FILE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|previousFileHelp
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nextFileLink
operator|!=
literal|null
condition|)
block|{
name|installLinkShortCut
argument_list|(
name|nextFileLink
argument_list|,
name|SHORTCUT_NEXT_FILE
argument_list|,
name|PatchUtil
operator|.
name|C
operator|.
name|nextFileHelp
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|installLinkShortCut (final InlineHyperlink link, char shortcut, String help)
specifier|private
name|void
name|installLinkShortCut
parameter_list|(
specifier|final
name|InlineHyperlink
name|link
parameter_list|,
name|char
name|shortcut
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|KeyCommand
argument_list|(
literal|0
argument_list|,
name|shortcut
argument_list|,
name|help
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|link
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setReviewedByCurrentUser (boolean reviewed)
name|void
name|setReviewedByCurrentUser
parameter_list|(
name|boolean
name|reviewed
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|fileList
operator|.
name|updateReviewedStatus
argument_list|(
name|patchKey
argument_list|,
name|reviewed
argument_list|)
expr_stmt|;
block|}
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|setReviewedByCurrentUser
argument_list|(
name|patchKey
argument_list|,
name|reviewed
argument_list|,
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|arg0
parameter_list|)
block|{
comment|// nop
block|}
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|VoidResult
name|result
parameter_list|)
block|{
comment|// nop
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|createNextPrevLinks ()
specifier|private
name|Widget
name|createNextPrevLinks
parameter_list|()
block|{
specifier|final
name|Grid
name|table
init|=
operator|new
name|Grid
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|table
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|table
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|sideBySideScreenLinkTable
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_LEFT
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_CENTER
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setHorizontalAlignment
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|HasHorizontalAlignment
operator|.
name|ALIGN_RIGHT
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileList
operator|!=
literal|null
condition|)
block|{
name|previousFileLink
operator|=
name|fileList
operator|.
name|getPreviousPatchLink
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|previousFileLink
argument_list|)
expr_stmt|;
name|nextFileLink
operator|=
name|fileList
operator|.
name|getNextPatchLink
argument_list|(
name|patchIndex
argument_list|,
name|getPatchScreenType
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|nextFileLink
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ChangeLink
name|up
init|=
operator|new
name|ChangeLink
argument_list|(
literal|""
argument_list|,
name|patchKey
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
name|SafeHtml
operator|.
name|set
argument_list|(
name|up
argument_list|,
name|SafeHtml
operator|.
name|asis
argument_list|(
name|Util
operator|.
name|C
operator|.
name|upToChangeIconLink
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|up
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|refresh
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|protected
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|regNavigation
operator|!=
literal|null
condition|)
block|{
name|regNavigation
operator|.
name|removeHandler
argument_list|()
expr_stmt|;
name|regNavigation
operator|=
literal|null
expr_stmt|;
block|}
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|registerKeys ()
specifier|public
name|void
name|registerKeys
parameter_list|()
block|{
name|super
operator|.
name|registerKeys
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|setRegisterKeys
argument_list|(
name|contentTable
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|regNavigation
operator|=
name|GlobalKey
operator|.
name|add
argument_list|(
name|this
argument_list|,
name|keysNavigation
argument_list|)
expr_stmt|;
block|}
DECL|method|createContentTable ()
specifier|protected
specifier|abstract
name|AbstractPatchContentTable
name|createContentTable
parameter_list|()
function_decl|;
DECL|method|getPatchScreenType ()
specifier|protected
specifier|abstract
name|PatchScreen
operator|.
name|Type
name|getPatchScreenType
parameter_list|()
function_decl|;
DECL|method|refresh (final boolean isFirst)
specifier|protected
name|void
name|refresh
parameter_list|(
specifier|final
name|boolean
name|isFirst
parameter_list|)
block|{
specifier|final
name|int
name|rpcseq
init|=
operator|++
name|rpcSequence
decl_stmt|;
name|lastScript
operator|=
literal|null
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|PatchUtil
operator|.
name|DETAIL_SVC
operator|.
name|patchScript
argument_list|(
name|patchKey
argument_list|,
name|idSideA
argument_list|,
name|idSideB
argument_list|,
comment|//
name|settingsPanel
operator|.
name|getValue
argument_list|()
argument_list|,
operator|new
name|ScreenLoadCallback
argument_list|<
name|PatchScript
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|preDisplay
parameter_list|(
specifier|final
name|PatchScript
name|result
parameter_list|)
block|{
if|if
condition|(
name|rpcSequence
operator|==
name|rpcseq
condition|)
block|{
name|onResult
argument_list|(
name|result
argument_list|,
name|isFirst
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
if|if
condition|(
name|rpcSequence
operator|==
name|rpcseq
condition|)
block|{
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onResult (final PatchScript script, final boolean isFirst)
specifier|private
name|void
name|onResult
parameter_list|(
specifier|final
name|PatchScript
name|script
parameter_list|,
specifier|final
name|boolean
name|isFirst
parameter_list|)
block|{
specifier|final
name|Change
operator|.
name|Key
name|cid
init|=
name|script
operator|.
name|getChangeId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|path
init|=
name|patchKey
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|path
decl_stmt|;
specifier|final
name|int
name|last
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|>=
literal|0
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|last
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|setWindowTitle
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|patchWindowTitle
argument_list|(
name|cid
operator|.
name|abbreviate
argument_list|()
argument_list|,
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|setPageTitle
argument_list|(
name|PatchUtil
operator|.
name|M
operator|.
name|patchPageTitle
argument_list|(
name|cid
operator|.
name|abbreviate
argument_list|()
argument_list|,
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|historyTable
operator|.
name|display
argument_list|(
name|script
operator|.
name|getHistory
argument_list|()
argument_list|)
expr_stmt|;
name|historyPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// True if there are differences between the two patch sets
name|boolean
name|hasEdits
init|=
operator|!
name|script
operator|.
name|getEdits
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
comment|// True if this change is a mode change or a pure rename/copy
name|boolean
name|hasMeta
init|=
operator|!
name|script
operator|.
name|getPatchHeader
argument_list|()
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|boolean
name|hasDifferences
init|=
name|hasEdits
operator|||
name|hasMeta
decl_stmt|;
name|boolean
name|pureMetaChange
init|=
operator|!
name|hasEdits
operator|&&
name|hasMeta
decl_stmt|;
if|if
condition|(
name|contentTable
operator|instanceof
name|SideBySideTable
operator|&&
name|pureMetaChange
condition|)
block|{
comment|// User asked for SideBySide (or a link guessed, wrong) and we can't
comment|// show a binary or pure-rename change there accurately. Switch to
comment|// the unified view instead.
comment|//
name|contentTable
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|contentTable
operator|=
operator|new
name|UnifiedDiffTable
argument_list|()
expr_stmt|;
name|contentTable
operator|.
name|fileList
operator|=
name|fileList
expr_stmt|;
name|contentPanel
operator|.
name|add
argument_list|(
name|contentTable
argument_list|)
expr_stmt|;
name|setToken
argument_list|(
name|Dispatcher
operator|.
name|toPatchUnified
argument_list|(
name|patchKey
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasDifferences
condition|)
block|{
name|contentTable
operator|.
name|display
argument_list|(
name|patchKey
argument_list|,
name|idSideA
argument_list|,
name|idSideB
argument_list|,
name|script
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|display
argument_list|(
name|script
operator|.
name|getCommentDetail
argument_list|()
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|finishDisplay
argument_list|()
expr_stmt|;
block|}
name|showPatch
argument_list|(
name|hasDifferences
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnableSmallFileFeatures
argument_list|(
operator|!
name|script
operator|.
name|isHugeFile
argument_list|()
argument_list|)
expr_stmt|;
name|settingsPanel
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lastScript
operator|=
name|script
expr_stmt|;
comment|// Mark this file reviewed as soon we display the diff screen
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
operator|&&
name|isFirst
condition|)
block|{
name|settingsPanel
operator|.
name|getReviewedCheckBox
argument_list|()
operator|.
name|setValue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setReviewedByCurrentUser
argument_list|(
literal|true
comment|/* reviewed */
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|showPatch (final boolean showPatch)
specifier|private
name|void
name|showPatch
parameter_list|(
specifier|final
name|boolean
name|showPatch
parameter_list|)
block|{
name|noDifference
operator|.
name|setVisible
argument_list|(
operator|!
name|showPatch
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|setVisible
argument_list|(
name|showPatch
argument_list|)
expr_stmt|;
name|contentTable
operator|.
name|setRegisterKeys
argument_list|(
name|isCurrentView
argument_list|()
operator|&&
name|showPatch
argument_list|)
expr_stmt|;
block|}
DECL|method|setSideA (PatchSet.Id patchSetId)
specifier|public
name|void
name|setSideA
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
block|{
name|idSideA
operator|=
name|patchSetId
expr_stmt|;
name|diffSideA
operator|=
name|patchSetId
expr_stmt|;
block|}
DECL|method|setSideB (PatchSet.Id patchSetId)
specifier|public
name|void
name|setSideB
parameter_list|(
name|PatchSet
operator|.
name|Id
name|patchSetId
parameter_list|)
block|{
name|idSideB
operator|=
name|patchSetId
expr_stmt|;
name|diffSideB
operator|=
name|patchSetId
expr_stmt|;
block|}
DECL|class|UpToChangeCommand
specifier|public
class|class
name|UpToChangeCommand
extends|extends
name|KeyCommand
block|{
DECL|method|UpToChangeCommand (int mask, int key, String help)
specifier|public
name|UpToChangeCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|ck
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
name|PageLinks
operator|.
name|toChange
argument_list|(
name|ck
argument_list|)
argument_list|,
operator|new
name|ChangeScreen
argument_list|(
name|ck
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|FileListCmd
specifier|public
class|class
name|FileListCmd
extends|extends
name|KeyCommand
block|{
DECL|method|FileListCmd (int mask, int key, String help)
specifier|public
name|FileListCmd
parameter_list|(
name|int
name|mask
parameter_list|,
name|int
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (final KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
specifier|final
name|KeyPressEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|fileList
operator|==
literal|null
operator|||
name|fileList
operator|.
name|isAttached
argument_list|()
condition|)
block|{
specifier|final
name|PatchSet
operator|.
name|Id
name|psid
init|=
name|patchKey
operator|.
name|getParentKey
argument_list|()
decl_stmt|;
name|fileList
operator|=
operator|new
name|PatchTable
argument_list|()
expr_stmt|;
name|fileList
operator|.
name|setSavePointerId
argument_list|(
literal|"PatchTable "
operator|+
name|psid
argument_list|)
expr_stmt|;
name|Util
operator|.
name|DETAIL_SVC
operator|.
name|patchSetDetail
argument_list|(
name|psid
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|PatchSetDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|PatchSetDetail
name|result
parameter_list|)
block|{
name|fileList
operator|.
name|display
argument_list|(
name|psid
argument_list|,
name|result
operator|.
name|getPatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|final
name|PatchBrowserPopup
name|p
init|=
operator|new
name|PatchBrowserPopup
argument_list|(
name|patchKey
argument_list|,
name|fileList
argument_list|)
decl_stmt|;
name|p
operator|.
name|open
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

