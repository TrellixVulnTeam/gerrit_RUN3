begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.account
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountExternalId
operator|.
name|SCHEME_USERNAME
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|ScreenLoadCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountExternalId
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|i18n
operator|.
name|client
operator|.
name|LocaleInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Button
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|clippy
operator|.
name|client
operator|.
name|CopyableLabel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|MyPasswordScreen
specifier|public
class|class
name|MyPasswordScreen
extends|extends
name|SettingsScreen
block|{
DECL|field|password
specifier|private
name|CopyableLabel
name|password
decl_stmt|;
DECL|field|generatePassword
specifier|private
name|Button
name|generatePassword
decl_stmt|;
DECL|field|clearPassword
specifier|private
name|Button
name|clearPassword
decl_stmt|;
DECL|field|id
specifier|private
name|AccountExternalId
name|id
decl_stmt|;
annotation|@
name|Override
DECL|method|onInitUI ()
specifier|protected
name|void
name|onInitUI
parameter_list|()
block|{
name|super
operator|.
name|onInitUI
argument_list|()
expr_stmt|;
name|String
name|url
init|=
name|Gerrit
operator|.
name|getConfig
argument_list|()
operator|.
name|getHttpPasswordUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|Anchor
name|link
init|=
operator|new
name|Anchor
argument_list|()
decl_stmt|;
name|link
operator|.
name|setText
argument_list|(
name|Util
operator|.
name|C
operator|.
name|linkObtainPassword
argument_list|()
argument_list|)
expr_stmt|;
name|link
operator|.
name|setHref
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|link
operator|.
name|setTarget
argument_list|(
literal|"_blank"
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|link
argument_list|)
expr_stmt|;
return|return;
block|}
name|password
operator|=
operator|new
name|CopyableLabel
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|password
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|accountPassword
argument_list|()
argument_list|)
expr_stmt|;
name|generatePassword
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonGeneratePassword
argument_list|()
argument_list|)
expr_stmt|;
name|generatePassword
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|doGeneratePassword
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|clearPassword
operator|=
operator|new
name|Button
argument_list|(
name|Util
operator|.
name|C
operator|.
name|buttonClearPassword
argument_list|()
argument_list|)
expr_stmt|;
name|clearPassword
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|doClearPassword
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|userInfo
init|=
operator|new
name|Grid
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|userInfo
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|userInfo
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|infoBlock
argument_list|()
argument_list|)
expr_stmt|;
name|userInfo
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|accountInfoBlock
argument_list|()
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|userInfo
argument_list|)
expr_stmt|;
name|row
argument_list|(
name|userInfo
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|userName
argument_list|()
argument_list|,
operator|new
name|UsernameField
argument_list|()
argument_list|)
expr_stmt|;
name|row
argument_list|(
name|userInfo
argument_list|,
literal|1
argument_list|,
name|Util
operator|.
name|C
operator|.
name|password
argument_list|()
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmost
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmost
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|bottomheader
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|buttons
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|generatePassword
argument_list|)
expr_stmt|;
name|buttons
operator|.
name|add
argument_list|(
name|clearPassword
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|buttons
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|protected
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|display
argument_list|()
expr_stmt|;
return|return;
block|}
name|enableUI
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|ACCOUNT_SEC
operator|.
name|myExternalIds
argument_list|(
operator|new
name|ScreenLoadCallback
argument_list|<
name|List
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|>
argument_list|(
name|this
argument_list|)
block|{
specifier|public
name|void
name|preDisplay
parameter_list|(
specifier|final
name|List
argument_list|<
name|AccountExternalId
argument_list|>
name|result
parameter_list|)
block|{
name|AccountExternalId
name|id
init|=
literal|null
decl_stmt|;
for|for
control|(
name|AccountExternalId
name|i
range|:
name|result
control|)
block|{
if|if
condition|(
name|i
operator|.
name|isScheme
argument_list|(
name|SCHEME_USERNAME
argument_list|)
condition|)
block|{
name|id
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
name|display
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|display (AccountExternalId id)
specifier|private
name|void
name|display
parameter_list|(
name|AccountExternalId
name|id
parameter_list|)
block|{
name|String
name|user
decl_stmt|,
name|pass
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|id
operator|.
name|getSchemeRest
argument_list|()
expr_stmt|;
name|pass
operator|=
name|id
operator|.
name|getPassword
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|user
operator|=
literal|null
expr_stmt|;
name|pass
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|setUserName
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|password
operator|.
name|setText
argument_list|(
name|pass
operator|!=
literal|null
condition|?
name|pass
else|:
literal|""
argument_list|)
expr_stmt|;
name|password
operator|.
name|setVisible
argument_list|(
name|pass
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|enableUI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|row (final Grid info, final int row, final String name, final Widget field)
specifier|private
name|void
name|row
parameter_list|(
specifier|final
name|Grid
name|info
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Widget
name|field
parameter_list|)
block|{
specifier|final
name|CellFormatter
name|fmt
init|=
name|info
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
if|if
condition|(
name|LocaleInfo
operator|.
name|getCurrentLocale
argument_list|()
operator|.
name|isRTL
argument_list|()
condition|)
block|{
name|info
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|header
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|info
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|header
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doGeneratePassword ()
specifier|private
name|void
name|doGeneratePassword
parameter_list|()
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|enableUI
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|ACCOUNT_SEC
operator|.
name|generatePassword
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|AccountExternalId
name|result
parameter_list|)
block|{
name|display
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|enableUI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doClearPassword ()
specifier|private
name|void
name|doClearPassword
parameter_list|()
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|enableUI
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Util
operator|.
name|ACCOUNT_SEC
operator|.
name|clearPassword
argument_list|(
name|id
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|AccountExternalId
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|AccountExternalId
name|result
parameter_list|)
block|{
name|display
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|enableUI
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|enableUI (boolean on)
specifier|private
name|void
name|enableUI
parameter_list|(
name|boolean
name|on
parameter_list|)
block|{
name|on
operator|&=
name|id
operator|!=
literal|null
expr_stmt|;
name|generatePassword
operator|.
name|setEnabled
argument_list|(
name|on
argument_list|)
expr_stmt|;
name|clearPassword
operator|.
name|setVisible
argument_list|(
name|on
operator|&&
name|id
operator|.
name|getPassword
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

