begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Style
operator|.
name|Unit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|net
operator|.
name|codemirror
operator|.
name|lib
operator|.
name|CodeMirror
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * LineWidget attached to a CodeMirror container.  *  * When a comment is placed on a line a CommentWidget is created on both sides.  * The group tracks all comment boxes on that same line, and also includes an  * empty padding element to keep subsequent lines vertically aligned.  */
end_comment

begin_class
DECL|class|SideBySideCommentGroup
class|class
name|SideBySideCommentGroup
extends|extends
name|CommentGroup
implements|implements
name|Comparable
argument_list|<
name|SideBySideCommentGroup
argument_list|>
block|{
DECL|method|pair (SideBySideCommentGroup a, SideBySideCommentGroup b)
specifier|static
name|void
name|pair
parameter_list|(
name|SideBySideCommentGroup
name|a
parameter_list|,
name|SideBySideCommentGroup
name|b
parameter_list|)
block|{
name|a
operator|.
name|peers
operator|.
name|add
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|b
operator|.
name|peers
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
DECL|field|padding
specifier|private
specifier|final
name|Element
name|padding
decl_stmt|;
DECL|field|peers
specifier|private
specifier|final
name|PriorityQueue
argument_list|<
name|SideBySideCommentGroup
argument_list|>
name|peers
decl_stmt|;
DECL|method|SideBySideCommentGroup (SideBySideCommentManager manager, CodeMirror cm, DisplaySide side, int line)
name|SideBySideCommentGroup
parameter_list|(
name|SideBySideCommentManager
name|manager
parameter_list|,
name|CodeMirror
name|cm
parameter_list|,
name|DisplaySide
name|side
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|super
argument_list|(
name|manager
argument_list|,
name|cm
argument_list|,
name|side
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|padding
operator|=
name|DOM
operator|.
name|createDiv
argument_list|()
expr_stmt|;
name|padding
operator|.
name|setClassName
argument_list|(
name|SideBySideTable
operator|.
name|style
operator|.
name|padding
argument_list|()
argument_list|)
expr_stmt|;
name|SideBySideChunkManager
operator|.
name|focusOnClick
argument_list|(
name|padding
argument_list|,
name|cm
operator|.
name|side
argument_list|()
argument_list|)
expr_stmt|;
name|getElement
argument_list|()
operator|.
name|appendChild
argument_list|(
name|padding
argument_list|)
expr_stmt|;
name|peers
operator|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getPeer ()
name|SideBySideCommentGroup
name|getPeer
parameter_list|()
block|{
return|return
name|peers
operator|.
name|peek
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|remove (DraftBox box)
name|void
name|remove
parameter_list|(
name|DraftBox
name|box
parameter_list|)
block|{
name|super
operator|.
name|remove
argument_list|(
name|box
argument_list|)
expr_stmt|;
if|if
condition|(
name|getBoxCount
argument_list|()
operator|==
literal|0
operator|&&
name|peers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|peers
operator|.
name|peek
argument_list|()
operator|.
name|peers
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|SideBySideCommentGroup
name|peer
init|=
name|peers
operator|.
name|peek
argument_list|()
decl_stmt|;
name|peer
operator|.
name|peers
operator|.
name|remove
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|detach
argument_list|()
expr_stmt|;
if|if
condition|(
name|peer
operator|.
name|getBoxCount
argument_list|()
operator|==
literal|0
operator|&&
name|peer
operator|.
name|peers
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|peer
operator|.
name|peers
operator|.
name|peek
argument_list|()
operator|.
name|getBoxCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|peer
operator|.
name|detach
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|peer
operator|.
name|resize
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|resize
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|init (DiffTable parent)
name|void
name|init
parameter_list|(
name|DiffTable
name|parent
parameter_list|)
block|{
if|if
condition|(
name|getLineWidget
argument_list|()
operator|==
literal|null
condition|)
block|{
name|attach
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CommentGroup
name|peer
range|:
name|peers
control|)
block|{
if|if
condition|(
name|peer
operator|.
name|getLineWidget
argument_list|()
operator|==
literal|null
condition|)
block|{
name|peer
operator|.
name|attach
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|handleRedraw ()
name|void
name|handleRedraw
parameter_list|()
block|{
name|getLineWidget
argument_list|()
operator|.
name|onRedraw
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|canComputeHeight
argument_list|()
operator|&&
name|peers
operator|.
name|peek
argument_list|()
operator|.
name|canComputeHeight
argument_list|()
condition|)
block|{
if|if
condition|(
name|getResizeTimer
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getResizeTimer
argument_list|()
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|setResizeTimer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|adjustPadding
argument_list|(
name|SideBySideCommentGroup
operator|.
name|this
argument_list|,
name|peers
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|getResizeTimer
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setResizeTimer
argument_list|(
operator|new
name|Timer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|canComputeHeight
argument_list|()
operator|&&
name|peers
operator|.
name|peek
argument_list|()
operator|.
name|canComputeHeight
argument_list|()
condition|)
block|{
name|cancel
argument_list|()
expr_stmt|;
name|setResizeTimer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|adjustPadding
argument_list|(
name|SideBySideCommentGroup
operator|.
name|this
argument_list|,
name|peers
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|getResizeTimer
argument_list|()
operator|.
name|scheduleRepeating
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resize ()
name|void
name|resize
parameter_list|()
block|{
if|if
condition|(
name|getLineWidget
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|adjustPadding
argument_list|(
name|this
argument_list|,
name|peers
operator|.
name|peek
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|computeHeight ()
specifier|private
name|int
name|computeHeight
parameter_list|()
block|{
if|if
condition|(
name|getComments
argument_list|()
operator|.
name|isVisible
argument_list|()
condition|)
block|{
comment|// Include margin-bottom: 5px from CSS class.
return|return
name|getComments
argument_list|()
operator|.
name|getOffsetHeight
argument_list|()
operator|+
literal|5
return|;
block|}
return|return
literal|0
return|;
block|}
DECL|method|adjustPadding (SideBySideCommentGroup a, SideBySideCommentGroup b)
specifier|private
specifier|static
name|void
name|adjustPadding
parameter_list|(
name|SideBySideCommentGroup
name|a
parameter_list|,
name|SideBySideCommentGroup
name|b
parameter_list|)
block|{
name|int
name|apx
init|=
name|a
operator|.
name|computeHeight
argument_list|()
decl_stmt|;
name|int
name|bpx
init|=
name|b
operator|.
name|computeHeight
argument_list|()
decl_stmt|;
for|for
control|(
name|SideBySideCommentGroup
name|otherPeer
range|:
name|a
operator|.
name|peers
control|)
block|{
if|if
condition|(
name|otherPeer
operator|!=
name|b
condition|)
block|{
name|bpx
operator|+=
name|otherPeer
operator|.
name|computeHeight
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|SideBySideCommentGroup
name|otherPeer
range|:
name|b
operator|.
name|peers
control|)
block|{
if|if
condition|(
name|otherPeer
operator|!=
name|a
condition|)
block|{
name|apx
operator|+=
name|otherPeer
operator|.
name|computeHeight
argument_list|()
expr_stmt|;
block|}
block|}
name|int
name|h
init|=
name|Math
operator|.
name|max
argument_list|(
name|apx
argument_list|,
name|bpx
argument_list|)
decl_stmt|;
name|a
operator|.
name|padding
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|h
operator|-
name|apx
argument_list|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|b
operator|.
name|padding
operator|.
name|getStyle
argument_list|()
operator|.
name|setHeight
argument_list|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|h
operator|-
name|bpx
argument_list|)
argument_list|,
name|Unit
operator|.
name|PX
argument_list|)
expr_stmt|;
name|a
operator|.
name|getLineWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
name|b
operator|.
name|getLineWidget
argument_list|()
operator|.
name|changed
argument_list|()
expr_stmt|;
name|a
operator|.
name|updateSelection
argument_list|()
expr_stmt|;
name|b
operator|.
name|updateSelection
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compareTo (SideBySideCommentGroup o)
specifier|public
name|int
name|compareTo
parameter_list|(
name|SideBySideCommentGroup
name|o
parameter_list|)
block|{
if|if
condition|(
name|side
operator|==
name|o
operator|.
name|side
condition|)
block|{
return|return
name|line
operator|-
name|o
operator|.
name|line
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot compare SideBySideCommentGroup with different sides"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

