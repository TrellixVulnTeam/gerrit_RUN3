begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|CommentInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|info
operator|.
name|ChangeInfo
operator|.
name|MessageInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NativeMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|CommentLinkProcessor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JsArray
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|History
class|class
name|History
extends|extends
name|FlowPanel
block|{
DECL|field|clp
specifier|private
name|CommentLinkProcessor
name|clp
decl_stmt|;
DECL|field|replyAction
specifier|private
name|ReplyAction
name|replyAction
decl_stmt|;
DECL|field|changeId
specifier|private
name|Change
operator|.
name|Id
name|changeId
decl_stmt|;
DECL|field|project
specifier|private
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|byAuthor
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|byAuthor
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|set (CommentLinkProcessor clp, ReplyAction ra, Change.Id id, ChangeInfo info)
name|void
name|set
parameter_list|(
name|CommentLinkProcessor
name|clp
parameter_list|,
name|ReplyAction
name|ra
parameter_list|,
name|Change
operator|.
name|Id
name|id
parameter_list|,
name|ChangeInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|clp
operator|=
name|clp
expr_stmt|;
name|this
operator|.
name|replyAction
operator|=
name|ra
expr_stmt|;
name|this
operator|.
name|changeId
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|info
operator|.
name|projectNameKey
argument_list|()
expr_stmt|;
name|JsArray
argument_list|<
name|MessageInfo
argument_list|>
name|messages
init|=
name|info
operator|.
name|messages
argument_list|()
decl_stmt|;
if|if
condition|(
name|messages
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MessageInfo
name|msg
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|messages
argument_list|)
control|)
block|{
name|Message
name|ui
init|=
operator|new
name|Message
argument_list|(
name|this
argument_list|,
name|msg
argument_list|)
decl_stmt|;
name|ui
operator|.
name|addComments
argument_list|(
name|comments
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|ui
argument_list|)
expr_stmt|;
block|}
name|autoOpen
argument_list|(
name|ChangeScreen
operator|.
name|myLastReply
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|autoOpen (Timestamp lastReply)
specifier|private
name|void
name|autoOpen
parameter_list|(
name|Timestamp
name|lastReply
parameter_list|)
block|{
if|if
condition|(
name|lastReply
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|Widget
name|child
range|:
name|getChildren
argument_list|()
control|)
block|{
operator|(
operator|(
name|Message
operator|)
name|child
operator|)
operator|.
name|autoOpen
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
name|getChildren
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Message
name|ui
init|=
operator|(
name|Message
operator|)
name|getChildren
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|MessageInfo
name|msg
init|=
name|ui
operator|.
name|getMessageInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastReply
operator|.
name|compareTo
argument_list|(
name|msg
operator|.
name|date
argument_list|()
argument_list|)
operator|<
literal|0
condition|)
block|{
name|ui
operator|.
name|autoOpen
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
block|}
DECL|method|getCommentLinkProcessor ()
name|CommentLinkProcessor
name|getCommentLinkProcessor
parameter_list|()
block|{
return|return
name|clp
return|;
block|}
DECL|method|getChangeId ()
name|Change
operator|.
name|Id
name|getChangeId
parameter_list|()
block|{
return|return
name|changeId
return|;
block|}
DECL|method|getProject ()
name|Project
operator|.
name|NameKey
name|getProject
parameter_list|()
block|{
return|return
name|project
return|;
block|}
DECL|method|replyTo (MessageInfo info)
name|void
name|replyTo
parameter_list|(
name|MessageInfo
name|info
parameter_list|)
block|{
name|replyAction
operator|.
name|onReply
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
DECL|method|addComments (NativeMap<JsArray<CommentInfo>> map)
name|void
name|addComments
parameter_list|(
name|NativeMap
argument_list|<
name|JsArray
argument_list|<
name|CommentInfo
argument_list|>
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|CommentInfo
name|c
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|)
control|)
block|{
name|c
operator|.
name|path
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|.
name|author
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|authorId
init|=
name|c
operator|.
name|author
argument_list|()
operator|.
name|_accountId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|l
init|=
name|byAuthor
operator|.
name|get
argument_list|(
name|authorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|byAuthor
operator|.
name|put
argument_list|(
name|authorId
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|comments (MessageInfo msg)
specifier|private
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|comments
parameter_list|(
name|MessageInfo
name|msg
parameter_list|)
block|{
if|if
condition|(
name|msg
operator|.
name|author
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|int
name|authorId
init|=
name|msg
operator|.
name|author
argument_list|()
operator|.
name|_accountId
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|list
init|=
name|byAuthor
operator|.
name|get
argument_list|(
name|authorId
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Timestamp
name|when
init|=
name|msg
operator|.
name|date
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|match
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|CommentInfo
argument_list|>
name|other
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CommentInfo
name|c
range|:
name|list
control|)
block|{
if|if
condition|(
name|c
operator|.
name|updated
argument_list|()
operator|.
name|compareTo
argument_list|(
name|when
argument_list|)
operator|<=
literal|0
condition|)
block|{
name|match
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|other
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|match
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|byAuthor
operator|.
name|remove
argument_list|(
name|authorId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|byAuthor
operator|.
name|put
argument_list|(
name|authorId
argument_list|,
name|other
argument_list|)
expr_stmt|;
block|}
return|return
name|match
return|;
block|}
block|}
end_class

end_unit

