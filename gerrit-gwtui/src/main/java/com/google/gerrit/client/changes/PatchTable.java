begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Dispatcher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ListenableAccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|NavigationTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|PatchLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|PatchSetDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|ChangeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Patch
operator|.
name|PatchType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|Scheduler
operator|.
name|RepeatingCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyPressEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|globalkey
operator|.
name|client
operator|.
name|KeyCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|progress
operator|.
name|client
operator|.
name|ProgressBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|PatchTable
specifier|public
class|class
name|PatchTable
extends|extends
name|Composite
block|{
DECL|interface|PatchValidator
specifier|public
interface|interface
name|PatchValidator
block|{
comment|/**      * Returns true if patch is valid      *      * @param patch      * @return      */
DECL|method|isValid (Patch patch)
name|boolean
name|isValid
parameter_list|(
name|Patch
name|patch
parameter_list|)
function_decl|;
block|}
DECL|field|PREFERENCE_VALIDATOR
specifier|public
specifier|final
name|PatchValidator
name|PREFERENCE_VALIDATOR
init|=
operator|new
name|PatchValidator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Patch
name|patch
parameter_list|)
block|{
return|return
operator|!
operator|(
operator|(
name|listenablePrefs
operator|.
name|get
argument_list|()
operator|.
name|isSkipDeleted
argument_list|()
operator|&&
name|patch
operator|.
name|getChangeType
argument_list|()
operator|.
name|equals
argument_list|(
name|ChangeType
operator|.
name|DELETED
argument_list|)
operator|)
operator|||
operator|(
name|listenablePrefs
operator|.
name|get
argument_list|()
operator|.
name|isSkipUncommented
argument_list|()
operator|&&
name|patch
operator|.
name|getCommentCount
argument_list|()
operator|==
literal|0
operator|)
operator|)
return|;
block|}
block|}
decl_stmt|;
DECL|field|myBody
specifier|private
specifier|final
name|FlowPanel
name|myBody
decl_stmt|;
DECL|field|detail
specifier|private
name|PatchSetDetail
name|detail
decl_stmt|;
DECL|field|onLoadCommand
specifier|private
name|Command
name|onLoadCommand
decl_stmt|;
DECL|field|myTable
specifier|private
name|MyTable
name|myTable
decl_stmt|;
DECL|field|savePointerId
specifier|private
name|String
name|savePointerId
decl_stmt|;
DECL|field|base
specifier|private
name|PatchSet
operator|.
name|Id
name|base
decl_stmt|;
DECL|field|patchList
specifier|private
name|List
argument_list|<
name|Patch
argument_list|>
name|patchList
decl_stmt|;
DECL|field|patchMap
specifier|private
name|Map
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Integer
argument_list|>
name|patchMap
decl_stmt|;
DECL|field|listenablePrefs
specifier|private
name|ListenableAccountDiffPreference
name|listenablePrefs
decl_stmt|;
DECL|field|clickHandlers
specifier|private
name|List
argument_list|<
name|ClickHandler
argument_list|>
name|clickHandlers
decl_stmt|;
DECL|field|active
specifier|private
name|boolean
name|active
decl_stmt|;
DECL|field|registerKeys
specifier|private
name|boolean
name|registerKeys
decl_stmt|;
DECL|method|PatchTable (ListenableAccountDiffPreference prefs)
specifier|public
name|PatchTable
parameter_list|(
name|ListenableAccountDiffPreference
name|prefs
parameter_list|)
block|{
name|listenablePrefs
operator|=
name|prefs
expr_stmt|;
name|myBody
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|initWidget
argument_list|(
name|myBody
argument_list|)
expr_stmt|;
block|}
DECL|method|PatchTable ()
specifier|public
name|PatchTable
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|ListenableAccountDiffPreference
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|indexOf (Patch.Key patch)
specifier|public
name|int
name|indexOf
parameter_list|(
name|Patch
operator|.
name|Key
name|patch
parameter_list|)
block|{
name|Integer
name|i
init|=
name|patchMap
argument_list|()
operator|.
name|get
argument_list|(
name|patch
argument_list|)
decl_stmt|;
return|return
name|i
operator|!=
literal|null
condition|?
name|i
else|:
operator|-
literal|1
return|;
block|}
DECL|method|patchMap ()
specifier|private
name|Map
argument_list|<
name|Key
argument_list|,
name|Integer
argument_list|>
name|patchMap
parameter_list|()
block|{
if|if
condition|(
name|patchMap
operator|==
literal|null
condition|)
block|{
name|patchMap
operator|=
operator|new
name|HashMap
argument_list|<
name|Patch
operator|.
name|Key
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patchList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|patchMap
operator|.
name|put
argument_list|(
name|patchList
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getKey
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|patchMap
return|;
block|}
DECL|method|display (PatchSet.Id base, PatchSetDetail detail)
specifier|public
name|void
name|display
parameter_list|(
name|PatchSet
operator|.
name|Id
name|base
parameter_list|,
name|PatchSetDetail
name|detail
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|detail
operator|=
name|detail
expr_stmt|;
name|this
operator|.
name|patchList
operator|=
name|detail
operator|.
name|getPatches
argument_list|()
expr_stmt|;
name|this
operator|.
name|patchMap
operator|=
literal|null
expr_stmt|;
name|myTable
operator|=
literal|null
expr_stmt|;
specifier|final
name|DisplayCommand
name|cmd
init|=
operator|new
name|DisplayCommand
argument_list|(
name|patchList
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|.
name|execute
argument_list|()
condition|)
block|{
name|cmd
operator|.
name|initMeter
argument_list|()
expr_stmt|;
name|Scheduler
operator|.
name|get
argument_list|()
operator|.
name|scheduleIncremental
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|.
name|showTable
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getBase ()
specifier|public
name|PatchSet
operator|.
name|Id
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
DECL|method|setSavePointerId (final String id)
specifier|public
name|void
name|setSavePointerId
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
name|savePointerId
operator|=
name|id
expr_stmt|;
block|}
DECL|method|isLoaded ()
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|myTable
operator|!=
literal|null
return|;
block|}
DECL|method|onTableLoaded (final Command cmd)
specifier|public
name|void
name|onTableLoaded
parameter_list|(
specifier|final
name|Command
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|onLoadCommand
operator|=
name|cmd
expr_stmt|;
block|}
block|}
DECL|method|addClickHandler (final ClickHandler clickHandler)
specifier|public
name|void
name|addClickHandler
parameter_list|(
specifier|final
name|ClickHandler
name|clickHandler
parameter_list|)
block|{
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|addClickHandler
argument_list|(
name|clickHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|clickHandlers
operator|==
literal|null
condition|)
block|{
name|clickHandlers
operator|=
operator|new
name|ArrayList
argument_list|<
name|ClickHandler
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|clickHandlers
operator|.
name|add
argument_list|(
name|clickHandler
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setRegisterKeys (final boolean on)
specifier|public
name|void
name|setRegisterKeys
parameter_list|(
specifier|final
name|boolean
name|on
parameter_list|)
block|{
name|registerKeys
operator|=
name|on
expr_stmt|;
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|setRegisterKeys
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|movePointerTo (final Patch.Key k)
specifier|public
name|void
name|movePointerTo
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|k
parameter_list|)
block|{
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|movePointerTo
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setActive (boolean active)
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
name|this
operator|.
name|active
operator|=
name|active
expr_stmt|;
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|setActive
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|notifyDraftDelta (final Patch.Key k, final int delta)
specifier|public
name|void
name|notifyDraftDelta
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|k
parameter_list|,
specifier|final
name|int
name|delta
parameter_list|)
block|{
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|notifyDraftDelta
argument_list|(
name|k
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setMyTable (MyTable table)
specifier|private
name|void
name|setMyTable
parameter_list|(
name|MyTable
name|table
parameter_list|)
block|{
name|myBody
operator|.
name|clear
argument_list|()
expr_stmt|;
name|myBody
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|myTable
operator|=
name|table
expr_stmt|;
if|if
condition|(
name|clickHandlers
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClickHandler
name|ch
range|:
name|clickHandlers
control|)
block|{
name|myTable
operator|.
name|addClickHandler
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
name|clickHandlers
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|active
condition|)
block|{
name|myTable
operator|.
name|setActive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|active
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|registerKeys
condition|)
block|{
name|myTable
operator|.
name|setRegisterKeys
argument_list|(
name|registerKeys
argument_list|)
expr_stmt|;
name|registerKeys
operator|=
literal|false
expr_stmt|;
block|}
name|myTable
operator|.
name|finishDisplay
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return a link to the previous file in this patch set, or null.    */
DECL|method|getPreviousPatchLink (int index, PatchScreen.Type patchType)
specifier|public
name|InlineHyperlink
name|getPreviousPatchLink
parameter_list|(
name|int
name|index
parameter_list|,
name|PatchScreen
operator|.
name|Type
name|patchType
parameter_list|)
block|{
name|int
name|previousPatchIndex
init|=
name|getPreviousPatch
argument_list|(
name|index
argument_list|,
name|PREFERENCE_VALIDATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousPatchIndex
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InlineHyperlink
name|link
init|=
name|createLink
argument_list|(
name|previousPatchIndex
argument_list|,
name|patchType
argument_list|,
name|SafeHtml
operator|.
name|asis
argument_list|(
name|Util
operator|.
name|C
operator|.
name|prevPatchLinkIcon
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|link
return|;
block|}
comment|/**    * @return a link to the next file in this patch set, or null.    */
DECL|method|getNextPatchLink (int index, PatchScreen.Type patchType)
specifier|public
name|InlineHyperlink
name|getNextPatchLink
parameter_list|(
name|int
name|index
parameter_list|,
name|PatchScreen
operator|.
name|Type
name|patchType
parameter_list|)
block|{
name|int
name|nextPatchIndex
init|=
name|getNextPatch
argument_list|(
name|index
argument_list|,
literal|false
argument_list|,
name|PREFERENCE_VALIDATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextPatchIndex
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|InlineHyperlink
name|link
init|=
name|createLink
argument_list|(
name|nextPatchIndex
argument_list|,
name|patchType
argument_list|,
literal|null
argument_list|,
name|SafeHtml
operator|.
name|asis
argument_list|(
name|Util
operator|.
name|C
operator|.
name|nextPatchLinkIcon
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|link
return|;
block|}
comment|/**    * @return a link to the the given patch.    * @param index The patch to link to    * @param patchType The type of patch display    * @param before A string to display at the beginning of the href text    * @param after A string to display at the end of the href text    */
DECL|method|createLink (int index, PatchScreen.Type patchType, SafeHtml before, SafeHtml after)
specifier|public
name|PatchLink
name|createLink
parameter_list|(
name|int
name|index
parameter_list|,
name|PatchScreen
operator|.
name|Type
name|patchType
parameter_list|,
name|SafeHtml
name|before
parameter_list|,
name|SafeHtml
name|after
parameter_list|)
block|{
name|Patch
name|patch
init|=
name|patchList
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|Key
name|thisKey
init|=
name|patch
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|PatchLink
name|link
decl_stmt|;
if|if
condition|(
name|patchType
operator|==
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
condition|)
block|{
name|link
operator|=
operator|new
name|PatchLink
operator|.
name|SideBySide
argument_list|(
literal|""
argument_list|,
name|base
argument_list|,
name|thisKey
argument_list|,
name|index
argument_list|,
name|detail
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|link
operator|=
operator|new
name|PatchLink
operator|.
name|Unified
argument_list|(
literal|""
argument_list|,
name|base
argument_list|,
name|thisKey
argument_list|,
name|index
argument_list|,
name|detail
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
name|SafeHtmlBuilder
name|text
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|getFileNameOnly
argument_list|(
name|patch
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|SafeHtml
operator|.
name|set
argument_list|(
name|link
argument_list|,
name|text
argument_list|)
expr_stmt|;
return|return
name|link
return|;
block|}
DECL|method|getFileNameOnly (Patch patch)
specifier|private
specifier|static
name|String
name|getFileNameOnly
parameter_list|(
name|Patch
name|patch
parameter_list|)
block|{
comment|// Note: use '/' here and not File.pathSeparator since git paths
comment|// are always separated by /
comment|//
name|String
name|fileName
init|=
name|getDisplayFileName
argument_list|(
name|patch
argument_list|)
decl_stmt|;
name|int
name|s
init|=
name|fileName
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|>=
literal|0
condition|)
block|{
name|fileName
operator|=
name|fileName
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|fileName
return|;
block|}
DECL|method|getDisplayFileName (Patch patch)
specifier|public
specifier|static
name|String
name|getDisplayFileName
parameter_list|(
name|Patch
name|patch
parameter_list|)
block|{
return|return
name|getDisplayFileName
argument_list|(
name|patch
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getDisplayFileName (Patch.Key patchKey)
specifier|public
specifier|static
name|String
name|getDisplayFileName
parameter_list|(
name|Patch
operator|.
name|Key
name|patchKey
parameter_list|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|patchKey
operator|.
name|get
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Util
operator|.
name|C
operator|.
name|commitMessage
argument_list|()
return|;
block|}
return|return
name|patchKey
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * Update the reviewed status for the given patch.    */
DECL|method|updateReviewedStatus (Patch.Key patchKey, boolean reviewed)
specifier|public
name|void
name|updateReviewedStatus
parameter_list|(
name|Patch
operator|.
name|Key
name|patchKey
parameter_list|,
name|boolean
name|reviewed
parameter_list|)
block|{
if|if
condition|(
name|myTable
operator|!=
literal|null
condition|)
block|{
name|myTable
operator|.
name|updateReviewedStatus
argument_list|(
name|patchKey
argument_list|,
name|reviewed
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPreferences ()
specifier|public
name|ListenableAccountDiffPreference
name|getPreferences
parameter_list|()
block|{
return|return
name|listenablePrefs
return|;
block|}
DECL|class|MyTable
specifier|private
class|class
name|MyTable
extends|extends
name|NavigationTable
argument_list|<
name|Patch
argument_list|>
block|{
DECL|field|C_PATH
specifier|private
specifier|static
specifier|final
name|int
name|C_PATH
init|=
literal|2
decl_stmt|;
DECL|field|C_DRAFT
specifier|private
specifier|static
specifier|final
name|int
name|C_DRAFT
init|=
literal|3
decl_stmt|;
DECL|field|C_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|C_SIZE
init|=
literal|4
decl_stmt|;
DECL|field|C_SIDEBYSIDE
specifier|private
specifier|static
specifier|final
name|int
name|C_SIDEBYSIDE
init|=
literal|5
decl_stmt|;
DECL|field|activeRow
specifier|private
name|int
name|activeRow
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|MyTable ()
name|MyTable
parameter_list|()
block|{
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|PrevKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'k'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTablePrev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|NextKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'j'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'o'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableOpenDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenKeyCommand
argument_list|(
literal|0
argument_list|,
name|KeyCodes
operator|.
name|KEY_ENTER
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableOpenDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|keysNavigation
operator|.
name|add
argument_list|(
operator|new
name|OpenUnifiedDiffKeyCommand
argument_list|(
literal|0
argument_list|,
literal|'O'
argument_list|,
name|Util
operator|.
name|C
operator|.
name|patchTableOpenUnifiedDiff
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
specifier|final
name|ClickEvent
name|event
parameter_list|)
block|{
specifier|final
name|Cell
name|cell
init|=
name|table
operator|.
name|getCellForEvent
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|cell
operator|!=
literal|null
operator|&&
name|cell
operator|.
name|getRowIndex
argument_list|()
operator|>
literal|0
condition|)
block|{
name|movePointerTo
argument_list|(
name|cell
operator|.
name|getRowIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|setSavePointerId
argument_list|(
name|PatchTable
operator|.
name|this
operator|.
name|savePointerId
argument_list|)
expr_stmt|;
block|}
DECL|method|addClickHandler (final ClickHandler clickHandler)
specifier|public
name|void
name|addClickHandler
parameter_list|(
specifier|final
name|ClickHandler
name|clickHandler
parameter_list|)
block|{
name|table
operator|.
name|addClickHandler
argument_list|(
name|clickHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|updateReviewedStatus (final Patch.Key patchKey, boolean reviewed)
name|void
name|updateReviewedStatus
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|patchKey
parameter_list|,
name|boolean
name|reviewed
parameter_list|)
block|{
name|int
name|idx
init|=
name|patchMap
argument_list|()
operator|.
name|get
argument_list|(
name|patchKey
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|idx
condition|)
block|{
name|Patch
name|patch
init|=
name|patchList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|patch
operator|.
name|isReviewedByCurrentUser
argument_list|()
operator|!=
name|reviewed
condition|)
block|{
name|int
name|row
init|=
name|idx
operator|+
literal|1
decl_stmt|;
name|int
name|col
init|=
name|C_SIDEBYSIDE
operator|+
literal|2
decl_stmt|;
if|if
condition|(
name|patch
operator|.
name|getPatchType
argument_list|()
operator|==
name|Patch
operator|.
name|PatchType
operator|.
name|BINARY
condition|)
block|{
name|col
operator|=
name|C_SIDEBYSIDE
operator|+
literal|3
expr_stmt|;
block|}
if|if
condition|(
name|reviewed
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
operator|new
name|Image
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|greenCheck
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|clearCell
argument_list|(
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
block|}
name|patch
operator|.
name|setReviewedByCurrentUser
argument_list|(
name|reviewed
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|notifyDraftDelta (final Patch.Key key, final int delta)
name|void
name|notifyDraftDelta
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|key
parameter_list|,
specifier|final
name|int
name|delta
parameter_list|)
block|{
name|int
name|idx
init|=
name|patchMap
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<=
name|idx
condition|)
block|{
name|Patch
name|p
init|=
name|patchList
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDraftCount
argument_list|(
name|p
operator|.
name|getDraftCount
argument_list|()
operator|+
name|delta
argument_list|)
expr_stmt|;
name|SafeHtmlBuilder
name|m
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
name|appendCommentCount
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|SafeHtml
operator|.
name|set
argument_list|(
name|table
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|C_DRAFT
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|resetHtml (final SafeHtml html)
specifier|public
name|void
name|resetHtml
parameter_list|(
specifier|final
name|SafeHtml
name|html
parameter_list|)
block|{
name|super
operator|.
name|resetHtml
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|movePointerTo (Object oldId)
specifier|public
name|void
name|movePointerTo
parameter_list|(
name|Object
name|oldId
parameter_list|)
block|{
name|super
operator|.
name|movePointerTo
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
block|}
comment|/** Activates / Deactivates the key navigation and the highlighting of the current row for this table */
DECL|method|setActive (boolean active)
specifier|public
name|void
name|setActive
parameter_list|(
name|boolean
name|active
parameter_list|)
block|{
if|if
condition|(
name|active
condition|)
block|{
if|if
condition|(
name|activeRow
operator|>
literal|0
operator|&&
name|getCurrentRow
argument_list|()
operator|!=
name|activeRow
condition|)
block|{
name|super
operator|.
name|movePointerTo
argument_list|(
name|activeRow
argument_list|)
expr_stmt|;
name|activeRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|getCurrentRow
argument_list|()
operator|>
literal|0
condition|)
block|{
name|activeRow
operator|=
name|getCurrentRow
argument_list|()
expr_stmt|;
name|super
operator|.
name|movePointerTo
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|setRegisterKeys
argument_list|(
name|active
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeRow (int row)
name|void
name|initializeRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Patch
name|patch
init|=
name|PatchTable
operator|.
name|this
operator|.
name|patchList
operator|.
name|get
argument_list|(
name|row
operator|-
literal|1
argument_list|)
decl_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|patch
argument_list|)
expr_stmt|;
name|Widget
name|nameCol
decl_stmt|;
name|nameCol
operator|=
operator|new
name|PatchLink
operator|.
name|SideBySide
argument_list|(
name|getDisplayFileName
argument_list|(
name|patch
argument_list|)
argument_list|,
name|base
argument_list|,
name|patch
operator|.
name|getKey
argument_list|()
argument_list|,
name|row
operator|-
literal|1
argument_list|,
name|detail
argument_list|,
name|PatchTable
operator|.
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|patch
operator|.
name|getSourceFileName
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|text
decl_stmt|;
if|if
condition|(
name|patch
operator|.
name|getChangeType
argument_list|()
operator|==
name|Patch
operator|.
name|ChangeType
operator|.
name|RENAMED
condition|)
block|{
name|text
operator|=
name|Util
operator|.
name|M
operator|.
name|renamedFrom
argument_list|(
name|patch
operator|.
name|getSourceFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|patch
operator|.
name|getChangeType
argument_list|()
operator|==
name|Patch
operator|.
name|ChangeType
operator|.
name|COPIED
condition|)
block|{
name|text
operator|=
name|Util
operator|.
name|M
operator|.
name|copiedFrom
argument_list|(
name|patch
operator|.
name|getSourceFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|text
operator|=
name|Util
operator|.
name|M
operator|.
name|otherFrom
argument_list|(
name|patch
operator|.
name|getSourceFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Label
name|line
init|=
operator|new
name|Label
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|line
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|sourceFilePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|cell
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|cell
operator|.
name|add
argument_list|(
name|nameCol
argument_list|)
expr_stmt|;
name|cell
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|nameCol
operator|=
name|cell
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_PATH
argument_list|,
name|nameCol
argument_list|)
expr_stmt|;
name|int
name|C_UNIFIED
init|=
name|C_SIDEBYSIDE
operator|+
literal|1
decl_stmt|;
name|PatchLink
name|sideBySide
init|=
operator|new
name|PatchLink
operator|.
name|SideBySide
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableDiffSideBySide
argument_list|()
argument_list|,
name|base
argument_list|,
name|patch
operator|.
name|getKey
argument_list|()
argument_list|,
name|row
operator|-
literal|1
argument_list|,
name|detail
argument_list|,
name|PatchTable
operator|.
name|this
argument_list|)
decl_stmt|;
name|sideBySide
operator|.
name|setStyleName
argument_list|(
literal|"gwt-Anchor"
argument_list|)
expr_stmt|;
name|PatchLink
name|unified
init|=
operator|new
name|PatchLink
operator|.
name|Unified
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableDiffUnified
argument_list|()
argument_list|,
name|base
argument_list|,
name|patch
operator|.
name|getKey
argument_list|()
argument_list|,
name|row
operator|-
literal|1
argument_list|,
name|detail
argument_list|,
name|PatchTable
operator|.
name|this
argument_list|)
decl_stmt|;
name|unified
operator|.
name|setStyleName
argument_list|(
literal|"gwt-Anchor"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_SIDEBYSIDE
argument_list|,
name|sideBySide
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_UNIFIED
argument_list|,
name|unified
argument_list|)
expr_stmt|;
block|}
DECL|method|initializeLastRow (int row)
name|void
name|initializeLastRow
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|Anchor
name|sideBySide
init|=
operator|new
name|Anchor
argument_list|(
name|Util
operator|.
name|C
operator|.
name|diffAllSideBySide
argument_list|()
argument_list|)
decl_stmt|;
name|sideBySide
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Patch
name|p
range|:
name|detail
operator|.
name|getPatches
argument_list|()
control|)
block|{
name|openWindow
argument_list|(
name|Dispatcher
operator|.
name|toPatchSideBySide
argument_list|(
name|base
argument_list|,
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_SIDEBYSIDE
operator|-
literal|2
argument_list|,
name|sideBySide
argument_list|)
expr_stmt|;
name|int
name|C_UNIFIED
init|=
name|C_SIDEBYSIDE
operator|-
literal|2
operator|+
literal|1
decl_stmt|;
name|Anchor
name|unified
init|=
operator|new
name|Anchor
argument_list|(
name|Util
operator|.
name|C
operator|.
name|diffAllUnified
argument_list|()
argument_list|)
decl_stmt|;
name|unified
operator|.
name|addClickHandler
argument_list|(
operator|new
name|ClickHandler
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
for|for
control|(
name|Patch
name|p
range|:
name|detail
operator|.
name|getPatches
argument_list|()
control|)
block|{
name|openWindow
argument_list|(
name|Dispatcher
operator|.
name|toPatchUnified
argument_list|(
name|base
argument_list|,
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
block|}
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_UNIFIED
argument_list|,
name|unified
argument_list|)
expr_stmt|;
block|}
DECL|method|openWindow (String token)
specifier|private
name|void
name|openWindow
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|String
name|url
init|=
name|Window
operator|.
name|Location
operator|.
name|getPath
argument_list|()
operator|+
literal|"#"
operator|+
name|token
decl_stmt|;
name|Window
operator|.
name|open
argument_list|(
name|url
argument_list|,
literal|"_blank"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|appendHeader (final SafeHtmlBuilder m)
name|void
name|appendHeader
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
comment|// Cursor
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|leftMostCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// Mode
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// "File path"
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// "Comments"
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnComments
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// "Size"
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnSize
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// "Diff"
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|patchTableColumnDiff
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// "Reviewed"
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataHeader
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|C
operator|.
name|reviewed
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|appendRow (final SafeHtmlBuilder m, final Patch p, final boolean isReverseDiff)
name|void
name|appendRow
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Patch
name|p
parameter_list|,
specifier|final
name|boolean
name|isReverseDiff
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|leftMostCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|changeTypeCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReverseDiff
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchCellReverseDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getFileName
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m
operator|.
name|append
argument_list|(
name|p
operator|.
name|getChangeType
argument_list|()
operator|.
name|getCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|filePathCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|commentCell
argument_list|()
argument_list|)
expr_stmt|;
name|appendCommentCount
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchSizeCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReverseDiff
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchCellReverseDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|appendSize
argument_list|(
name|m
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// Diff
name|openlink
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|openlink
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
comment|// Green check mark if the user is logged in and they reviewed that file
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|.
name|isReviewedByCurrentUser
argument_list|()
condition|)
block|{
name|m
operator|.
name|openDiv
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|greenCheckClass
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeSelf
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
block|}
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|appendLastRow (final SafeHtmlBuilder m, int ins, int dels, final boolean isReverseDiff)
name|void
name|appendLastRow
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
name|int
name|ins
parameter_list|,
name|int
name|dels
parameter_list|,
specifier|final
name|boolean
name|isReverseDiff
parameter_list|)
block|{
name|m
operator|.
name|openTr
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|iconCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|noborder
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
name|C_SIZE
operator|-
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchSizeCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|leftMostCell
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReverseDiff
condition|)
block|{
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|patchCellReverseDiff
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableSize_Modify
argument_list|(
name|ins
argument_list|,
name|dels
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|openlink
argument_list|(
name|m
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|openlink
argument_list|(
name|m
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|closeTr
argument_list|()
expr_stmt|;
block|}
DECL|method|appendCommentCount (final SafeHtmlBuilder m, final Patch p)
name|void
name|appendCommentCount
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Patch
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|getCommentCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableComments
argument_list|(
name|p
operator|.
name|getCommentCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
operator|.
name|getDraftCount
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|p
operator|.
name|getCommentCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|m
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|openSpan
argument_list|()
expr_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|drafts
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableDrafts
argument_list|(
name|p
operator|.
name|getDraftCount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|closeSpan
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|appendSize (final SafeHtmlBuilder m, final Patch p)
name|void
name|appendSize
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|Patch
name|p
parameter_list|)
block|{
if|if
condition|(
name|Patch
operator|.
name|COMMIT_MSG
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getFileName
argument_list|()
argument_list|)
condition|)
block|{
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|p
operator|.
name|getPatchType
argument_list|()
operator|==
name|PatchType
operator|.
name|UNIFIED
condition|)
block|{
name|int
name|ins
init|=
name|p
operator|.
name|getInsertions
argument_list|()
decl_stmt|;
name|int
name|dels
init|=
name|p
operator|.
name|getDeletions
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|p
operator|.
name|getChangeType
argument_list|()
condition|)
block|{
case|case
name|ADDED
case|:
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableSize_Lines
argument_list|(
name|ins
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DELETED
case|:
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
break|break;
case|case
name|MODIFIED
case|:
case|case
name|COPIED
case|:
case|case
name|RENAMED
case|:
name|m
operator|.
name|append
argument_list|(
name|Util
operator|.
name|M
operator|.
name|patchTableSize_Modify
argument_list|(
name|ins
argument_list|,
name|dels
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|REWRITE
case|:
break|break;
block|}
block|}
else|else
block|{
name|m
operator|.
name|nbsp
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|openlink (final SafeHtmlBuilder m, final int colspan)
specifier|private
name|void
name|openlink
parameter_list|(
specifier|final
name|SafeHtmlBuilder
name|m
parameter_list|,
specifier|final
name|int
name|colspan
parameter_list|)
block|{
name|m
operator|.
name|openTd
argument_list|()
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|dataCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|addStyleName
argument_list|(
name|Gerrit
operator|.
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|diffLinkCell
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setAttribute
argument_list|(
literal|"colspan"
argument_list|,
name|colspan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final Patch item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|Patch
name|item
parameter_list|)
block|{
return|return
name|item
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|onOpenRow (final int row)
specifier|protected
name|void
name|onOpenRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|Widget
name|link
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|C_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|FlowPanel
condition|)
block|{
name|link
operator|=
operator|(
operator|(
name|FlowPanel
operator|)
name|link
operator|)
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|link
operator|instanceof
name|InlineHyperlink
condition|)
block|{
operator|(
operator|(
name|InlineHyperlink
operator|)
name|link
operator|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|OpenUnifiedDiffKeyCommand
specifier|private
specifier|final
class|class
name|OpenUnifiedDiffKeyCommand
extends|extends
name|KeyCommand
block|{
DECL|method|OpenUnifiedDiffKeyCommand (int mask, char key, String help)
specifier|public
name|OpenUnifiedDiffKeyCommand
parameter_list|(
name|int
name|mask
parameter_list|,
name|char
name|key
parameter_list|,
name|String
name|help
parameter_list|)
block|{
name|super
argument_list|(
name|mask
argument_list|,
name|key
argument_list|,
name|help
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onKeyPress (KeyPressEvent event)
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|KeyPressEvent
name|event
parameter_list|)
block|{
name|Widget
name|link
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|,
name|C_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|FlowPanel
condition|)
block|{
name|link
operator|=
operator|(
operator|(
name|FlowPanel
operator|)
name|link
operator|)
operator|.
name|getWidget
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|link
operator|instanceof
name|PatchLink
operator|.
name|Unified
condition|)
block|{
operator|(
operator|(
name|InlineHyperlink
operator|)
name|link
operator|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|link
operator|=
name|table
operator|.
name|getWidget
argument_list|(
name|getCurrentRow
argument_list|()
argument_list|,
name|C_SIDEBYSIDE
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|link
operator|instanceof
name|PatchLink
operator|.
name|Unified
condition|)
block|{
operator|(
operator|(
name|InlineHyperlink
operator|)
name|link
operator|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
DECL|class|DisplayCommand
specifier|private
specifier|final
class|class
name|DisplayCommand
implements|implements
name|RepeatingCommand
block|{
DECL|field|table
specifier|private
specifier|final
name|MyTable
name|table
decl_stmt|;
DECL|field|list
specifier|private
specifier|final
name|List
argument_list|<
name|Patch
argument_list|>
name|list
decl_stmt|;
DECL|field|attached
specifier|private
name|boolean
name|attached
decl_stmt|;
DECL|field|nc
specifier|private
name|SafeHtmlBuilder
name|nc
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
decl_stmt|;
DECL|field|stage
specifier|private
name|int
name|stage
init|=
literal|0
decl_stmt|;
DECL|field|row
specifier|private
name|int
name|row
decl_stmt|;
DECL|field|start
specifier|private
name|double
name|start
decl_stmt|;
DECL|field|meter
specifier|private
name|ProgressBar
name|meter
decl_stmt|;
DECL|field|insertions
specifier|private
name|int
name|insertions
decl_stmt|;
DECL|field|deletions
specifier|private
name|int
name|deletions
decl_stmt|;
DECL|field|psIdToCompareWith
specifier|private
specifier|final
name|PatchSet
operator|.
name|Id
name|psIdToCompareWith
decl_stmt|;
DECL|method|DisplayCommand (final List<Patch> list, final PatchSet.Id psIdToCompareWith)
specifier|private
name|DisplayCommand
parameter_list|(
specifier|final
name|List
argument_list|<
name|Patch
argument_list|>
name|list
parameter_list|,
specifier|final
name|PatchSet
operator|.
name|Id
name|psIdToCompareWith
parameter_list|)
block|{
name|this
operator|.
name|table
operator|=
operator|new
name|MyTable
argument_list|()
expr_stmt|;
name|this
operator|.
name|list
operator|=
name|list
expr_stmt|;
name|this
operator|.
name|psIdToCompareWith
operator|=
name|psIdToCompareWith
expr_stmt|;
block|}
comment|/**      * Add the files contained in the list of patches to the table, one per row.      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"fallthrough"
argument_list|)
DECL|method|execute ()
specifier|public
name|boolean
name|execute
parameter_list|()
block|{
specifier|final
name|boolean
name|attachedNow
init|=
name|isAttached
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|attached
operator|&&
name|attachedNow
condition|)
block|{
comment|// Remember that we have been attached at least once. If
comment|// later we find we aren't attached we should stop running.
comment|//
name|attached
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|attached
operator|&&
operator|!
name|attachedNow
condition|)
block|{
comment|// If the user navigated away, we aren't in the DOM anymore.
comment|// Don't continue to render.
comment|//
return|return
literal|false
return|;
block|}
name|boolean
name|isReverseDiff
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|psIdToCompareWith
operator|!=
literal|null
operator|&&
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getKey
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
operator|<
name|psIdToCompareWith
operator|.
name|get
argument_list|()
condition|)
block|{
name|isReverseDiff
operator|=
literal|true
expr_stmt|;
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|stage
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|row
operator|==
literal|0
condition|)
block|{
name|table
operator|.
name|appendHeader
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|table
operator|.
name|appendRow
argument_list|(
name|nc
argument_list|,
name|list
operator|.
name|get
argument_list|(
name|row
operator|++
argument_list|)
argument_list|,
name|isReverseDiff
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|row
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|Patch
name|p
init|=
name|list
operator|.
name|get
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|insertions
operator|+=
name|p
operator|.
name|getInsertions
argument_list|()
expr_stmt|;
name|deletions
operator|+=
name|p
operator|.
name|getDeletions
argument_list|()
expr_stmt|;
name|table
operator|.
name|appendRow
argument_list|(
name|nc
argument_list|,
name|p
argument_list|,
name|isReverseDiff
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|++
name|row
operator|%
literal|10
operator|)
operator|==
literal|0
operator|&&
name|longRunning
argument_list|()
condition|)
block|{
name|updateMeter
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|table
operator|.
name|appendLastRow
argument_list|(
name|nc
argument_list|,
name|insertions
argument_list|,
name|deletions
argument_list|,
name|isReverseDiff
argument_list|)
expr_stmt|;
name|table
operator|.
name|resetHtml
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|table
operator|.
name|initializeLastRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nc
operator|=
literal|null
expr_stmt|;
name|stage
operator|=
literal|1
expr_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
case|case
literal|1
case|:
while|while
condition|(
name|row
operator|<
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|table
operator|.
name|initializeRow
argument_list|(
name|row
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|++
name|row
operator|%
literal|50
operator|)
operator|==
literal|0
operator|&&
name|longRunning
argument_list|()
condition|)
block|{
name|updateMeter
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|updateMeter
argument_list|()
expr_stmt|;
name|showTable
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
DECL|method|showTable ()
name|void
name|showTable
parameter_list|()
block|{
name|setMyTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
if|if
condition|(
name|PatchTable
operator|.
name|this
operator|.
name|onLoadCommand
operator|!=
literal|null
condition|)
block|{
name|PatchTable
operator|.
name|this
operator|.
name|onLoadCommand
operator|.
name|execute
argument_list|()
expr_stmt|;
name|PatchTable
operator|.
name|this
operator|.
name|onLoadCommand
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|initMeter ()
name|void
name|initMeter
parameter_list|()
block|{
if|if
condition|(
name|meter
operator|==
literal|null
condition|)
block|{
name|meter
operator|=
operator|new
name|ProgressBar
argument_list|(
name|Util
operator|.
name|M
operator|.
name|loadingPatchSet
argument_list|(
name|detail
operator|.
name|getPatchSet
argument_list|()
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PatchTable
operator|.
name|this
operator|.
name|myBody
operator|.
name|clear
argument_list|()
expr_stmt|;
name|PatchTable
operator|.
name|this
operator|.
name|myBody
operator|.
name|add
argument_list|(
name|meter
argument_list|)
expr_stmt|;
block|}
name|updateMeter
argument_list|()
expr_stmt|;
block|}
DECL|method|updateMeter ()
name|void
name|updateMeter
parameter_list|()
block|{
if|if
condition|(
name|meter
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|n
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
name|meter
operator|.
name|setValue
argument_list|(
operator|(
operator|(
literal|100
operator|*
operator|(
name|stage
operator|*
name|n
operator|+
name|row
operator|)
operator|)
operator|/
operator|(
literal|2
operator|*
name|n
operator|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|longRunning ()
specifier|private
name|boolean
name|longRunning
parameter_list|()
block|{
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|>
literal|200
return|;
block|}
block|}
comment|/**    * Gets the next patch    *    * @param currentIndex    * @param validators    * @param loopAround loops back around to the front and traverses if this is    *        true    * @return    */
DECL|method|getNextPatch (int currentIndex, boolean loopAround, PatchValidator... validators)
specifier|public
name|int
name|getNextPatch
parameter_list|(
name|int
name|currentIndex
parameter_list|,
name|boolean
name|loopAround
parameter_list|,
name|PatchValidator
modifier|...
name|validators
parameter_list|)
block|{
return|return
name|getNextPatchHelper
argument_list|(
name|currentIndex
argument_list|,
name|loopAround
argument_list|,
name|detail
operator|.
name|getPatches
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|validators
argument_list|)
return|;
block|}
comment|/**    * Helper function for getNextPatch    *    * @param currentIndex    * @param validators    * @param loopAround    * @param maxIndex will only traverse up to this index    * @return    */
DECL|method|getNextPatchHelper (int currentIndex, boolean loopAround, int maxIndex, PatchValidator... validators)
specifier|private
name|int
name|getNextPatchHelper
parameter_list|(
name|int
name|currentIndex
parameter_list|,
name|boolean
name|loopAround
parameter_list|,
name|int
name|maxIndex
parameter_list|,
name|PatchValidator
modifier|...
name|validators
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|currentIndex
operator|+
literal|1
init|;
name|i
operator|<
name|maxIndex
condition|;
name|i
operator|++
control|)
block|{
name|Patch
name|patch
init|=
name|detail
operator|.
name|getPatches
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|patch
operator|!=
literal|null
operator|&&
name|patchIsValid
argument_list|(
name|patch
argument_list|,
name|validators
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
if|if
condition|(
name|loopAround
condition|)
block|{
return|return
name|getNextPatchHelper
argument_list|(
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|currentIndex
argument_list|,
name|validators
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * @return the index to the previous patch    */
DECL|method|getPreviousPatch (int currentIndex, PatchValidator... validators)
specifier|public
name|int
name|getPreviousPatch
parameter_list|(
name|int
name|currentIndex
parameter_list|,
name|PatchValidator
modifier|...
name|validators
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|currentIndex
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Patch
name|patch
init|=
name|detail
operator|.
name|getPatches
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|patch
operator|!=
literal|null
operator|&&
name|patchIsValid
argument_list|(
name|patch
argument_list|,
name|validators
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**    * Helper function that returns whether a patch is valid or not    *    * @param patch    * @param validators    * @return whether the patch is valid based on the validators    */
DECL|method|patchIsValid (Patch patch, PatchValidator... validators)
specifier|private
name|boolean
name|patchIsValid
parameter_list|(
name|Patch
name|patch
parameter_list|,
name|PatchValidator
modifier|...
name|validators
parameter_list|)
block|{
for|for
control|(
name|PatchValidator
name|v
range|:
name|validators
control|)
block|{
if|if
condition|(
operator|!
name|v
operator|.
name|isValid
argument_list|(
name|patch
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

