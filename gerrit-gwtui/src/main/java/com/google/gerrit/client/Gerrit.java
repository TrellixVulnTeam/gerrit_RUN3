begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|auth
operator|.
name|openid
operator|.
name|OpenIdSignInDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|auth
operator|.
name|userpass
operator|.
name|UserPassSignInDialog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|ClientVersion
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|auth
operator|.
name|SignInMode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|HostPageData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SystemInfoService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AccountGeneralPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|EntryPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|JavaScriptObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Accessibility
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Label
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TabPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|clippy
operator|.
name|client
operator|.
name|CopyableLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
operator|.
name|UserAgent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
operator|.
name|ViewSite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|JsonDefTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|XsrfManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
DECL|class|Gerrit
specifier|public
class|class
name|Gerrit
implements|implements
name|EntryPoint
block|{
DECL|field|C
specifier|public
specifier|static
specifier|final
name|GerritConstants
name|C
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritConstants
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|M
specifier|public
specifier|static
specifier|final
name|GerritMessages
name|M
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritMessages
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCES
specifier|public
specifier|static
specifier|final
name|GerritResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritResources
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SYSTEM_SVC
specifier|public
specifier|static
specifier|final
name|SystemInfoService
name|SYSTEM_SVC
decl_stmt|;
DECL|field|SESSION_COOKIE
specifier|private
specifier|static
specifier|final
name|String
name|SESSION_COOKIE
init|=
literal|"GerritAccount"
decl_stmt|;
DECL|field|myHost
specifier|private
specifier|static
name|String
name|myHost
decl_stmt|;
DECL|field|myConfig
specifier|private
specifier|static
name|GerritConfig
name|myConfig
decl_stmt|;
DECL|field|myAccount
specifier|private
specifier|static
name|Account
name|myAccount
decl_stmt|;
DECL|field|menuLeft
specifier|private
specifier|static
name|TabPanel
name|menuLeft
decl_stmt|;
DECL|field|menuRight
specifier|private
specifier|static
name|LinkMenuBar
name|menuRight
decl_stmt|;
DECL|field|siteHeader
specifier|private
specifier|static
name|RootPanel
name|siteHeader
decl_stmt|;
DECL|field|siteFooter
specifier|private
specifier|static
name|RootPanel
name|siteFooter
decl_stmt|;
DECL|field|searchPanel
specifier|private
specifier|static
name|SearchPanel
name|searchPanel
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|Dispatcher
argument_list|()
decl_stmt|;
DECL|field|body
specifier|private
specifier|static
name|ViewSite
argument_list|<
name|Screen
argument_list|>
name|body
decl_stmt|;
static|static
block|{
name|SYSTEM_SVC
operator|=
name|GWT
operator|.
name|create
argument_list|(
name|SystemInfoService
operator|.
name|class
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|bind
argument_list|(
name|SYSTEM_SVC
argument_list|,
literal|"rpc/SystemInfoService"
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeUI (String token)
specifier|static
name|void
name|upgradeUI
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Dispatcher
operator|.
name|RELOAD_UI
operator|+
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Window
operator|.
name|Location
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
comment|/**    * Load the screen at the given location, displaying when ready.    *<p>    * If the URL is not already pointing at this location, a new item will be    * added to the browser's history when the screen is fully loaded and    * displayed on the UI.    *    * @param token location to parse, load, and render.    */
DECL|method|display (final String token)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|body
operator|.
name|getView
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|body
operator|.
name|getView
argument_list|()
operator|.
name|displayToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|dispatcher
operator|.
name|display
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load the screen passed, assuming token can be used to locate it.    *<p>    * The screen is loaded in the background. When it is ready to be visible a    * new item will be added to the browser's history, the screen will be made    * visible, and the window title may be updated.    *<p>    * If {@link Screen#isRequiresSignIn()} is true and the user is not signed in    * yet the screen instance will be discarded, sign-in will take place, and    * will redirect to this location upon success.    *    * @param token location that refers to {@code view}.    * @param view the view to load.    */
DECL|method|display (final String token, final Screen view)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|Screen
name|view
parameter_list|)
block|{
if|if
condition|(
name|view
operator|.
name|isRequiresSignIn
argument_list|()
operator|&&
operator|!
name|isSignedIn
argument_list|()
condition|)
block|{
name|doSignIn
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|body
operator|.
name|setView
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the current history token after a screen change.    *<p>    * The caller has already updated the UI, but wants to publish a different    * history token for the current browser state. This really only makes sense    * if the caller is a {@code TabPanel} and is firing an event when the tab    * changed to a different part.    *    * @param token new location that is already visible.    */
DECL|method|updateImpl (final String token)
specifier|public
specifier|static
name|void
name|updateImpl
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|historyHooks
operator|!=
literal|null
condition|)
block|{
comment|// Because we blocked firing the event our history hooks won't be
comment|// informed of the current token. Manually fire the event to them.
comment|//
name|dispatchHistoryHooks
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setQueryString (String query)
specifier|public
specifier|static
name|void
name|setQueryString
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|searchPanel
operator|.
name|setText
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|setWindowTitle (final Screen screen, final String text)
specifier|public
specifier|static
name|void
name|setWindowTitle
parameter_list|(
specifier|final
name|Screen
name|screen
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|screen
operator|==
name|body
operator|.
name|getView
argument_list|()
condition|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle1
argument_list|(
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle2
argument_list|(
name|text
argument_list|,
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Get the public configuration data used by this Gerrit instance. */
DECL|method|getConfig ()
specifier|public
specifier|static
name|GerritConfig
name|getConfig
parameter_list|()
block|{
return|return
name|myConfig
return|;
block|}
comment|/** @return the currently signed in user's account data; null if no account */
DECL|method|getUserAccount ()
specifier|public
specifier|static
name|Account
name|getUserAccount
parameter_list|()
block|{
return|return
name|myAccount
return|;
block|}
comment|/** @return true if the user is currently authenticated */
DECL|method|isSignedIn ()
specifier|public
specifier|static
name|boolean
name|isSignedIn
parameter_list|()
block|{
return|return
name|getUserAccount
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/** Sign the user into the application. */
DECL|method|doSignIn (final String token)
specifier|public
specifier|static
name|void
name|doSignIn
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
switch|switch
condition|(
name|myConfig
operator|.
name|getAuthType
argument_list|()
condition|)
block|{
case|case
name|HTTP
case|:
case|case
name|HTTP_LDAP
case|:
name|Location
operator|.
name|assign
argument_list|(
name|Location
operator|.
name|getPath
argument_list|()
operator|+
literal|"login/"
operator|+
name|token
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEVELOPMENT_BECOME_ANY_ACCOUNT
case|:
name|Location
operator|.
name|assign
argument_list|(
name|Location
operator|.
name|getPath
argument_list|()
operator|+
literal|"become"
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPENID
case|:
operator|new
name|OpenIdSignInDialog
argument_list|(
name|SignInMode
operator|.
name|SIGN_IN
argument_list|,
name|token
argument_list|,
literal|null
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
break|break;
case|case
name|LDAP
case|:
case|case
name|LDAP_BIND
case|:
operator|new
name|UserPassSignInDialog
argument_list|(
name|token
argument_list|,
literal|null
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
DECL|method|deleteSessionCookie ()
specifier|static
name|void
name|deleteSessionCookie
parameter_list|()
block|{
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|SESSION_COOKIE
argument_list|)
expr_stmt|;
name|myAccount
operator|=
literal|null
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
block|}
DECL|method|onModuleLoad ()
specifier|public
name|void
name|onModuleLoad
parameter_list|()
block|{
name|UserAgent
operator|.
name|assertNotInIFrame
argument_list|()
expr_stmt|;
name|KeyUtil
operator|.
name|setEncoderImpl
argument_list|(
operator|new
name|KeyUtil
operator|.
name|Encoder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
specifier|final
name|String
name|e
parameter_list|)
block|{
return|return
name|fixPathImpl
argument_list|(
name|URL
operator|.
name|encodeComponent
argument_list|(
name|e
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|decode
parameter_list|(
specifier|final
name|String
name|e
parameter_list|)
block|{
return|return
name|URL
operator|.
name|decodeComponent
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|native
name|String
name|fixPathImpl
argument_list|(
name|String
name|path
argument_list|)
comment|/*-{ return path.replace(/%2F/g, "/"); }-*/
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
name|initHostname
argument_list|()
expr_stmt|;
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle1
argument_list|(
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HostPageDataService
name|hpd
init|=
name|GWT
operator|.
name|create
argument_list|(
name|HostPageDataService
operator|.
name|class
argument_list|)
decl_stmt|;
name|hpd
operator|.
name|load
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|HostPageData
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|HostPageData
name|result
parameter_list|)
block|{
name|myConfig
operator|=
name|result
operator|.
name|config
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|account
operator|!=
literal|null
condition|)
block|{
name|myAccount
operator|=
name|result
operator|.
name|account
expr_stmt|;
block|}
name|onModuleLoad2
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initHostname ()
specifier|private
specifier|static
name|void
name|initHostname
parameter_list|()
block|{
name|myHost
operator|=
name|Location
operator|.
name|getHostName
argument_list|()
expr_stmt|;
specifier|final
name|int
name|d1
init|=
name|myHost
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|<
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|d2
init|=
name|myHost
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|d1
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|d2
operator|>=
literal|0
condition|)
block|{
name|myHost
operator|=
name|myHost
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|historyHooks
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|JavaScriptObject
argument_list|>
name|historyHooks
decl_stmt|;
DECL|method|initHistoryHooks ()
specifier|private
specifier|static
specifier|native
name|void
name|initHistoryHooks
parameter_list|()
comment|/*-{ $wnd['gerrit_addHistoryHook'] = function(h) { @com.google.gerrit.client.Gerrit::addHistoryHook(Lcom/google/gwt/core/client/JavaScriptObject;)(h); }; }-*/
function_decl|;
DECL|method|addHistoryHook (final JavaScriptObject hook)
specifier|static
name|void
name|addHistoryHook
parameter_list|(
specifier|final
name|JavaScriptObject
name|hook
parameter_list|)
block|{
if|if
condition|(
name|historyHooks
operator|==
literal|null
condition|)
block|{
name|historyHooks
operator|=
operator|new
name|ArrayList
argument_list|<
name|JavaScriptObject
argument_list|>
argument_list|()
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|dispatchHistoryHooks
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|historyHooks
operator|.
name|add
argument_list|(
name|hook
argument_list|)
expr_stmt|;
block|}
DECL|method|callHistoryHook (JavaScriptObject hook, String url)
specifier|private
specifier|static
specifier|native
name|void
name|callHistoryHook
parameter_list|(
name|JavaScriptObject
name|hook
parameter_list|,
name|String
name|url
parameter_list|)
comment|/*-{ hook(url); }-*/
function_decl|;
DECL|method|dispatchHistoryHooks (final String historyToken)
specifier|private
specifier|static
name|void
name|dispatchHistoryHooks
parameter_list|(
specifier|final
name|String
name|historyToken
parameter_list|)
block|{
specifier|final
name|String
name|url
init|=
name|Location
operator|.
name|getPath
argument_list|()
operator|+
literal|"#"
operator|+
name|historyToken
decl_stmt|;
for|for
control|(
specifier|final
name|JavaScriptObject
name|hook
range|:
name|historyHooks
control|)
block|{
name|callHistoryHook
argument_list|(
name|hook
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|populateBottomMenu (final RootPanel btmmenu)
specifier|private
specifier|static
name|void
name|populateBottomMenu
parameter_list|(
specifier|final
name|RootPanel
name|btmmenu
parameter_list|)
block|{
specifier|final
name|Label
name|keyHelp
init|=
operator|new
name|Label
argument_list|(
name|C
operator|.
name|keyHelp
argument_list|()
argument_list|)
decl_stmt|;
name|keyHelp
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|keyhelp
argument_list|()
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
name|keyHelp
argument_list|)
expr_stmt|;
name|String
name|vs
decl_stmt|;
if|if
condition|(
name|GWT
operator|.
name|isScript
argument_list|()
condition|)
block|{
specifier|final
name|ClientVersion
name|v
init|=
name|GWT
operator|.
name|create
argument_list|(
name|ClientVersion
operator|.
name|class
argument_list|)
decl_stmt|;
name|vs
operator|=
name|v
operator|.
name|version
argument_list|()
operator|.
name|getText
argument_list|()
expr_stmt|;
if|if
condition|(
name|vs
operator|.
name|startsWith
argument_list|(
literal|"v"
argument_list|)
condition|)
block|{
name|vs
operator|=
name|vs
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|vs
operator|=
literal|"dev"
expr_stmt|;
block|}
specifier|final
name|HTML
name|version
init|=
operator|new
name|HTML
argument_list|(
name|M
operator|.
name|poweredBy
argument_list|(
name|vs
argument_list|)
argument_list|)
decl_stmt|;
name|version
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
DECL|method|onModuleLoad2 ()
specifier|private
name|void
name|onModuleLoad2
parameter_list|()
block|{
name|RESOURCES
operator|.
name|gwt_override
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
specifier|final
name|RootPanel
name|gTopMenu
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_topmenu"
argument_list|)
decl_stmt|;
specifier|final
name|RootPanel
name|gStarting
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_startinggerrit"
argument_list|)
decl_stmt|;
specifier|final
name|RootPanel
name|gBody
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_body"
argument_list|)
decl_stmt|;
specifier|final
name|RootPanel
name|gBottomMenu
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_btmmenu"
argument_list|)
decl_stmt|;
name|gTopMenu
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|gerritTopMenu
argument_list|()
argument_list|)
expr_stmt|;
name|gBody
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|gerritBody
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|menuLine
init|=
operator|new
name|Grid
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|menuLeft
operator|=
operator|new
name|TabPanel
argument_list|()
expr_stmt|;
name|menuRight
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|searchPanel
operator|=
operator|new
name|SearchPanel
argument_list|()
expr_stmt|;
name|menuLeft
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuMenuLeft
argument_list|()
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenu
argument_list|()
argument_list|)
expr_stmt|;
name|gTopMenu
operator|.
name|add
argument_list|(
name|menuLine
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|menuRightPanel
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|menuRightPanel
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuMenuRight
argument_list|()
argument_list|)
expr_stmt|;
name|menuRightPanel
operator|.
name|add
argument_list|(
name|menuRight
argument_list|)
expr_stmt|;
name|menuRightPanel
operator|.
name|add
argument_list|(
name|searchPanel
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|menuLeft
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|FlowPanel
argument_list|()
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|menuRightPanel
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|menuLine
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDmenu
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDglue
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDmenu
argument_list|()
argument_list|)
expr_stmt|;
name|siteHeader
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_header"
argument_list|)
expr_stmt|;
name|siteFooter
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_footer"
argument_list|)
expr_stmt|;
name|body
operator|=
operator|new
name|ViewSite
argument_list|<
name|Screen
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onShowView
parameter_list|(
name|Screen
name|view
parameter_list|)
block|{
specifier|final
name|String
name|token
init|=
name|view
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|equals
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
condition|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|historyHooks
operator|!=
literal|null
condition|)
block|{
name|dispatchHistoryHooks
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|onShowView
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|.
name|onShowView
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|gBody
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|RpcStatus
operator|.
name|INSTANCE
operator|=
operator|new
name|RpcStatus
argument_list|(
name|gTopMenu
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|addRpcStartHandler
argument_list|(
name|RpcStatus
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|addRpcCompleteHandler
argument_list|(
name|RpcStatus
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|setDefaultXsrfManager
argument_list|(
operator|new
name|XsrfManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|JsonDefTarget
name|proxy
parameter_list|)
block|{
return|return
name|Cookies
operator|.
name|getCookie
argument_list|(
name|SESSION_COOKIE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setToken
parameter_list|(
name|JsonDefTarget
name|proxy
parameter_list|,
name|String
name|token
parameter_list|)
block|{
comment|// Ignore the request, we always rely upon the cookie.
block|}
block|}
argument_list|)
expr_stmt|;
name|gStarting
operator|.
name|getElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|gStarting
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|detachNow
argument_list|(
name|gStarting
argument_list|)
expr_stmt|;
name|applyUserPreferences
argument_list|()
expr_stmt|;
name|initHistoryHooks
argument_list|()
expr_stmt|;
name|populateBottomMenu
argument_list|(
name|gBottomMenu
argument_list|)
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onValueChange
parameter_list|(
specifier|final
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|display
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|register
argument_list|(
name|body
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSignedIn
argument_list|()
condition|)
block|{
name|display
argument_list|(
name|PageLinks
operator|.
name|MINE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|display
argument_list|(
name|PageLinks
operator|.
name|ALL_OPEN
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|display
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|refreshMenuBar ()
specifier|public
specifier|static
name|void
name|refreshMenuBar
parameter_list|()
block|{
name|menuLeft
operator|.
name|clear
argument_list|()
expr_stmt|;
name|menuRight
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|signedIn
init|=
name|isSignedIn
argument_list|()
decl_stmt|;
specifier|final
name|GerritConfig
name|cfg
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|LinkMenuBar
name|m
decl_stmt|;
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllOpen
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ALL_OPEN
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllMerged
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ALL_MERGED
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllAbandoned
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ALL_ABANDONED
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAll
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|MINE
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyDrafts
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|MINE_DRAFTS
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyWatchedChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|MINE_WATCHED
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyStarredChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|MINE_STARRED
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMine
argument_list|()
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menuLeft
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuGroups
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_GROUPS
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuProjects
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_PROJECTS
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAdmin
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|isDocumentationAvailable
argument_list|()
condition|)
block|{
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationIndex
argument_list|()
argument_list|,
literal|"index.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationUpload
argument_list|()
argument_list|,
literal|"user-upload.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationAccess
argument_list|()
argument_list|,
literal|"access-control.html"
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedIn
condition|)
block|{
name|whoAmI
argument_list|()
expr_stmt|;
name|addLink
argument_list|(
name|menuRight
argument_list|,
name|C
operator|.
name|menuSettings
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|SETTINGS
argument_list|)
expr_stmt|;
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
name|C
operator|.
name|menuSignOut
argument_list|()
argument_list|,
literal|"logout"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|cfg
operator|.
name|getAuthType
argument_list|()
condition|)
block|{
case|case
name|HTTP
case|:
case|case
name|HTTP_LDAP
case|:
break|break;
case|case
name|OPENID
case|:
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuRegister
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
specifier|final
name|String
name|to
init|=
name|History
operator|.
name|getToken
argument_list|()
decl_stmt|;
operator|new
name|OpenIdSignInDialog
argument_list|(
name|SignInMode
operator|.
name|REGISTER
argument_list|,
name|to
argument_list|,
literal|null
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|LDAP
case|:
case|case
name|LDAP_BIND
case|:
if|if
condition|(
name|cfg
operator|.
name|getRegisterUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
name|C
operator|.
name|menuRegister
argument_list|()
argument_list|,
name|cfg
operator|.
name|getRegisterUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEVELOPMENT_BECOME_ANY_ACCOUNT
case|:
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
literal|"Become"
argument_list|,
literal|"become"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|applyUserPreferences ()
specifier|public
specifier|static
name|void
name|applyUserPreferences
parameter_list|()
block|{
if|if
condition|(
name|myAccount
operator|!=
literal|null
condition|)
block|{
specifier|final
name|AccountGeneralPreferences
name|p
init|=
name|myAccount
operator|.
name|getGeneralPreferences
argument_list|()
decl_stmt|;
name|CopyableLabel
operator|.
name|setFlashEnabled
argument_list|(
name|p
operator|.
name|isUseFlashClipboard
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|siteHeader
operator|!=
literal|null
condition|)
block|{
name|siteHeader
operator|.
name|setVisible
argument_list|(
name|p
operator|.
name|isShowSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|siteFooter
operator|!=
literal|null
condition|)
block|{
name|siteFooter
operator|.
name|setVisible
argument_list|(
name|p
operator|.
name|isShowSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|whoAmI ()
specifier|private
specifier|static
name|void
name|whoAmI
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
name|FormatUtil
operator|.
name|nameEmail
argument_list|(
name|getUserAccount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InlineLabel
name|l
init|=
operator|new
name|InlineLabel
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|l
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuBarUserName
argument_list|()
argument_list|)
expr_stmt|;
name|menuRight
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|anchor (final String text, final String to)
specifier|private
specifier|static
name|Anchor
name|anchor
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|to
parameter_list|)
block|{
specifier|final
name|Anchor
name|a
init|=
operator|new
name|Anchor
argument_list|(
name|text
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|a
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuItem
argument_list|()
argument_list|)
expr_stmt|;
name|Accessibility
operator|.
name|setRole
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|,
name|Accessibility
operator|.
name|ROLE_MENUITEM
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
DECL|method|addLink (final LinkMenuBar m, final String text, final String historyToken)
specifier|private
specifier|static
name|void
name|addLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|historyToken
parameter_list|)
block|{
name|m
operator|.
name|addItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
name|historyToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocLink (final LinkMenuBar m, final String text, final String href)
specifier|private
specifier|static
name|void
name|addDocLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|href
parameter_list|)
block|{
specifier|final
name|Anchor
name|atag
init|=
name|anchor
argument_list|(
name|text
argument_list|,
literal|"Documentation/"
operator|+
name|href
argument_list|)
decl_stmt|;
name|atag
operator|.
name|setTarget
argument_list|(
literal|"_blank"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|atag
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

