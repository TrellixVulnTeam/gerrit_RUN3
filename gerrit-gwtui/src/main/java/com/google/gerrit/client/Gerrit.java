begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2008 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|ADMINISTRATE_SERVER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|CREATE_GROUP
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GlobalCapability
operator|.
name|CREATE_PROJECT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|AccountCapabilities
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|AccountInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|ApiGlue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|api
operator|.
name|PluginLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeConstants
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|ChangeListScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|config
operator|.
name|ConfigServerApi
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|extensions
operator|.
name|TopMenu
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|extensions
operator|.
name|TopMenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|extensions
operator|.
name|TopMenuList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
operator|.
name|PatchScreen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Natives
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|MorphingTabPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|PatchLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ScreenLoadEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|GitwebConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|HostPageData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|data
operator|.
name|SystemInfoService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|webui
operator|.
name|GerritTopMenu
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountDiffPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AccountGeneralPreferences
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|aria
operator|.
name|client
operator|.
name|Roles
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|EntryPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|AnchorElement
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dom
operator|.
name|client
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|ClickHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyCodes
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|dom
operator|.
name|client
operator|.
name|KeyDownHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeEvent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|logical
operator|.
name|shared
operator|.
name|ValueChangeHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|EventBus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|event
operator|.
name|shared
operator|.
name|SimpleEventBus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|UrlBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
operator|.
name|Location
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Anchor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Grid
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTMLTable
operator|.
name|CellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineHTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|clippy
operator|.
name|client
operator|.
name|CopyableLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
operator|.
name|UserAgent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|user
operator|.
name|client
operator|.
name|ViewSite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|JsonDefTarget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|XsrfManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|KeyUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|Gerrit
specifier|public
class|class
name|Gerrit
implements|implements
name|EntryPoint
block|{
DECL|field|C
specifier|public
specifier|static
specifier|final
name|GerritConstants
name|C
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritConstants
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|CC
specifier|public
specifier|static
specifier|final
name|ChangeConstants
name|CC
init|=
name|GWT
operator|.
name|create
argument_list|(
name|ChangeConstants
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|M
specifier|public
specifier|static
specifier|final
name|GerritMessages
name|M
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritMessages
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|RESOURCES
specifier|public
specifier|static
specifier|final
name|GerritResources
name|RESOURCES
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritResources
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SYSTEM_SVC
specifier|public
specifier|static
specifier|final
name|SystemInfoService
name|SYSTEM_SVC
decl_stmt|;
DECL|field|EVENT_BUS
specifier|public
specifier|static
specifier|final
name|EventBus
name|EVENT_BUS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|SimpleEventBus
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|THEMER
specifier|public
specifier|static
name|Themer
name|THEMER
init|=
name|GWT
operator|.
name|create
argument_list|(
name|Themer
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|myHost
specifier|private
specifier|static
name|String
name|myHost
decl_stmt|;
DECL|field|myConfig
specifier|private
specifier|static
name|GerritConfig
name|myConfig
decl_stmt|;
DECL|field|myTheme
specifier|private
specifier|static
name|HostPageData
operator|.
name|Theme
name|myTheme
decl_stmt|;
DECL|field|myAccount
specifier|private
specifier|static
name|Account
name|myAccount
decl_stmt|;
DECL|field|myAccountDiffPref
specifier|private
specifier|static
name|AccountDiffPreference
name|myAccountDiffPref
decl_stmt|;
DECL|field|xGerritAuth
specifier|private
specifier|static
name|String
name|xGerritAuth
decl_stmt|;
DECL|field|menuBars
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|LinkMenuBar
argument_list|>
name|menuBars
decl_stmt|;
DECL|field|menuLeft
specifier|private
specifier|static
name|MorphingTabPanel
name|menuLeft
decl_stmt|;
DECL|field|menuRight
specifier|private
specifier|static
name|LinkMenuBar
name|menuRight
decl_stmt|;
DECL|field|topMenu
specifier|private
specifier|static
name|RootPanel
name|topMenu
decl_stmt|;
DECL|field|siteHeader
specifier|private
specifier|static
name|RootPanel
name|siteHeader
decl_stmt|;
DECL|field|siteFooter
specifier|private
specifier|static
name|RootPanel
name|siteFooter
decl_stmt|;
DECL|field|bottomMenu
specifier|private
specifier|static
name|RootPanel
name|bottomMenu
decl_stmt|;
DECL|field|searchPanel
specifier|private
specifier|static
name|SearchPanel
name|searchPanel
decl_stmt|;
DECL|field|dispatcher
specifier|private
specifier|static
specifier|final
name|Dispatcher
name|dispatcher
init|=
operator|new
name|Dispatcher
argument_list|()
decl_stmt|;
DECL|field|body
specifier|private
specifier|static
name|ViewSite
argument_list|<
name|Screen
argument_list|>
name|body
decl_stmt|;
DECL|field|patchScreen
specifier|private
specifier|static
name|PatchScreen
name|patchScreen
decl_stmt|;
DECL|field|lastChangeListToken
specifier|private
specifier|static
name|String
name|lastChangeListToken
decl_stmt|;
DECL|field|lastViewToken
specifier|private
specifier|static
name|String
name|lastViewToken
decl_stmt|;
static|static
block|{
name|SYSTEM_SVC
operator|=
name|GWT
operator|.
name|create
argument_list|(
name|SystemInfoService
operator|.
name|class
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|bind
argument_list|(
name|SYSTEM_SVC
argument_list|,
literal|"rpc/SystemInfoService"
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeUI (String token)
specifier|static
name|void
name|upgradeUI
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Dispatcher
operator|.
name|RELOAD_UI
operator|+
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Window
operator|.
name|Location
operator|.
name|reload
argument_list|()
expr_stmt|;
block|}
DECL|method|getPatchScreenTopView ()
specifier|public
specifier|static
name|PatchScreen
operator|.
name|TopView
name|getPatchScreenTopView
parameter_list|()
block|{
if|if
condition|(
name|patchScreen
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|patchScreen
operator|.
name|getTopView
argument_list|()
return|;
block|}
DECL|method|displayLastChangeList ()
specifier|public
specifier|static
name|void
name|displayLastChangeList
parameter_list|()
block|{
if|if
condition|(
name|lastChangeListToken
operator|!=
literal|null
condition|)
block|{
name|display
argument_list|(
name|lastChangeListToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isSignedIn
argument_list|()
condition|)
block|{
name|display
argument_list|(
name|PageLinks
operator|.
name|MINE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|display
argument_list|(
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:open"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPriorView ()
specifier|public
specifier|static
name|String
name|getPriorView
parameter_list|()
block|{
return|return
name|lastViewToken
return|;
block|}
comment|/**    * Load the screen at the given location, displaying when ready.    *<p>    * If the URL is not already pointing at this location, a new item will be    * added to the browser's history when the screen is fully loaded and    * displayed on the UI.    *    * @param token location to parse, load, and render.    */
DECL|method|display (final String token)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|body
operator|.
name|getView
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|body
operator|.
name|getView
argument_list|()
operator|.
name|displayToken
argument_list|(
name|token
argument_list|)
condition|)
block|{
name|dispatcher
operator|.
name|display
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Load the screen passed, assuming token can be used to locate it.    *<p>    * The screen is loaded in the background. When it is ready to be visible a    * new item will be added to the browser's history, the screen will be made    * visible, and the window title may be updated.    *<p>    * If {@link Screen#isRequiresSignIn()} is true and the user is not signed in    * yet the screen instance will be discarded, sign-in will take place, and    * will redirect to this location upon success.    *    * @param token location that refers to {@code view}.    * @param view the view to load.    */
DECL|method|display (final String token, final Screen view)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|Screen
name|view
parameter_list|)
block|{
if|if
condition|(
name|view
operator|.
name|isRequiresSignIn
argument_list|()
operator|&&
operator|!
name|isSignedIn
argument_list|()
condition|)
block|{
name|doSignIn
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|view
operator|.
name|setToken
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|body
operator|.
name|setView
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update any top level menus which can vary based on the view which was    * loaded.    * @param view the loaded view.    */
DECL|method|updateMenus (Screen view)
specifier|public
specifier|static
name|void
name|updateMenus
parameter_list|(
name|Screen
name|view
parameter_list|)
block|{
name|LinkMenuBar
name|diffBar
init|=
name|menuBars
operator|.
name|get
argument_list|(
name|GerritTopMenu
operator|.
name|DIFFERENCES
operator|.
name|menuName
argument_list|)
decl_stmt|;
if|if
condition|(
name|view
operator|instanceof
name|PatchScreen
condition|)
block|{
name|patchScreen
operator|=
operator|(
name|PatchScreen
operator|)
name|view
expr_stmt|;
name|menuLeft
operator|.
name|setVisible
argument_list|(
name|diffBar
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|selectTab
argument_list|(
name|menuLeft
operator|.
name|getWidgetIndex
argument_list|(
name|diffBar
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|patchScreen
operator|!=
literal|null
operator|&&
name|menuLeft
operator|.
name|getSelectedWidget
argument_list|()
operator|==
name|diffBar
condition|)
block|{
name|menuLeft
operator|.
name|selectTab
argument_list|(
name|isSignedIn
argument_list|()
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
block|}
name|patchScreen
operator|=
literal|null
expr_stmt|;
name|menuLeft
operator|.
name|setVisible
argument_list|(
name|diffBar
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Update the current history token after a screen change.    *<p>    * The caller has already updated the UI, but wants to publish a different    * history token for the current browser state. This really only makes sense    * if the caller is a {@code TabPanel} and is firing an event when the tab    * changed to a different part.    *    * @param token new location that is already visible.    */
DECL|method|updateImpl (final String token)
specifier|public
specifier|static
name|void
name|updateImpl
parameter_list|(
specifier|final
name|String
name|token
parameter_list|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dispatchHistoryHooks
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|setQueryString (String query)
specifier|public
specifier|static
name|void
name|setQueryString
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|searchPanel
operator|.
name|setText
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
DECL|method|setWindowTitle (final Screen screen, final String text)
specifier|public
specifier|static
name|void
name|setWindowTitle
parameter_list|(
specifier|final
name|Screen
name|screen
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
if|if
condition|(
name|screen
operator|==
name|body
operator|.
name|getView
argument_list|()
condition|)
block|{
if|if
condition|(
name|text
operator|==
literal|null
operator|||
name|text
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle1
argument_list|(
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle2
argument_list|(
name|text
argument_list|,
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getHeaderFooterHeight ()
specifier|public
specifier|static
name|int
name|getHeaderFooterHeight
parameter_list|()
block|{
name|int
name|h
init|=
name|bottomMenu
operator|.
name|getOffsetHeight
argument_list|()
decl_stmt|;
if|if
condition|(
name|topMenu
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|h
operator|+=
name|topMenu
operator|.
name|getOffsetHeight
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|siteHeader
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|h
operator|+=
name|siteHeader
operator|.
name|getOffsetHeight
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|siteFooter
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|h
operator|+=
name|siteFooter
operator|.
name|getOffsetHeight
argument_list|()
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
DECL|method|setHeaderVisible (boolean visible)
specifier|public
specifier|static
name|void
name|setHeaderVisible
parameter_list|(
name|boolean
name|visible
parameter_list|)
block|{
name|topMenu
operator|.
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
name|siteHeader
operator|.
name|setVisible
argument_list|(
name|visible
operator|&&
operator|(
name|myAccount
operator|!=
literal|null
condition|?
name|myAccount
operator|.
name|getGeneralPreferences
argument_list|()
operator|.
name|isShowSiteHeader
argument_list|()
else|:
literal|true
operator|)
argument_list|)
expr_stmt|;
block|}
DECL|method|isHeaderVisible ()
specifier|public
specifier|static
name|boolean
name|isHeaderVisible
parameter_list|()
block|{
return|return
name|topMenu
operator|.
name|isVisible
argument_list|()
return|;
block|}
DECL|method|getBottomMenu ()
specifier|public
specifier|static
name|RootPanel
name|getBottomMenu
parameter_list|()
block|{
return|return
name|bottomMenu
return|;
block|}
comment|/** Get the public configuration data used by this Gerrit instance. */
DECL|method|getConfig ()
specifier|public
specifier|static
name|GerritConfig
name|getConfig
parameter_list|()
block|{
return|return
name|myConfig
return|;
block|}
DECL|method|getGitwebLink ()
specifier|public
specifier|static
name|GitwebLink
name|getGitwebLink
parameter_list|()
block|{
name|GitwebConfig
name|gw
init|=
name|getConfig
argument_list|()
operator|.
name|getGitwebLink
argument_list|()
decl_stmt|;
return|return
name|gw
operator|!=
literal|null
operator|&&
name|gw
operator|.
name|type
operator|!=
literal|null
condition|?
operator|new
name|GitwebLink
argument_list|(
name|gw
argument_list|)
else|:
literal|null
return|;
block|}
comment|/** Site theme information (site specific colors)/ */
DECL|method|getTheme ()
specifier|public
specifier|static
name|HostPageData
operator|.
name|Theme
name|getTheme
parameter_list|()
block|{
return|return
name|myTheme
return|;
block|}
comment|/** @return the currently signed in user's account data; null if no account */
DECL|method|getUserAccount ()
specifier|public
specifier|static
name|Account
name|getUserAccount
parameter_list|()
block|{
return|return
name|myAccount
return|;
block|}
comment|/** @return the currently signed in user's account data; empty account data if no account */
DECL|method|getUserAccountInfo ()
specifier|public
specifier|static
name|AccountInfo
name|getUserAccountInfo
parameter_list|()
block|{
return|return
name|FormatUtil
operator|.
name|asInfo
argument_list|(
name|myAccount
argument_list|)
return|;
block|}
comment|/** @return access token to prove user identity during REST API calls. */
DECL|method|getXGerritAuth ()
specifier|public
specifier|static
name|String
name|getXGerritAuth
parameter_list|()
block|{
return|return
name|xGerritAuth
return|;
block|}
comment|/** @return the currently signed in users's diff preferences; null if no diff preferences defined for the account */
DECL|method|getAccountDiffPreference ()
specifier|public
specifier|static
name|AccountDiffPreference
name|getAccountDiffPreference
parameter_list|()
block|{
return|return
name|myAccountDiffPref
return|;
block|}
DECL|method|setAccountDiffPreference (AccountDiffPreference accountDiffPref)
specifier|public
specifier|static
name|void
name|setAccountDiffPreference
parameter_list|(
name|AccountDiffPreference
name|accountDiffPref
parameter_list|)
block|{
name|myAccountDiffPref
operator|=
name|accountDiffPref
expr_stmt|;
block|}
comment|/** @return true if the user is currently authenticated */
DECL|method|isSignedIn ()
specifier|public
specifier|static
name|boolean
name|isSignedIn
parameter_list|()
block|{
return|return
name|getUserAccount
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/** Sign the user into the application. */
DECL|method|doSignIn (String token)
specifier|public
specifier|static
name|void
name|doSignIn
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|Location
operator|.
name|assign
argument_list|(
name|loginRedirect
argument_list|(
name|token
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|loginRedirect (String token)
specifier|public
specifier|static
name|String
name|loginRedirect
parameter_list|(
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|token
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|selfRedirect
argument_list|(
literal|"/login/"
operator|+
name|token
argument_list|)
return|;
block|}
DECL|method|selfRedirect (String suffix)
specifier|public
specifier|static
name|String
name|selfRedirect
parameter_list|(
name|String
name|suffix
parameter_list|)
block|{
comment|// Clean up the path. Users seem to like putting extra slashes into the URL
comment|// which can break redirections by misinterpreting at either client or server.
name|String
name|path
init|=
name|Location
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
while|while
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|+
literal|"/"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|suffix
operator|!=
literal|null
condition|)
block|{
while|while
condition|(
name|suffix
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|suffix
operator|=
name|suffix
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|path
operator|+=
name|suffix
expr_stmt|;
block|}
name|UrlBuilder
name|builder
init|=
operator|new
name|UrlBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProtocol
argument_list|(
name|Location
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setHost
argument_list|(
name|Location
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|port
init|=
name|Location
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
operator|&&
operator|!
name|port
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setPort
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|buildString
argument_list|()
return|;
block|}
DECL|method|deleteSessionCookie ()
specifier|static
name|void
name|deleteSessionCookie
parameter_list|()
block|{
name|myAccount
operator|=
literal|null
expr_stmt|;
name|myAccountDiffPref
operator|=
literal|null
expr_stmt|;
name|xGerritAuth
operator|=
literal|null
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
comment|// If the cookie was HttpOnly, this request to delete it will
comment|// most likely not be successful.  We can try anyway though.
comment|//
name|Cookies
operator|.
name|removeCookie
argument_list|(
literal|"GerritAccount"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onModuleLoad ()
specifier|public
name|void
name|onModuleLoad
parameter_list|()
block|{
name|UserAgent
operator|.
name|assertNotInIFrame
argument_list|()
expr_stmt|;
name|KeyUtil
operator|.
name|setEncoderImpl
argument_list|(
operator|new
name|KeyUtil
operator|.
name|Encoder
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|encode
parameter_list|(
name|String
name|e
parameter_list|)
block|{
name|e
operator|=
name|URL
operator|.
name|encodeQueryString
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|fixPathImpl
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|fixColonImpl
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|e
operator|=
name|fixDoubleQuote
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|decode
parameter_list|(
specifier|final
name|String
name|e
parameter_list|)
block|{
return|return
name|URL
operator|.
name|decodeQueryString
argument_list|(
name|e
argument_list|)
return|;
block|}
specifier|private
specifier|native
name|String
name|fixPathImpl
argument_list|(
name|String
name|path
argument_list|)
comment|/*-{ return path.replace(/%2F/g, "/"); }-*/
decl_stmt|;
specifier|private
specifier|native
name|String
name|fixColonImpl
argument_list|(
name|String
name|path
argument_list|)
comment|/*-{ return path.replace(/%3A/g, ":"); }-*/
decl_stmt|;
specifier|private
specifier|native
name|String
name|fixDoubleQuote
argument_list|(
name|String
name|path
argument_list|)
comment|/*-{ return path.replace(/%22/g, '"'); }-*/
decl_stmt|;
block|}
argument_list|)
expr_stmt|;
name|initHostname
argument_list|()
expr_stmt|;
name|Window
operator|.
name|setTitle
argument_list|(
name|M
operator|.
name|windowTitle1
argument_list|(
name|myHost
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|HostPageDataService
name|hpd
init|=
name|GWT
operator|.
name|create
argument_list|(
name|HostPageDataService
operator|.
name|class
argument_list|)
decl_stmt|;
name|hpd
operator|.
name|load
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|HostPageData
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|HostPageData
name|result
parameter_list|)
block|{
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementById
argument_list|(
literal|"gerrit_hostpagedata"
argument_list|)
operator|.
name|removeFromParent
argument_list|()
expr_stmt|;
name|myConfig
operator|=
name|result
operator|.
name|config
expr_stmt|;
name|myTheme
operator|=
name|result
operator|.
name|theme
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|account
operator|!=
literal|null
condition|)
block|{
name|myAccount
operator|=
name|result
operator|.
name|account
expr_stmt|;
name|xGerritAuth
operator|=
name|result
operator|.
name|xGerritAuth
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|accountDiffPref
operator|!=
literal|null
condition|)
block|{
name|myAccountDiffPref
operator|=
name|result
operator|.
name|accountDiffPref
expr_stmt|;
name|applyUserPreferences
argument_list|()
expr_stmt|;
block|}
name|onModuleLoad2
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|initHostname ()
specifier|private
specifier|static
name|void
name|initHostname
parameter_list|()
block|{
name|myHost
operator|=
name|Location
operator|.
name|getHostName
argument_list|()
expr_stmt|;
specifier|final
name|int
name|d1
init|=
name|myHost
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|d1
operator|<
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|d2
init|=
name|myHost
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|,
name|d1
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|d2
operator|>=
literal|0
condition|)
block|{
name|myHost
operator|=
name|myHost
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|d2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|dispatchHistoryHooks (String token)
specifier|private
specifier|static
name|void
name|dispatchHistoryHooks
parameter_list|(
name|String
name|token
parameter_list|)
block|{
name|ApiGlue
operator|.
name|fireEvent
argument_list|(
literal|"history"
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|populateBottomMenu (RootPanel btmmenu, HostPageData hpd)
specifier|private
specifier|static
name|void
name|populateBottomMenu
parameter_list|(
name|RootPanel
name|btmmenu
parameter_list|,
name|HostPageData
name|hpd
parameter_list|)
block|{
name|String
name|vs
init|=
name|hpd
operator|.
name|version
decl_stmt|;
if|if
condition|(
name|vs
operator|==
literal|null
operator|||
name|vs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|vs
operator|=
literal|"dev"
expr_stmt|;
block|}
name|btmmenu
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|C
operator|.
name|keyHelp
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
literal|" | "
argument_list|)
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
operator|new
name|InlineHTML
argument_list|(
name|M
operator|.
name|poweredBy
argument_list|(
name|vs
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|reportBugText
init|=
name|getConfig
argument_list|()
operator|.
name|getReportBugText
argument_list|()
decl_stmt|;
name|Anchor
name|a
init|=
operator|new
name|Anchor
argument_list|(
name|reportBugText
operator|==
literal|null
condition|?
name|C
operator|.
name|reportBug
argument_list|()
else|:
name|reportBugText
argument_list|,
name|getConfig
argument_list|()
operator|.
name|getReportBugUrl
argument_list|()
argument_list|)
decl_stmt|;
name|a
operator|.
name|setTarget
argument_list|(
literal|"_blank"
argument_list|)
expr_stmt|;
name|a
operator|.
name|setStyleName
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
literal|" | "
argument_list|)
argument_list|)
expr_stmt|;
name|btmmenu
operator|.
name|add
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
DECL|method|onModuleLoad2 (HostPageData hpd)
specifier|private
name|void
name|onModuleLoad2
parameter_list|(
name|HostPageData
name|hpd
parameter_list|)
block|{
name|RESOURCES
operator|.
name|gwt_override
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|ensureInjected
argument_list|()
expr_stmt|;
name|topMenu
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_topmenu"
argument_list|)
expr_stmt|;
specifier|final
name|RootPanel
name|gStarting
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_startinggerrit"
argument_list|)
decl_stmt|;
specifier|final
name|RootPanel
name|gBody
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_body"
argument_list|)
decl_stmt|;
name|bottomMenu
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_btmmenu"
argument_list|)
expr_stmt|;
name|topMenu
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|gerritTopMenu
argument_list|()
argument_list|)
expr_stmt|;
name|gBody
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|gerritBody
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Grid
name|menuLine
init|=
operator|new
name|Grid
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|menuLeft
operator|=
operator|new
name|MorphingTabPanel
argument_list|()
expr_stmt|;
name|menuRight
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|searchPanel
operator|=
operator|new
name|SearchPanel
argument_list|()
expr_stmt|;
name|menuLeft
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuMenuLeft
argument_list|()
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenu
argument_list|()
argument_list|)
expr_stmt|;
name|topMenu
operator|.
name|add
argument_list|(
name|menuLine
argument_list|)
expr_stmt|;
specifier|final
name|FlowPanel
name|menuRightPanel
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|menuRightPanel
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuMenuRight
argument_list|()
argument_list|)
expr_stmt|;
name|menuRightPanel
operator|.
name|add
argument_list|(
name|searchPanel
argument_list|)
expr_stmt|;
name|menuRightPanel
operator|.
name|add
argument_list|(
name|menuRight
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|menuLeft
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|FlowPanel
argument_list|()
argument_list|)
expr_stmt|;
name|menuLine
operator|.
name|setWidget
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|menuRightPanel
argument_list|)
expr_stmt|;
specifier|final
name|CellFormatter
name|fmt
init|=
name|menuLine
operator|.
name|getCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDmenu
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDglue
argument_list|()
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|topmenuTDmenu
argument_list|()
argument_list|)
expr_stmt|;
name|siteHeader
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_header"
argument_list|)
expr_stmt|;
name|siteFooter
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_footer"
argument_list|)
expr_stmt|;
name|body
operator|=
operator|new
name|ViewSite
argument_list|<
name|Screen
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|onShowView
parameter_list|(
name|Screen
name|view
parameter_list|)
block|{
name|String
name|token
init|=
name|view
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|History
operator|.
name|newItem
argument_list|(
name|token
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|dispatchHistoryHooks
argument_list|(
name|token
argument_list|)
expr_stmt|;
if|if
condition|(
name|view
operator|instanceof
name|ChangeListScreen
condition|)
block|{
name|lastChangeListToken
operator|=
name|token
expr_stmt|;
block|}
name|super
operator|.
name|onShowView
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|view
operator|.
name|onShowView
argument_list|()
expr_stmt|;
name|lastViewToken
operator|=
name|token
expr_stmt|;
block|}
block|}
expr_stmt|;
name|gBody
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|RpcStatus
operator|.
name|INSTANCE
operator|=
operator|new
name|RpcStatus
argument_list|()
expr_stmt|;
name|JsonUtil
operator|.
name|addRpcStartHandler
argument_list|(
name|RpcStatus
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|addRpcCompleteHandler
argument_list|(
name|RpcStatus
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|setDefaultXsrfManager
argument_list|(
operator|new
name|XsrfManager
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|JsonDefTarget
name|proxy
parameter_list|)
block|{
return|return
name|xGerritAuth
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setToken
parameter_list|(
name|JsonDefTarget
name|proxy
parameter_list|,
name|String
name|token
parameter_list|)
block|{
comment|// Ignore the request, we always rely upon the cookie.
block|}
block|}
argument_list|)
expr_stmt|;
name|gStarting
operator|.
name|getElement
argument_list|()
operator|.
name|getParentElement
argument_list|()
operator|.
name|removeChild
argument_list|(
name|gStarting
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|detachNow
argument_list|(
name|gStarting
argument_list|)
expr_stmt|;
name|ApiGlue
operator|.
name|init
argument_list|()
expr_stmt|;
name|applyUserPreferences
argument_list|()
expr_stmt|;
name|populateBottomMenu
argument_list|(
name|bottomMenu
argument_list|,
name|hpd
argument_list|)
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
name|History
operator|.
name|addValueChangeHandler
argument_list|(
operator|new
name|ValueChangeHandler
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onValueChange
parameter_list|(
name|ValueChangeEvent
argument_list|<
name|String
argument_list|>
name|event
parameter_list|)
block|{
name|display
argument_list|(
name|event
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JumpKeys
operator|.
name|register
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|String
name|token
init|=
name|History
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|token
operator|=
name|isSignedIn
argument_list|()
condition|?
name|PageLinks
operator|.
name|MINE
else|:
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:open"
argument_list|)
expr_stmt|;
block|}
name|saveDefaultTheme
argument_list|()
expr_stmt|;
if|if
condition|(
name|hpd
operator|.
name|messages
operator|!=
literal|null
condition|)
block|{
operator|new
name|MessageOfTheDayBar
argument_list|(
name|hpd
operator|.
name|messages
argument_list|)
operator|.
name|show
argument_list|()
expr_stmt|;
block|}
name|PluginLoader
operator|.
name|load
argument_list|(
name|hpd
operator|.
name|plugins
argument_list|,
name|token
argument_list|)
expr_stmt|;
block|}
DECL|method|saveDefaultTheme ()
specifier|private
name|void
name|saveDefaultTheme
parameter_list|()
block|{
name|THEMER
operator|.
name|init
argument_list|(
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementById
argument_list|(
literal|"gerrit_sitecss"
argument_list|)
argument_list|,
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementById
argument_list|(
literal|"gerrit_header"
argument_list|)
argument_list|,
name|Document
operator|.
name|get
argument_list|()
operator|.
name|getElementById
argument_list|(
literal|"gerrit_footer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshMenuBar ()
specifier|public
specifier|static
name|void
name|refreshMenuBar
parameter_list|()
block|{
name|menuLeft
operator|.
name|clear
argument_list|()
expr_stmt|;
name|menuRight
operator|.
name|clear
argument_list|()
expr_stmt|;
name|menuBars
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|signedIn
init|=
name|isSignedIn
argument_list|()
decl_stmt|;
specifier|final
name|GerritConfig
name|cfg
init|=
name|getConfig
argument_list|()
decl_stmt|;
name|LinkMenuBar
name|m
decl_stmt|;
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|ALL
operator|.
name|menuName
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllOpen
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:open"
argument_list|)
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllMerged
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:merged"
argument_list|)
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllAbandoned
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"status:abandoned"
argument_list|)
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAll
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|MY
operator|.
name|menuName
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|MINE
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyDrafts
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"is:draft"
argument_list|)
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyDraftComments
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"has:draft"
argument_list|)
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyWatchedChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"is:watched status:open"
argument_list|)
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyStarredChanges
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|toChangeQuery
argument_list|(
literal|"is:starred"
argument_list|)
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMine
argument_list|()
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|selectTab
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menuLeft
operator|.
name|selectTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|patchScreen
operator|=
literal|null
expr_stmt|;
name|LinkMenuBar
name|diffBar
init|=
operator|new
name|LinkMenuBar
argument_list|()
decl_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|DIFFERENCES
operator|.
name|menuName
argument_list|,
name|diffBar
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|addInvisible
argument_list|(
name|diffBar
argument_list|,
name|C
operator|.
name|menuDiff
argument_list|()
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|CC
operator|.
name|patchTableDiffSideBySide
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|Type
operator|.
name|SIDE_BY_SIDE
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|CC
operator|.
name|patchTableDiffUnified
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|Type
operator|.
name|UNIFIED
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|C
operator|.
name|menuDiffCommit
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|TopView
operator|.
name|COMMIT
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|C
operator|.
name|menuDiffPreferences
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|TopView
operator|.
name|PREFERENCES
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|C
operator|.
name|menuDiffPatchSets
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|TopView
operator|.
name|PATCH_SETS
argument_list|)
expr_stmt|;
name|addDiffLink
argument_list|(
name|diffBar
argument_list|,
name|C
operator|.
name|menuDiffFiles
argument_list|()
argument_list|,
name|PatchScreen
operator|.
name|TopView
operator|.
name|FILES
argument_list|)
expr_stmt|;
specifier|final
name|LinkMenuBar
name|projectsBar
init|=
operator|new
name|LinkMenuBar
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onScreenLoad
parameter_list|(
name|ScreenLoadEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getScreen
argument_list|()
operator|instanceof
name|ProjectScreen
condition|)
block|{
name|menuLeft
operator|.
name|selectTab
argument_list|(
name|menuLeft
operator|.
name|getWidgetIndex
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|PROJECTS
operator|.
name|menuName
argument_list|,
name|projectsBar
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsList
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_PROJECTS
argument_list|)
expr_stmt|;
name|addProjectLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsInfo
argument_list|()
argument_list|,
name|ProjectScreen
operator|.
name|INFO
argument_list|)
expr_stmt|;
name|addProjectLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsBranches
argument_list|()
argument_list|,
name|ProjectScreen
operator|.
name|BRANCH
argument_list|)
expr_stmt|;
name|addProjectLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsAccess
argument_list|()
argument_list|,
name|ProjectScreen
operator|.
name|ACCESS
argument_list|)
expr_stmt|;
specifier|final
name|LinkMenuItem
name|dashboardsMenuItem
init|=
name|addProjectLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsDashboards
argument_list|()
argument_list|,
name|ProjectScreen
operator|.
name|DASHBOARDS
argument_list|)
decl_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjects
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
specifier|final
name|LinkMenuBar
name|peopleBar
init|=
operator|new
name|LinkMenuBar
argument_list|()
decl_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|PEOPLE
operator|.
name|menuName
argument_list|,
name|peopleBar
argument_list|)
expr_stmt|;
specifier|final
name|LinkMenuItem
name|groupsListMenuItem
init|=
name|addLink
argument_list|(
name|peopleBar
argument_list|,
name|C
operator|.
name|menuPeopleGroupsList
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_GROUPS
argument_list|)
decl_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|peopleBar
argument_list|,
name|C
operator|.
name|menuPeople
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LinkMenuBar
name|pluginsBar
init|=
operator|new
name|LinkMenuBar
argument_list|()
decl_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|PLUGINS
operator|.
name|menuName
argument_list|,
name|pluginsBar
argument_list|)
expr_stmt|;
name|AccountCapabilities
operator|.
name|all
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|AccountCapabilities
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onSuccess
parameter_list|(
name|AccountCapabilities
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|.
name|canPerform
argument_list|(
name|CREATE_PROJECT
argument_list|)
condition|)
block|{
name|insertLink
argument_list|(
name|projectsBar
argument_list|,
name|C
operator|.
name|menuProjectsCreate
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_CREATE_PROJECT
argument_list|,
name|projectsBar
operator|.
name|getWidgetIndex
argument_list|(
name|dashboardsMenuItem
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|canPerform
argument_list|(
name|CREATE_GROUP
argument_list|)
condition|)
block|{
name|insertLink
argument_list|(
name|peopleBar
argument_list|,
name|C
operator|.
name|menuPeopleGroupsCreate
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_CREATE_GROUP
argument_list|,
name|peopleBar
operator|.
name|getWidgetIndex
argument_list|(
name|groupsListMenuItem
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|.
name|canPerform
argument_list|(
name|ADMINISTRATE_SERVER
argument_list|)
condition|)
block|{
name|insertLink
argument_list|(
name|pluginsBar
argument_list|,
name|C
operator|.
name|menuPluginsInstalled
argument_list|()
argument_list|,
name|PageLinks
operator|.
name|ADMIN_PLUGINS
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|insert
argument_list|(
name|pluginsBar
argument_list|,
name|C
operator|.
name|menuPlugins
argument_list|()
argument_list|,
name|menuLeft
operator|.
name|getWidgetIndex
argument_list|(
name|peopleBar
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|CREATE_PROJECT
argument_list|,
name|CREATE_GROUP
argument_list|,
name|ADMINISTRATE_SERVER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getConfig
argument_list|()
operator|.
name|isDocumentationAvailable
argument_list|()
condition|)
block|{
name|m
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|menuBars
operator|.
name|put
argument_list|(
name|GerritTopMenu
operator|.
name|DOCUMENTATION
operator|.
name|menuName
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationTOC
argument_list|()
argument_list|,
literal|"index.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationSearch
argument_list|()
argument_list|,
literal|"user-search.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationUpload
argument_list|()
argument_list|,
literal|"user-upload.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationAccess
argument_list|()
argument_list|,
literal|"access-control.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationAPI
argument_list|()
argument_list|,
literal|"rest-api.html"
argument_list|)
expr_stmt|;
name|addDocLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentationProjectOwnerGuide
argument_list|()
argument_list|,
literal|"intro-project-owner.html"
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuDocumentation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedIn
condition|)
block|{
name|whoAmI
argument_list|(
name|cfg
operator|.
name|getAuthType
argument_list|()
operator|!=
name|AuthType
operator|.
name|CLIENT_SSL_CERT_LDAP
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|cfg
operator|.
name|getAuthType
argument_list|()
condition|)
block|{
case|case
name|CLIENT_SSL_CERT_LDAP
case|:
break|break;
case|case
name|OPENID
case|:
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuRegister
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|String
name|t
init|=
name|History
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
literal|""
expr_stmt|;
block|}
name|doSignIn
argument_list|(
name|PageLinks
operator|.
name|REGISTER
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|OPENID_SSO
case|:
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|HTTP
case|:
case|case
name|HTTP_LDAP
case|:
if|if
condition|(
name|cfg
operator|.
name|getLoginUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|signinText
init|=
name|cfg
operator|.
name|getLoginText
argument_list|()
operator|==
literal|null
condition|?
name|C
operator|.
name|menuSignIn
argument_list|()
else|:
name|cfg
operator|.
name|getLoginText
argument_list|()
decl_stmt|;
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
name|signinText
argument_list|,
name|cfg
operator|.
name|getLoginUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LDAP
case|:
case|case
name|LDAP_BIND
case|:
case|case
name|CUSTOM_EXTENSION
case|:
if|if
condition|(
name|cfg
operator|.
name|getRegisterUrl
argument_list|()
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|registerText
init|=
name|cfg
operator|.
name|getRegisterText
argument_list|()
operator|==
literal|null
condition|?
name|C
operator|.
name|menuRegister
argument_list|()
else|:
name|cfg
operator|.
name|getRegisterText
argument_list|()
decl_stmt|;
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
name|registerText
argument_list|,
name|cfg
operator|.
name|getRegisterUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|menuRight
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
break|break;
case|case
name|DEVELOPMENT_BECOME_ANY_ACCOUNT
case|:
name|menuRight
operator|.
name|add
argument_list|(
name|anchor
argument_list|(
literal|"Become"
argument_list|,
name|loginRedirect
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|ConfigServerApi
operator|.
name|topMenus
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|TopMenuList
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
name|TopMenuList
name|result
parameter_list|)
block|{
name|List
argument_list|<
name|TopMenu
argument_list|>
name|topMenuExtensions
init|=
name|Natives
operator|.
name|asList
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|TopMenu
name|menu
range|:
name|topMenuExtensions
control|)
block|{
name|LinkMenuBar
name|existingBar
init|=
name|menuBars
operator|.
name|get
argument_list|(
name|menu
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|LinkMenuBar
name|bar
init|=
name|existingBar
operator|!=
literal|null
condition|?
name|existingBar
else|:
operator|new
name|LinkMenuBar
argument_list|()
decl_stmt|;
for|for
control|(
name|TopMenuItem
name|item
range|:
name|Natives
operator|.
name|asList
argument_list|(
name|menu
operator|.
name|getItems
argument_list|()
argument_list|)
control|)
block|{
name|addExtensionLink
argument_list|(
name|bar
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existingBar
operator|==
literal|null
condition|)
block|{
name|menuBars
operator|.
name|put
argument_list|(
name|menu
operator|.
name|getName
argument_list|()
argument_list|,
name|bar
argument_list|)
expr_stmt|;
name|menuLeft
operator|.
name|add
argument_list|(
name|bar
argument_list|,
name|menu
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|applyUserPreferences ()
specifier|public
specifier|static
name|void
name|applyUserPreferences
parameter_list|()
block|{
if|if
condition|(
name|myAccount
operator|!=
literal|null
condition|)
block|{
specifier|final
name|AccountGeneralPreferences
name|p
init|=
name|myAccount
operator|.
name|getGeneralPreferences
argument_list|()
decl_stmt|;
name|CopyableLabel
operator|.
name|setFlashEnabled
argument_list|(
name|p
operator|.
name|isUseFlashClipboard
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|siteHeader
operator|!=
literal|null
condition|)
block|{
name|siteHeader
operator|.
name|setVisible
argument_list|(
name|p
operator|.
name|isShowSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|siteFooter
operator|!=
literal|null
condition|)
block|{
name|siteFooter
operator|.
name|setVisible
argument_list|(
name|p
operator|.
name|isShowSiteHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|FormatUtil
operator|.
name|setPreferences
argument_list|(
name|myAccount
operator|.
name|getGeneralPreferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|whoAmI (boolean canLogOut)
specifier|private
specifier|static
name|void
name|whoAmI
parameter_list|(
name|boolean
name|canLogOut
parameter_list|)
block|{
name|AccountInfo
name|account
init|=
name|getUserAccountInfo
argument_list|()
decl_stmt|;
specifier|final
name|UserPopupPanel
name|userPopup
init|=
operator|new
name|UserPopupPanel
argument_list|(
name|account
argument_list|,
name|canLogOut
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|FlowPanel
name|userSummaryPanel
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
class|class
name|PopupHandler
implements|implements
name|KeyDownHandler
implements|,
name|ClickHandler
block|{
specifier|private
name|void
name|showHidePopup
parameter_list|()
block|{
if|if
condition|(
name|userPopup
operator|.
name|isShowing
argument_list|()
operator|&&
name|userPopup
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|userPopup
operator|.
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|userPopup
operator|.
name|showRelativeTo
argument_list|(
name|userSummaryPanel
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onClick
parameter_list|(
name|ClickEvent
name|event
parameter_list|)
block|{
name|showHidePopup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onKeyDown
parameter_list|(
name|KeyDownEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|.
name|getNativeKeyCode
argument_list|()
operator|==
name|KeyCodes
operator|.
name|KEY_ENTER
condition|)
block|{
name|showHidePopup
argument_list|()
expr_stmt|;
name|event
operator|.
name|preventDefault
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|PopupHandler
name|popupHandler
init|=
operator|new
name|PopupHandler
argument_list|()
decl_stmt|;
specifier|final
name|InlineLabel
name|l
init|=
operator|new
name|InlineLabel
argument_list|(
name|FormatUtil
operator|.
name|name
argument_list|(
name|account
argument_list|)
argument_list|)
decl_stmt|;
name|l
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuBarUserName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|AvatarImage
name|avatar
init|=
operator|new
name|AvatarImage
argument_list|(
name|account
argument_list|,
literal|26
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|avatar
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuBarUserNameAvatar
argument_list|()
argument_list|)
expr_stmt|;
name|userSummaryPanel
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuBarUserNamePanel
argument_list|()
argument_list|)
expr_stmt|;
name|userSummaryPanel
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|userSummaryPanel
operator|.
name|add
argument_list|(
name|avatar
argument_list|)
expr_stmt|;
comment|// "BLACK DOWN-POINTING SMALL TRIANGLE"
name|userSummaryPanel
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
literal|" \u25be"
argument_list|)
argument_list|)
expr_stmt|;
name|userPopup
operator|.
name|addAutoHidePartner
argument_list|(
name|userSummaryPanel
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|FocusPanel
name|fp
init|=
operator|new
name|FocusPanel
argument_list|(
name|userSummaryPanel
argument_list|)
decl_stmt|;
name|fp
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuBarUserNameFocusPanel
argument_list|()
argument_list|)
expr_stmt|;
name|fp
operator|.
name|addKeyDownHandler
argument_list|(
name|popupHandler
argument_list|)
expr_stmt|;
name|fp
operator|.
name|addClickHandler
argument_list|(
name|popupHandler
argument_list|)
expr_stmt|;
name|menuRight
operator|.
name|add
argument_list|(
name|fp
argument_list|)
expr_stmt|;
block|}
DECL|method|anchor (final String text, final String to)
specifier|private
specifier|static
name|Anchor
name|anchor
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|to
parameter_list|)
block|{
specifier|final
name|Anchor
name|a
init|=
operator|new
name|Anchor
argument_list|(
name|text
argument_list|,
name|to
argument_list|)
decl_stmt|;
name|a
operator|.
name|setStyleName
argument_list|(
name|RESOURCES
operator|.
name|css
argument_list|()
operator|.
name|menuItem
argument_list|()
argument_list|)
expr_stmt|;
name|Roles
operator|.
name|getMenuitemRole
argument_list|()
operator|.
name|set
argument_list|(
name|a
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
DECL|method|addLink (final LinkMenuBar m, final String text, final String historyToken)
specifier|private
specifier|static
name|LinkMenuItem
name|addLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|historyToken
parameter_list|)
block|{
name|LinkMenuItem
name|i
init|=
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
name|historyToken
argument_list|)
decl_stmt|;
name|m
operator|.
name|addItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|method|insertLink (final LinkMenuBar m, final String text, final String historyToken, final int beforeIndex)
specifier|private
specifier|static
name|void
name|insertLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|historyToken
parameter_list|,
specifier|final
name|int
name|beforeIndex
parameter_list|)
block|{
name|m
operator|.
name|insertItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
name|historyToken
argument_list|)
argument_list|,
name|beforeIndex
argument_list|)
expr_stmt|;
block|}
DECL|method|addDiffLink (final LinkMenuBar m, final String text, final PatchScreen.TopView tv)
specifier|private
specifier|static
name|void
name|addDiffLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|PatchScreen
operator|.
name|TopView
name|tv
parameter_list|)
block|{
name|m
operator|.
name|addItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|go
parameter_list|()
block|{
if|if
condition|(
name|patchScreen
operator|!=
literal|null
condition|)
block|{
name|patchScreen
operator|.
name|setTopView
argument_list|(
name|tv
argument_list|)
expr_stmt|;
block|}
name|AnchorElement
operator|.
name|as
argument_list|(
name|getElement
argument_list|()
argument_list|)
operator|.
name|blur
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addProjectLink (final LinkMenuBar m, final String text, final String panel)
specifier|private
specifier|static
name|LinkMenuItem
name|addProjectLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|panel
parameter_list|)
block|{
name|LinkMenuItem
name|i
init|=
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|onScreenLoad
parameter_list|(
name|ScreenLoadEvent
name|event
parameter_list|)
block|{
name|Screen
name|screen
init|=
name|event
operator|.
name|getScreen
argument_list|()
decl_stmt|;
name|Project
operator|.
name|NameKey
name|projectKey
decl_stmt|;
if|if
condition|(
name|screen
operator|instanceof
name|ProjectScreen
condition|)
block|{
name|projectKey
operator|=
operator|(
operator|(
name|ProjectScreen
operator|)
name|screen
operator|)
operator|.
name|getProjectKey
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|projectKey
operator|=
name|ProjectScreen
operator|.
name|getSavedKey
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|projectKey
operator|!=
literal|null
condition|)
block|{
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setTargetHistoryToken
argument_list|(
name|Dispatcher
operator|.
name|toProjectAdmin
argument_list|(
name|projectKey
argument_list|,
name|panel
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|onScreenLoad
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|m
operator|.
name|addItem
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|i
return|;
block|}
DECL|method|addDiffLink (final LinkMenuBar m, final String text, final PatchScreen.Type type)
specifier|private
specifier|static
name|void
name|addDiffLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|PatchScreen
operator|.
name|Type
name|type
parameter_list|)
block|{
name|m
operator|.
name|addItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|go
parameter_list|()
block|{
if|if
condition|(
name|patchScreen
operator|!=
literal|null
condition|)
block|{
name|patchScreen
operator|.
name|setTopView
argument_list|(
name|PatchScreen
operator|.
name|TopView
operator|.
name|MAIN
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|patchScreen
operator|.
name|getPatchScreenType
argument_list|()
condition|)
block|{
name|AnchorElement
operator|.
name|as
argument_list|(
name|getElement
argument_list|()
argument_list|)
operator|.
name|blur
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|new
name|PatchLink
argument_list|(
literal|""
argument_list|,
name|type
argument_list|,
name|patchScreen
argument_list|)
operator|.
name|go
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocLink (final LinkMenuBar m, final String text, final String href)
specifier|private
specifier|static
name|void
name|addDocLink
parameter_list|(
specifier|final
name|LinkMenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|href
parameter_list|)
block|{
specifier|final
name|Anchor
name|atag
init|=
name|anchor
argument_list|(
name|text
argument_list|,
name|selfRedirect
argument_list|(
literal|"/Documentation/"
operator|+
name|href
argument_list|)
argument_list|)
decl_stmt|;
name|atag
operator|.
name|setTarget
argument_list|(
literal|"_blank"
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|atag
argument_list|)
expr_stmt|;
block|}
DECL|method|addExtensionLink (LinkMenuBar m, TopMenuItem item)
specifier|private
specifier|static
name|void
name|addExtensionLink
parameter_list|(
name|LinkMenuBar
name|m
parameter_list|,
name|TopMenuItem
name|item
parameter_list|)
block|{
name|Anchor
name|atag
init|=
name|anchor
argument_list|(
name|item
operator|.
name|getName
argument_list|()
argument_list|,
name|isAbsolute
argument_list|(
name|item
operator|.
name|getUrl
argument_list|()
argument_list|)
condition|?
name|item
operator|.
name|getUrl
argument_list|()
else|:
name|selfRedirect
argument_list|(
name|item
operator|.
name|getUrl
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|atag
operator|.
name|setTarget
argument_list|(
name|item
operator|.
name|getTarget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|getId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|atag
operator|.
name|getElement
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|item
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|add
argument_list|(
name|atag
argument_list|)
expr_stmt|;
block|}
DECL|method|isAbsolute (String url)
specifier|private
specifier|static
name|boolean
name|isAbsolute
parameter_list|(
name|String
name|url
parameter_list|)
block|{
return|return
name|url
operator|.
name|matches
argument_list|(
literal|"^https?://.*"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

