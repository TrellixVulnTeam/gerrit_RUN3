begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|changes
operator|.
name|Side
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for LineMapper */
end_comment

begin_class
DECL|class|LineMapperTest
specifier|public
class|class
name|LineMapperTest
block|{
annotation|@
name|Test
DECL|method|testAppendCommon ()
specifier|public
name|void
name|testAppendCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendInsert ()
specifier|public
name|void
name|testAppendInsert
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAppendDelete ()
specifier|public
name|void
name|testAppendDelete
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindInCommon ()
specifier|public
name|void
name|testFindInCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|PARENT
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindAfterCommon ()
specifier|public
name|void
name|testFindAfterCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|PARENT
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindInInsertGap ()
specifier|public
name|void
name|testFindInInsertGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|REVISION
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindAfterInsertGap ()
specifier|public
name|void
name|testFindAfterInsertGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|REVISION
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindInDeleteGap ()
specifier|public
name|void
name|testFindInDeleteGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|PARENT
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFindAfterDeleteGap ()
specifier|public
name|void
name|testFindAfterDeleteGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|Side
operator|.
name|PARENT
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

