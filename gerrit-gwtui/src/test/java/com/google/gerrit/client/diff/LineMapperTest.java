begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.diff
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|diff
operator|.
name|LineMapper
operator|.
name|LineOnOtherInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Unit tests for LineMapper */
end_comment

begin_class
DECL|class|LineMapperTest
specifier|public
class|class
name|LineMapperTest
block|{
annotation|@
name|Test
DECL|method|appendCommon ()
specifier|public
name|void
name|appendCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendInsert ()
specifier|public
name|void
name|appendInsert
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|appendDelete ()
specifier|public
name|void
name|appendDelete
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findInCommon ()
specifier|public
name|void
name|findInCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|9
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|9
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findAfterCommon ()
specifier|public
name|void
name|findAfterCommon
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findInInsertGap ()
specifier|public
name|void
name|findInInsertGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findAfterInsertGap ()
specifier|public
name|void
name|findAfterInsertGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendInsert
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findInDeleteGap ()
specifier|public
name|void
name|findInDeleteGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|findAfterDeleteGap ()
specifier|public
name|void
name|findAfterDeleteGap
parameter_list|()
block|{
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendDelete
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|0
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|A
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|replaceWithInsertInB ()
specifier|public
name|void
name|replaceWithInsertInB
parameter_list|()
block|{
comment|// 0 c c
comment|// 1 a b
comment|// 2 a b
comment|// 3 - b
comment|// 4 - b
comment|// 5 c c
name|LineMapper
name|mapper
init|=
operator|new
name|LineMapper
argument_list|()
decl_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|appendReplace
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mapper
operator|.
name|appendCommon
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mapper
operator|.
name|getLineA
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|mapper
operator|.
name|getLineB
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|3
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LineOnOtherInfo
argument_list|(
literal|2
argument_list|,
literal|false
argument_list|)
argument_list|,
name|mapper
operator|.
name|lineOnOther
argument_list|(
name|DisplaySide
operator|.
name|B
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

