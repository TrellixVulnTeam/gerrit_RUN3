begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2017 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.change
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|change
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|truth
operator|.
name|Truth
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_class
DECL|class|ProjectChangeIdTest
specifier|public
class|class
name|ProjectChangeIdTest
block|{
DECL|field|exception
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|exception
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|emptyStringThrowsException ()
specifier|public
name|void
name|emptyStringThrowsException
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|" is not a valid change identifier"
argument_list|)
expr_stmt|;
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noChangeIdThrowsException ()
specifier|public
name|void
name|noChangeIdThrowsException
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"some/path is not a valid change identifier"
argument_list|)
expr_stmt|;
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"some/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noChangeButProjectIdThrowsException ()
specifier|public
name|void
name|noChangeButProjectIdThrowsException
parameter_list|()
block|{
name|exception
operator|.
name|expect
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|)
expr_stmt|;
name|exception
operator|.
name|expectMessage
argument_list|(
literal|"some/+/path is not a valid change identifier"
argument_list|)
expr_stmt|;
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"some/+/path"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|project ()
specifier|public
name|void
name|project
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123/some/path"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123/some/path/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric Project.NameKey
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123/+/123"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"123"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
comment|// Numeric Project.NameKey with ,edit as part of the name
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123,edit/+/123"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"123,edit"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|noProject ()
specifier|public
name|void
name|noProject
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123/some/path"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123/some/path/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|editSuffix ()
specifier|public
name|void
name|editSuffix
parameter_list|()
block|{
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123,edit/some/path"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123,edit/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"123,edit"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|null
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123,edit/some/path"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123,edit/"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ProjectChangeId
operator|.
name|create
argument_list|(
literal|"test/+/123,edit"
argument_list|)
argument_list|)
operator|.
name|isEqualTo
argument_list|(
name|result
argument_list|(
literal|"test"
argument_list|,
literal|123
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|result (@ullable String project, int id)
specifier|private
specifier|static
name|ProjectChangeId
name|result
parameter_list|(
annotation|@
name|Nullable
name|String
name|project
parameter_list|,
name|int
name|id
parameter_list|)
block|{
return|return
operator|new
name|ProjectChangeId
argument_list|(
name|project
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|project
argument_list|)
argument_list|,
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

