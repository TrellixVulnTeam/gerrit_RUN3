begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountSshKey
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|spec
operator|.
name|InvalidKeySpecException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/** Utilities to support SSH operations. */
end_comment

begin_class
DECL|class|SshUtil
specifier|public
class|class
name|SshUtil
block|{
comment|/**    * Parse a public key into its Java type.    *     * @param key the account key to parse.    * @return the valid public key object.    * @throws InvalidKeySpecException the key supplied is not a valid SSH key.    * @throws NoSuchAlgorithmException the JVM is missing the key algorithm.    * @throws NoSuchProviderException the JVM is missing the provider.    */
DECL|method|parse (final AccountSshKey key)
specifier|public
specifier|static
name|PublicKey
name|parse
parameter_list|(
specifier|final
name|AccountSshKey
name|key
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
throws|,
name|InvalidKeySpecException
throws|,
name|NoSuchProviderException
block|{
try|try
block|{
specifier|final
name|String
name|s
init|=
name|key
operator|.
name|getEncodedKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidKeySpecException
argument_list|(
literal|"No key string"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|bin
init|=
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|Constants
operator|.
name|encodeASCII
argument_list|(
name|s
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Buffer
argument_list|(
name|bin
argument_list|)
operator|.
name|getPublicKey
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidKeySpecException
argument_list|(
literal|"Cannot parse key"
argument_list|,
name|re
argument_list|)
throw|;
block|}
block|}
DECL|field|keys
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|>
name|keys
decl_stmt|;
static|static
block|{
name|keys
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|>
argument_list|(
literal|16
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|AccountSshKey
argument_list|>
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
literal|256
operator|<=
name|size
argument_list|()
return|;
block|}
block|}
expr_stmt|;
block|}
comment|/** Invalidate all cached keys for the given account. */
DECL|method|invalidate (final Account acct)
specifier|public
specifier|static
name|void
name|invalidate
parameter_list|(
specifier|final
name|Account
name|acct
parameter_list|)
block|{
synchronized|synchronized
init|(
name|keys
init|)
block|{
name|keys
operator|.
name|remove
argument_list|(
name|acct
operator|.
name|getPreferredEmail
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Locate keys for the requested account whose email matches the name given. */
DECL|method|keysFor (final SchemaFactory<ReviewDb> rdf, final String username)
specifier|public
specifier|static
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|keysFor
parameter_list|(
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|rdf
parameter_list|,
specifier|final
name|String
name|username
parameter_list|)
block|{
synchronized|synchronized
init|(
name|keys
init|)
block|{
specifier|final
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|r
init|=
name|keys
operator|.
name|get
argument_list|(
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
name|List
argument_list|<
name|AccountSshKey
argument_list|>
name|kl
decl_stmt|;
try|try
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|rdf
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|matches
init|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|byPreferredEmail
argument_list|(
name|username
argument_list|)
operator|.
name|toList
argument_list|()
decl_stmt|;
if|if
condition|(
name|matches
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
expr|<
name|AccountSshKey
operator|>
name|emptyList
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|matches
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
comment|// TODO log accounts with duplicate emails
return|return
name|Collections
operator|.
expr|<
name|AccountSshKey
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|kl
operator|=
name|db
operator|.
name|accountSshKeys
argument_list|()
operator|.
name|valid
argument_list|(
name|matches
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OrmException
name|err
parameter_list|)
block|{
comment|// TODO log database query error
return|return
name|Collections
operator|.
expr|<
name|AccountSshKey
operator|>
name|emptyList
argument_list|()
return|;
block|}
name|kl
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|kl
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|keys
init|)
block|{
name|keys
operator|.
name|put
argument_list|(
name|username
argument_list|,
name|kl
argument_list|)
expr_stmt|;
block|}
return|return
name|kl
return|;
block|}
block|}
end_class

end_unit

