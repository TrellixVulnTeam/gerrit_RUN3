begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectAdminService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|admin
operator|.
name|ProjectDetail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ProjectCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategoryValue
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|BaseServiceImplementation
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|NoSuchEntityException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
DECL|class|ProjectAdminServiceImpl
specifier|public
class|class
name|ProjectAdminServiceImpl
extends|extends
name|BaseServiceImplementation
implements|implements
name|ProjectAdminService
block|{
DECL|field|log
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|server
specifier|private
specifier|final
name|GerritServer
name|server
decl_stmt|;
DECL|method|ProjectAdminServiceImpl (final GerritServer gs)
name|ProjectAdminServiceImpl
parameter_list|(
specifier|final
name|GerritServer
name|gs
parameter_list|)
block|{
name|server
operator|=
name|gs
expr_stmt|;
block|}
DECL|method|ownedProjects (final AsyncCallback<List<Project>> callback)
specifier|public
name|void
name|ownedProjects
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|List
argument_list|<
name|Project
argument_list|>
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|List
argument_list|<
name|Project
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|List
argument_list|<
name|Project
argument_list|>
name|run
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|List
argument_list|<
name|Project
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|isAdministrator
argument_list|(
name|Common
operator|.
name|getAccountId
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|all
argument_list|()
operator|.
name|toList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|myOwnedProjects
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|result
argument_list|,
operator|new
name|Comparator
argument_list|<
name|Project
argument_list|>
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Project
name|a
parameter_list|,
specifier|final
name|Project
name|b
parameter_list|)
block|{
return|return
name|a
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|b
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|projectDetail (final Project.Id projectId, final AsyncCallback<ProjectDetail> callback)
specifier|public
name|void
name|projectDetail
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|ProjectDetail
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|ProjectDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|ProjectDetail
name|run
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
name|assertAmProjectOwner
argument_list|(
name|db
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
specifier|final
name|ProjectCache
operator|.
name|Entry
name|p
init|=
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|ProjectDetail
name|d
init|=
operator|new
name|ProjectDetail
argument_list|()
decl_stmt|;
name|d
operator|.
name|load
argument_list|(
name|db
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|changeProjectDescription (final Project.Id projectId, final String description, final AsyncCallback<VoidResult> callback)
specifier|public
name|void
name|changeProjectDescription
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|VoidResult
name|run
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
name|assertAmProjectOwner
argument_list|(
name|db
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|proj
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
name|proj
operator|.
name|setDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|db
operator|.
name|projects
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|proj
argument_list|)
argument_list|)
expr_stmt|;
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|proj
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ProjectRight
operator|.
name|WILD_PROJECT
operator|.
name|equals
argument_list|(
name|projectId
argument_list|)
condition|)
block|{
comment|// Update git's description file, in case gitweb is being used
comment|//
try|try
block|{
specifier|final
name|Repository
name|e
decl_stmt|;
specifier|final
name|LockFile
name|f
decl_stmt|;
name|e
operator|=
name|server
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|get
argument_list|(
name|proj
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|=
operator|new
name|LockFile
argument_list|(
operator|new
name|File
argument_list|(
name|e
operator|.
name|getDirectory
argument_list|()
argument_list|,
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|f
operator|.
name|lock
argument_list|()
condition|)
block|{
name|String
name|d
init|=
name|proj
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|d
operator|!=
literal|null
condition|)
block|{
name|d
operator|=
name|d
operator|.
name|trim
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
literal|""
expr_stmt|;
block|}
name|f
operator|.
name|write
argument_list|(
name|Constants
operator|.
name|encode
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot update description for "
operator|+
name|proj
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidRepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot update description for "
operator|+
name|proj
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|VoidResult
operator|.
name|INSTANCE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|changeProjectOwner (final Project.Id projectId, final String newOwnerName, final AsyncCallback<VoidResult> callback)
specifier|public
name|void
name|changeProjectOwner
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|,
specifier|final
name|String
name|newOwnerName
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|VoidResult
name|run
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
name|assertAmProjectOwner
argument_list|(
name|db
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|project
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|ProjectRight
operator|.
name|WILD_PROJECT
operator|.
name|equals
argument_list|(
name|projectId
argument_list|)
condition|)
block|{
comment|// This is *not* a good idea to change away from administrators.
comment|//
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|AccountGroup
name|owner
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|newOwnerName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
name|project
operator|.
name|setOwnerGroupId
argument_list|(
name|owner
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|db
operator|.
name|projects
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|project
argument_list|)
argument_list|)
expr_stmt|;
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|project
argument_list|)
expr_stmt|;
return|return
name|VoidResult
operator|.
name|INSTANCE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteRight (final Set<ProjectRight.Key> keys, final AsyncCallback<VoidResult> callback)
specifier|public
name|void
name|deleteRight
parameter_list|(
specifier|final
name|Set
argument_list|<
name|ProjectRight
operator|.
name|Key
argument_list|>
name|keys
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|VoidResult
name|run
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
specifier|final
name|Set
argument_list|<
name|Project
operator|.
name|Id
argument_list|>
name|owned
init|=
name|ids
argument_list|(
name|myOwnedProjects
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|amAdmin
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|ProjectRight
operator|.
name|Key
name|k
range|:
name|keys
control|)
block|{
if|if
condition|(
operator|!
name|owned
operator|.
name|contains
argument_list|(
name|k
operator|.
name|getProjectId
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|amAdmin
operator|==
literal|null
condition|)
block|{
name|amAdmin
operator|=
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|isAdministrator
argument_list|(
name|Common
operator|.
name|getAccountId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|amAdmin
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
for|for
control|(
specifier|final
name|ProjectRight
operator|.
name|Key
name|k
range|:
name|keys
control|)
block|{
specifier|final
name|ProjectRight
name|m
init|=
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|delete
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|k
operator|.
name|getProjectId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|VoidResult
operator|.
name|INSTANCE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addRight (final Project.Id projectId, final ApprovalCategory.Id categoryId, final String groupName, final short min, final short max, final AsyncCallback<ProjectDetail> callback)
specifier|public
name|void
name|addRight
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|,
specifier|final
name|ApprovalCategory
operator|.
name|Id
name|categoryId
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|,
specifier|final
name|short
name|min
parameter_list|,
specifier|final
name|short
name|max
parameter_list|,
specifier|final
name|AsyncCallback
argument_list|<
name|ProjectDetail
argument_list|>
name|callback
parameter_list|)
block|{
name|run
argument_list|(
name|callback
argument_list|,
operator|new
name|Action
argument_list|<
name|ProjectDetail
argument_list|>
argument_list|()
block|{
specifier|public
name|ProjectDetail
name|run
parameter_list|(
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
throws|,
name|Failure
block|{
name|assertAmProjectOwner
argument_list|(
name|db
argument_list|,
name|projectId
argument_list|)
expr_stmt|;
specifier|final
name|Project
name|proj
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|proj
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|ApprovalCategory
name|cat
init|=
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|get
argument_list|(
name|categoryId
argument_list|)
decl_stmt|;
if|if
condition|(
name|cat
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|db
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|(
name|categoryId
argument_list|,
name|min
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|db
operator|.
name|approvalCategoryValues
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|ApprovalCategoryValue
operator|.
name|Id
argument_list|(
name|categoryId
argument_list|,
name|max
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|AccountGroup
name|group
init|=
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|groupName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|ProjectRight
operator|.
name|Key
name|key
init|=
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|projectId
argument_list|,
name|categoryId
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|ProjectRight
name|pr
init|=
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|pr
operator|==
literal|null
condition|)
block|{
name|pr
operator|=
operator|new
name|ProjectRight
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMinValue
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pr
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pr
operator|.
name|setMinValue
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|invalidate
argument_list|(
name|proj
argument_list|)
expr_stmt|;
specifier|final
name|ProjectDetail
name|d
init|=
operator|new
name|ProjectDetail
argument_list|()
decl_stmt|;
name|d
operator|.
name|load
argument_list|(
name|db
argument_list|,
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|assertAmProjectOwner (final ReviewDb db, final Project.Id projectId)
specifier|private
name|void
name|assertAmProjectOwner
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|)
throws|throws
name|Failure
block|{
specifier|final
name|ProjectCache
operator|.
name|Entry
name|p
init|=
name|Common
operator|.
name|getProjectCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|Common
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|isInGroup
argument_list|(
name|me
argument_list|,
name|p
operator|.
name|getProject
argument_list|()
operator|.
name|getOwnerGroupId
argument_list|()
argument_list|)
operator|&&
operator|!
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|isAdministrator
argument_list|(
name|me
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Failure
argument_list|(
operator|new
name|NoSuchEntityException
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|myOwnedProjects (final ReviewDb db)
specifier|private
name|List
argument_list|<
name|Project
argument_list|>
name|myOwnedProjects
parameter_list|(
specifier|final
name|ReviewDb
name|db
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|Account
operator|.
name|Id
name|me
init|=
name|Common
operator|.
name|getAccountId
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Project
argument_list|>
name|own
init|=
operator|new
name|ArrayList
argument_list|<
name|Project
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
range|:
name|Common
operator|.
name|getGroupCache
argument_list|()
operator|.
name|getGroups
argument_list|(
name|me
argument_list|)
control|)
block|{
for|for
control|(
specifier|final
name|Project
name|g
range|:
name|db
operator|.
name|projects
argument_list|()
operator|.
name|ownedByGroup
argument_list|(
name|groupId
argument_list|)
control|)
block|{
name|own
operator|.
name|add
argument_list|(
name|g
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|own
return|;
block|}
DECL|method|ids (final Collection<Project> projectList)
specifier|private
specifier|static
name|Set
argument_list|<
name|Project
operator|.
name|Id
argument_list|>
name|ids
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Project
argument_list|>
name|projectList
parameter_list|)
block|{
specifier|final
name|HashSet
argument_list|<
name|Project
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<
name|Project
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Project
name|project
range|:
name|projectList
control|)
block|{
name|r
operator|.
name|add
argument_list|(
name|project
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
block|}
end_class

end_unit

