begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server.ssh
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|ssh
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|Common
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|SshServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|NamedFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|keyprovider
operator|.
name|FileKeyPairProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|UserAuth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|auth
operator|.
name|UserAuthPublicKey
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * Servlet hosting an SSH daemon on another port. During a standard HTTP GET  * request the servlet returns the hostname and port number back to the client  * in the form<code>${host} ${port}</code>.  *<p>  * Use a Git URL such as<code>ssh://${email}@${host}:${port}/${path}</code>,  * e.g.<code>ssh://sop@google.com@gerrit.com:8010/tools/gerrit.git</code> to  * access the SSH daemon itself.  *<p>  * Versions of Git before 1.5.3 may require setting the username and port  * properties in the user's<code>~/.ssh/config</code> file, and using a host  * alias through a URL such as<code>gerrit-alias:/tools/gerrit.git:  *<pre>  * Host gerrit-alias  *  User sop@google.com  *  Hostname gerrit.com  *  Port 8010  *</pre>  */
end_comment

begin_class
DECL|class|SshServlet
specifier|public
class|class
name|SshServlet
extends|extends
name|HttpServlet
block|{
DECL|field|sshd
specifier|private
specifier|static
name|SshServer
name|sshd
decl_stmt|;
DECL|method|startSshd ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|startSshd
parameter_list|()
throws|throws
name|ServletException
block|{
specifier|final
name|GerritServer
name|srv
decl_stmt|;
try|try
block|{
name|srv
operator|=
name|GerritServer
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Cannot load GerritServer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XsrfException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Cannot load GerritServer"
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|int
name|myPort
init|=
name|Common
operator|.
name|getGerritConfig
argument_list|()
operator|.
name|getSshdPort
argument_list|()
decl_stmt|;
name|sshd
operator|=
name|SshServer
operator|.
name|setUpDefaultServer
argument_list|()
expr_stmt|;
name|sshd
operator|.
name|setPort
argument_list|(
name|myPort
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setKeyPairProvider
argument_list|(
operator|new
name|FileKeyPairProvider
argument_list|(
operator|new
name|String
index|[]
block|{
operator|new
name|File
argument_list|(
name|srv
operator|.
name|getSitePath
argument_list|()
argument_list|,
literal|"ssh_host_rsa_key"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|,
operator|new
name|File
argument_list|(
name|srv
operator|.
name|getSitePath
argument_list|()
argument_list|,
literal|"ssh_host_dsa_key"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setUserAuthFactories
argument_list|(
name|Arrays
operator|.
expr|<
name|NamedFactory
argument_list|<
name|UserAuth
argument_list|>
operator|>
name|asList
argument_list|(
operator|new
name|UserAuthPublicKey
operator|.
name|Factory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setPublickeyAuthenticator
argument_list|(
operator|new
name|DatabasePubKeyAuth
argument_list|()
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setCommandFactory
argument_list|(
operator|new
name|GerritCommandFactory
argument_list|()
argument_list|)
expr_stmt|;
name|sshd
operator|.
name|setShellFactory
argument_list|(
operator|new
name|NoShell
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|sshd
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sshd
operator|=
literal|null
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Cannot start sshd on "
operator|+
name|sshd
operator|.
name|getPort
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|stopSshd ()
specifier|public
specifier|static
specifier|synchronized
name|void
name|stopSshd
parameter_list|()
block|{
if|if
condition|(
name|sshd
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|sshd
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sshd
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSshdPort ()
specifier|public
specifier|static
specifier|synchronized
name|int
name|getSshdPort
parameter_list|()
block|{
return|return
name|sshd
operator|!=
literal|null
condition|?
name|sshd
operator|.
name|getPort
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|init (final ServletConfig config)
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|startSshd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy ()
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|stopSshd
argument_list|()
expr_stmt|;
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doGet (final HttpServletRequest req, final HttpServletResponse rsp)
specifier|protected
name|void
name|doGet
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Expires"
argument_list|,
literal|"Fri, 01 Jan 1980 00:00:00 GMT"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache, must-revalidate"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|port
init|=
name|getSshdPort
argument_list|()
decl_stmt|;
specifier|final
name|String
name|out
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|port
condition|)
block|{
name|out
operator|=
name|req
operator|.
name|getServerName
argument_list|()
operator|+
literal|" "
operator|+
name|port
expr_stmt|;
block|}
else|else
block|{
name|out
operator|=
literal|"NOT_AVAILABLE"
expr_stmt|;
block|}
name|rsp
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setContentType
argument_list|(
literal|"text/plain"
argument_list|)
expr_stmt|;
specifier|final
name|PrintWriter
name|w
init|=
name|rsp
operator|.
name|getWriter
argument_list|()
decl_stmt|;
try|try
block|{
name|w
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

