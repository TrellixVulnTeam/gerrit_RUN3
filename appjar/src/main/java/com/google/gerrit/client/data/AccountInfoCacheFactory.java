begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Efficiently builds a {@link AccountInfoCache}. */
end_comment

begin_class
DECL|class|AccountInfoCacheFactory
specifier|public
class|class
name|AccountInfoCacheFactory
block|{
DECL|field|db
specifier|private
specifier|final
name|ReviewDb
name|db
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|HashMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Account
argument_list|>
name|cache
decl_stmt|;
DECL|field|toFetch
specifier|private
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|toFetch
decl_stmt|;
DECL|method|AccountInfoCacheFactory (final ReviewDb schema)
specifier|public
name|AccountInfoCacheFactory
parameter_list|(
specifier|final
name|ReviewDb
name|schema
parameter_list|)
block|{
name|db
operator|=
name|schema
expr_stmt|;
name|cache
operator|=
operator|new
name|HashMap
argument_list|<
name|Account
operator|.
name|Id
argument_list|,
name|Account
argument_list|>
argument_list|()
expr_stmt|;
name|toFetch
operator|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|/**    * Indicate an account will be needed later on.    *<p>    * This method permits batch fetching from the data store by building a list    * of Account.Ids which need to be obtained during the next {@link #fetch}.    *     * @param id identity that will be needed in the future; may be null.    */
DECL|method|want (final Account.Id id)
specifier|public
name|void
name|want
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
block|{
if|if
condition|(
name|id
operator|!=
literal|null
operator|&&
operator|!
name|cache
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|toFetch
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Indicate one or more accounts will be needed later on. */
DECL|method|want (final Collection<Account.Id> ids)
specifier|public
name|void
name|want
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|ids
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|id
range|:
name|ids
control|)
block|{
name|want
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Fetch all accounts previously queued by {@link #want(Account.Id)} */
DECL|method|fetch ()
specifier|public
name|void
name|fetch
parameter_list|()
throws|throws
name|OrmException
block|{
if|if
condition|(
operator|!
name|toFetch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Account
name|a
range|:
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|toFetch
argument_list|)
control|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|a
operator|.
name|getId
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
name|toFetch
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Load one account entity, reusing a cached instance if already loaded. */
DECL|method|get (final Account.Id id)
specifier|public
name|Account
name|get
parameter_list|(
specifier|final
name|Account
operator|.
name|Id
name|id
parameter_list|)
throws|throws
name|OrmException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Account
name|a
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|toFetch
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|a
operator|=
name|db
operator|.
name|accounts
argument_list|()
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|toFetch
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|fetch
argument_list|()
expr_stmt|;
name|a
operator|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|a
return|;
block|}
comment|/**    * Create an AccountInfoCache with the currently loaded Account entities.    *<p>    * Implicitly invokes {@link #fetch()} prior to creating the cache, ensuring    * any previously enqueued entities will be included in the result.    * */
DECL|method|create ()
specifier|public
name|AccountInfoCache
name|create
parameter_list|()
throws|throws
name|OrmException
block|{
name|fetch
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|AccountInfo
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<
name|AccountInfo
argument_list|>
argument_list|(
name|cache
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Account
name|a
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|AccountInfo
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|AccountInfoCache
argument_list|(
name|r
argument_list|)
return|;
block|}
block|}
end_class

end_unit

