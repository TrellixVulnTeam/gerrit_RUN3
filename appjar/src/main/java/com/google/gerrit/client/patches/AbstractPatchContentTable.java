begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|FormatUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
operator|.
name|Util
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|AccountInfoCache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Patch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ComplexDisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|FancyFlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|InlineLabel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|AbstractPatchContentTable
specifier|public
specifier|abstract
class|class
name|AbstractPatchContentTable
extends|extends
name|FancyFlexTable
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|AGE
specifier|private
specifier|static
specifier|final
name|long
name|AGE
init|=
literal|7
operator|*
literal|24
operator|*
literal|60
operator|*
literal|60
operator|*
literal|1000L
decl_stmt|;
DECL|field|accountCache
specifier|protected
name|AccountInfoCache
name|accountCache
init|=
name|AccountInfoCache
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|field|patchKey
specifier|protected
name|Patch
operator|.
name|Key
name|patchKey
decl_stmt|;
DECL|field|aged
specifier|private
specifier|final
name|Timestamp
name|aged
init|=
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|AGE
argument_list|)
decl_stmt|;
DECL|method|AbstractPatchContentTable ()
specifier|protected
name|AbstractPatchContentTable
parameter_list|()
block|{
name|table
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-PatchContentTable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFlexTable ()
specifier|protected
name|MyFlexTable
name|createFlexTable
parameter_list|()
block|{
return|return
operator|new
name|DoubleClickFlexTable
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getRowItemKey (final Object item)
specifier|protected
name|Object
name|getRowItemKey
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/** Invoked when the user clicks on a table cell. */
DECL|method|onCellDoubleClick (int row, int column)
specifier|protected
specifier|abstract
name|void
name|onCellDoubleClick
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|)
function_decl|;
DECL|method|newComment (final int line, final short side)
specifier|protected
name|PatchLineComment
name|newComment
parameter_list|(
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|short
name|side
parameter_list|)
block|{
specifier|final
name|PatchLineComment
name|r
init|=
operator|new
name|PatchLineComment
argument_list|(
operator|new
name|PatchLineComment
operator|.
name|Key
argument_list|(
name|patchKey
argument_list|,
literal|"blargh"
argument_list|)
argument_list|,
name|line
argument_list|,
name|Gerrit
operator|.
name|getUserAccount
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|r
operator|.
name|setSide
argument_list|(
name|side
argument_list|)
expr_stmt|;
name|r
operator|.
name|setMessage
argument_list|(
literal|""
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
DECL|method|createCommentEditor (final int row, final int column, final int line, final short side)
specifier|protected
name|void
name|createCommentEditor
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|,
specifier|final
name|int
name|line
parameter_list|,
specifier|final
name|short
name|side
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|Gerrit
operator|.
name|doSignIn
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|VoidResult
name|result
parameter_list|)
block|{
name|createCommentEditor
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|line
argument_list|,
name|side
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
name|Throwable
name|caught
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|PatchLineComment
name|newComment
init|=
name|newComment
argument_list|(
name|line
argument_list|,
name|side
argument_list|)
decl_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
operator|new
name|CommentEditorPanel
argument_list|(
name|newComment
argument_list|)
block|{
annotation|@
name|Override
name|void
name|onCancel
parameter_list|()
block|{
specifier|final
name|int
name|n
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|column
operator|<
name|table
operator|.
name|getCellCount
argument_list|(
name|i
argument_list|)
operator|&&
name|table
operator|.
name|getWidget
argument_list|(
name|i
argument_list|,
name|column
argument_list|)
operator|==
name|this
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onOpenItem (final Object item)
specifier|protected
name|void
name|onOpenItem
parameter_list|(
specifier|final
name|Object
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|instanceof
name|CommentList
condition|)
block|{
for|for
control|(
specifier|final
name|ComplexDisclosurePanel
name|p
range|:
operator|(
operator|(
name|CommentList
operator|)
name|item
operator|)
operator|.
name|panels
control|)
block|{
name|p
operator|.
name|setOpen
argument_list|(
operator|!
name|p
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|setAccountInfoCache (final AccountInfoCache aic)
specifier|public
name|void
name|setAccountInfoCache
parameter_list|(
specifier|final
name|AccountInfoCache
name|aic
parameter_list|)
block|{
assert|assert
name|aic
operator|!=
literal|null
assert|;
name|accountCache
operator|=
name|aic
expr_stmt|;
block|}
DECL|method|setPatchKey (final Patch.Key id)
specifier|public
name|void
name|setPatchKey
parameter_list|(
specifier|final
name|Patch
operator|.
name|Key
name|id
parameter_list|)
block|{
name|patchKey
operator|=
name|id
expr_stmt|;
block|}
DECL|method|bindComment (final int row, final int col, final PatchLineComment line, final boolean isLast)
specifier|protected
name|void
name|bindComment
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|PatchLineComment
name|line
parameter_list|,
specifier|final
name|boolean
name|isLast
parameter_list|)
block|{
specifier|final
name|LineCommentPanel
name|mp
init|=
operator|new
name|LineCommentPanel
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|String
name|panelHeader
decl_stmt|;
specifier|final
name|ComplexDisclosurePanel
name|panel
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|getAuthor
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|panelHeader
operator|=
name|FormatUtil
operator|.
name|nameEmail
argument_list|(
name|accountCache
operator|.
name|get
argument_list|(
name|line
operator|.
name|getAuthor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|panelHeader
operator|=
name|Util
operator|.
name|C
operator|.
name|messageNoAuthor
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isLast
condition|)
block|{
name|mp
operator|.
name|isRecent
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// TODO Instead of opening messages by strict age, do it by "unread"?
name|mp
operator|.
name|isRecent
operator|=
name|line
operator|.
name|getWrittenOn
argument_list|()
operator|.
name|after
argument_list|(
name|aged
argument_list|)
expr_stmt|;
block|}
name|panel
operator|=
operator|new
name|ComplexDisclosurePanel
argument_list|(
name|panelHeader
argument_list|,
name|mp
operator|.
name|isRecent
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getHeader
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|InlineLabel
argument_list|(
name|Util
operator|.
name|M
operator|.
name|messageWrittenOn
argument_list|(
name|FormatUtil
operator|.
name|mediumFormat
argument_list|(
name|line
operator|.
name|getWrittenOn
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|getStatus
argument_list|()
operator|==
name|PatchLineComment
operator|.
name|Status
operator|.
name|DRAFT
condition|)
block|{
specifier|final
name|InlineLabel
name|d
init|=
operator|new
name|InlineLabel
argument_list|(
name|PatchUtil
operator|.
name|C
operator|.
name|draft
argument_list|()
argument_list|)
decl_stmt|;
name|d
operator|.
name|setStyleName
argument_list|(
literal|"CommentIsDraftFlag"
argument_list|)
expr_stmt|;
name|panel
operator|.
name|getHeader
argument_list|()
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
name|panel
operator|.
name|setContent
argument_list|(
name|mp
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|panel
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
literal|"Comment"
argument_list|)
expr_stmt|;
name|CommentList
name|l
init|=
operator|(
name|CommentList
operator|)
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
block|{
name|l
operator|=
operator|new
name|CommentList
argument_list|()
expr_stmt|;
name|setRowItem
argument_list|(
name|row
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|comments
operator|.
name|add
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|l
operator|.
name|panels
operator|.
name|add
argument_list|(
name|panel
argument_list|)
expr_stmt|;
block|}
DECL|class|CommentList
specifier|protected
specifier|static
class|class
name|CommentList
block|{
DECL|field|comments
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchLineComment
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|panels
specifier|final
name|List
argument_list|<
name|ComplexDisclosurePanel
argument_list|>
name|panels
init|=
operator|new
name|ArrayList
argument_list|<
name|ComplexDisclosurePanel
argument_list|>
argument_list|()
decl_stmt|;
block|}
DECL|class|DoubleClickFlexTable
specifier|protected
class|class
name|DoubleClickFlexTable
extends|extends
name|MyFlexTable
block|{
DECL|method|DoubleClickFlexTable ()
specifier|public
name|DoubleClickFlexTable
parameter_list|()
block|{
name|sinkEvents
argument_list|(
name|Event
operator|.
name|ONDBLCLICK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onBrowserEvent (final Event event)
specifier|public
name|void
name|onBrowserEvent
parameter_list|(
specifier|final
name|Event
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|DOM
operator|.
name|eventGetType
argument_list|(
name|event
argument_list|)
condition|)
block|{
case|case
name|Event
operator|.
name|ONDBLCLICK
case|:
block|{
comment|// Find out which cell was actually clicked.
name|Element
name|td
init|=
name|getEventTargetCell
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|td
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Element
name|tr
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|td
argument_list|)
decl_stmt|;
name|Element
name|body
init|=
name|DOM
operator|.
name|getParent
argument_list|(
name|tr
argument_list|)
decl_stmt|;
name|int
name|row
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|body
argument_list|,
name|tr
argument_list|)
decl_stmt|;
name|int
name|column
init|=
name|DOM
operator|.
name|getChildIndex
argument_list|(
name|tr
argument_list|,
name|td
argument_list|)
decl_stmt|;
name|onCellDoubleClick
argument_list|(
name|row
argument_list|,
name|column
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|super
operator|.
name|onBrowserEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

