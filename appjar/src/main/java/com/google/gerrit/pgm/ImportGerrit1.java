begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroup
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|AccountGroupMember
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ApprovalCategory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ProjectRight
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|InvalidRepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|git
operator|.
name|PatchSetImporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|GerritServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|XsrfException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|JdbcSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|spearce
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|PreparedStatement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Imports data from Gerrit 1 into Gerrit 2.  *<p>  * The tool assumes that<code>devutil/import_gerrit1.sql</code> has already  * been executed on this schema. All existing ProjectRight entities are wiped  * from the database and generated from scratch.  *<p>  * The tool requires Gerrit 1 tables (<code>gerrit1.$table_name</code>) through  * the same database connection as the ReviewDb schema is on.  */
end_comment

begin_class
DECL|class|ImportGerrit1
specifier|public
class|class
name|ImportGerrit1
block|{
DECL|field|gs
specifier|private
specifier|static
name|GerritServer
name|gs
decl_stmt|;
DECL|field|db
specifier|private
specifier|static
name|ReviewDb
name|db
decl_stmt|;
DECL|field|sql
specifier|private
specifier|static
name|Connection
name|sql
decl_stmt|;
DECL|field|verifyCategory
specifier|private
specifier|static
name|ApprovalCategory
name|verifyCategory
decl_stmt|;
DECL|field|approveCategory
specifier|private
specifier|static
name|ApprovalCategory
name|approveCategory
decl_stmt|;
DECL|field|submitCategory
specifier|private
specifier|static
name|ApprovalCategory
name|submitCategory
decl_stmt|;
DECL|method|main (final String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|OrmException
throws|,
name|XsrfException
throws|,
name|SQLException
throws|,
name|IOException
throws|,
name|InvalidRepositoryException
block|{
specifier|final
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|()
decl_stmt|;
name|gs
operator|=
name|GerritServer
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|db
operator|=
name|gs
operator|.
name|getDatabase
argument_list|()
operator|.
name|open
argument_list|()
expr_stmt|;
name|sql
operator|=
operator|(
operator|(
name|JdbcSchema
operator|)
name|db
operator|)
operator|.
name|getConnection
argument_list|()
expr_stmt|;
try|try
block|{
name|verifyCategory
operator|=
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|byName
argument_list|(
literal|"Verified"
argument_list|)
expr_stmt|;
name|approveCategory
operator|=
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|byName
argument_list|(
literal|"Code Review"
argument_list|)
expr_stmt|;
name|submitCategory
operator|=
name|db
operator|.
name|approvalCategories
argument_list|()
operator|.
name|byName
argument_list|(
literal|"Submit"
argument_list|)
expr_stmt|;
specifier|final
name|Statement
name|query
init|=
name|sql
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|java
operator|.
name|sql
operator|.
name|ResultSet
name|srcs
decl_stmt|;
comment|// Convert the approval right data from projects.
comment|//
name|pm
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
literal|"Import project rights"
argument_list|,
name|ProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|query
operator|.
name|executeUpdate
argument_list|(
literal|"DELETE FROM project_rights"
argument_list|)
expr_stmt|;
name|insertApprovalWildCard
argument_list|()
expr_stmt|;
name|srcs
operator|=
name|query
operator|.
name|executeQuery
argument_list|(
literal|"SELECT p.project_id, r.ar_key"
operator|+
literal|" FROM gerrit1.project_code_reviews r, projects p"
operator|+
literal|" WHERE p.project_id = r.project_id"
argument_list|)
expr_stmt|;
while|while
condition|(
name|srcs
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|Project
operator|.
name|Id
name|projectId
init|=
operator|new
name|Project
operator|.
name|Id
argument_list|(
name|srcs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|arKey
init|=
name|srcs
operator|.
name|getString
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|doImport
argument_list|(
name|projectId
argument_list|,
name|arKey
argument_list|)
expr_stmt|;
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|srcs
operator|.
name|close
argument_list|()
expr_stmt|;
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
comment|// Rebuild the cached PatchSet information directly from Git.
comment|// There's some oddities in the Gerrit 1 data that we got from
comment|// Google App Engine's data store; the quickest way to fix it
comment|// is to just recache the data from Git.
comment|//
name|srcs
operator|=
name|query
operator|.
name|executeQuery
argument_list|(
literal|"SELECT change_id,patch_set_id FROM patch_sets"
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
name|psToDo
init|=
operator|new
name|ArrayList
argument_list|<
name|PatchSet
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|srcs
operator|.
name|next
argument_list|()
condition|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|changeId
init|=
operator|new
name|Change
operator|.
name|Id
argument_list|(
name|srcs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
init|=
operator|new
name|PatchSet
operator|.
name|Id
argument_list|(
name|changeId
argument_list|,
name|srcs
operator|.
name|getInt
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|psToDo
operator|.
name|add
argument_list|(
name|psId
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|close
argument_list|()
expr_stmt|;
name|pm
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
literal|"Import patch sets"
argument_list|,
name|psToDo
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|PatchSet
operator|.
name|Id
name|psId
range|:
name|psToDo
control|)
block|{
specifier|final
name|Change
name|c
init|=
name|db
operator|.
name|changes
argument_list|()
operator|.
name|get
argument_list|(
name|psId
operator|.
name|getParentKey
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|PatchSet
name|ps
init|=
name|db
operator|.
name|patchSets
argument_list|()
operator|.
name|get
argument_list|(
name|psId
argument_list|)
decl_stmt|;
specifier|final
name|String
name|projectName
init|=
name|c
operator|.
name|getDest
argument_list|()
operator|.
name|getParentKey
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Repository
name|repo
init|=
name|gs
operator|.
name|getRepositoryCache
argument_list|()
operator|.
name|get
argument_list|(
name|projectName
argument_list|)
decl_stmt|;
specifier|final
name|RevWalk
name|rw
init|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|RevCommit
name|src
init|=
name|rw
operator|.
name|parseCommit
argument_list|(
name|ObjectId
operator|.
name|fromString
argument_list|(
name|ps
operator|.
name|getRevision
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|PatchSetImporter
argument_list|(
name|db
argument_list|,
name|repo
argument_list|,
name|src
argument_list|,
name|ps
argument_list|,
literal|false
argument_list|)
operator|.
name|run
argument_list|()
expr_stmt|;
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|insertApprovalWildCard ()
specifier|private
specifier|static
name|void
name|insertApprovalWildCard
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|ProjectRight
operator|.
name|Key
name|key
init|=
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|ProjectRight
operator|.
name|WILD_PROJECT
argument_list|,
name|approveCategory
operator|.
name|getId
argument_list|()
argument_list|,
name|db
operator|.
name|systemConfig
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SystemConfig
operator|.
name|Key
argument_list|()
argument_list|)
operator|.
name|registeredGroupId
argument_list|)
decl_stmt|;
specifier|final
name|ProjectRight
name|pr
init|=
operator|new
name|ProjectRight
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|pr
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doImport (final Project.Id projectId, final String arKey)
specifier|private
specifier|static
name|void
name|doImport
parameter_list|(
specifier|final
name|Project
operator|.
name|Id
name|projectId
parameter_list|,
specifier|final
name|String
name|arKey
parameter_list|)
throws|throws
name|OrmException
throws|,
name|SQLException
block|{
specifier|final
name|int
name|arId
init|=
name|findId
argument_list|(
name|arKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|arId
operator|<
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|Project
name|proj
init|=
name|db
operator|.
name|projects
argument_list|()
operator|.
name|get
argument_list|(
name|projectId
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|approverg
init|=
name|groups
argument_list|(
name|arId
argument_list|,
literal|"approver"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|verifierg
init|=
name|groups
argument_list|(
name|arId
argument_list|,
literal|"verifier"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|submitterg
init|=
name|groups
argument_list|(
name|arId
argument_list|,
literal|"submitter"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|approveru
init|=
name|users
argument_list|(
name|arId
argument_list|,
literal|"approver"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|verifieru
init|=
name|users
argument_list|(
name|arId
argument_list|,
literal|"verifier"
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|submitteru
init|=
name|users
argument_list|(
name|arId
argument_list|,
literal|"submitter"
argument_list|)
decl_stmt|;
name|importCat
argument_list|(
name|proj
argument_list|,
literal|"approvers"
argument_list|,
name|approveCategory
argument_list|,
name|approverg
argument_list|,
name|approveru
argument_list|)
expr_stmt|;
name|importCat
argument_list|(
name|proj
argument_list|,
literal|"verifiers"
argument_list|,
name|verifyCategory
argument_list|,
name|verifierg
argument_list|,
name|verifieru
argument_list|)
expr_stmt|;
name|importCat
argument_list|(
name|proj
argument_list|,
literal|"submitters"
argument_list|,
name|submitCategory
argument_list|,
name|submitterg
argument_list|,
name|submitteru
argument_list|)
expr_stmt|;
block|}
DECL|method|importCat (final Project proj, final String type, final ApprovalCategory category, final Set<AccountGroup.Id> groups, final Set<Account.Id> users)
specifier|private
specifier|static
name|void
name|importCat
parameter_list|(
specifier|final
name|Project
name|proj
parameter_list|,
specifier|final
name|String
name|type
parameter_list|,
specifier|final
name|ApprovalCategory
name|category
parameter_list|,
specifier|final
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|groups
parameter_list|,
specifier|final
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|users
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|needGroup
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|(
name|users
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
range|:
name|groups
control|)
block|{
name|insertRight
argument_list|(
name|proj
argument_list|,
name|category
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|i
init|=
name|needGroup
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|gs
operator|.
name|getGroupCache
argument_list|()
operator|.
name|isInGroup
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|,
name|groupId
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|needGroup
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
init|=
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextAccountGroupId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AccountGroup
name|group
init|=
operator|new
name|AccountGroup
argument_list|(
operator|new
name|AccountGroup
operator|.
name|NameKey
argument_list|(
name|shortName
argument_list|(
name|proj
argument_list|)
operator|+
literal|"_"
operator|+
name|proj
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
operator|+
literal|"-"
operator|+
name|type
argument_list|)
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
name|group
operator|.
name|setOwnerGroupId
argument_list|(
name|proj
operator|.
name|getOwnerGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|group
operator|.
name|setDescription
argument_list|(
name|proj
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|type
argument_list|)
expr_stmt|;
name|db
operator|.
name|accountGroups
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Account
operator|.
name|Id
name|aId
range|:
name|needGroup
control|)
block|{
name|db
operator|.
name|accountGroupMembers
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|AccountGroupMember
argument_list|(
operator|new
name|AccountGroupMember
operator|.
name|Key
argument_list|(
name|aId
argument_list|,
name|groupId
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|insertRight
argument_list|(
name|proj
argument_list|,
name|category
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|insertRight (final Project proj, final ApprovalCategory category, final AccountGroup.Id groupId)
specifier|private
specifier|static
name|void
name|insertRight
parameter_list|(
specifier|final
name|Project
name|proj
parameter_list|,
specifier|final
name|ApprovalCategory
name|category
parameter_list|,
specifier|final
name|AccountGroup
operator|.
name|Id
name|groupId
parameter_list|)
throws|throws
name|OrmException
block|{
specifier|final
name|ProjectRight
operator|.
name|Key
name|key
init|=
operator|new
name|ProjectRight
operator|.
name|Key
argument_list|(
name|proj
operator|.
name|getId
argument_list|()
argument_list|,
name|category
operator|.
name|getId
argument_list|()
argument_list|,
name|groupId
argument_list|)
decl_stmt|;
specifier|final
name|ProjectRight
name|pr
init|=
operator|new
name|ProjectRight
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|category
operator|==
name|approveCategory
condition|)
block|{
name|pr
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|2
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|category
operator|==
name|verifyCategory
condition|)
block|{
name|pr
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|category
operator|==
name|submitCategory
condition|)
block|{
name|pr
operator|.
name|setMinValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|pr
operator|.
name|setMaxValue
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|OrmException
argument_list|(
literal|"Cannot import category "
operator|+
name|category
operator|.
name|getId
argument_list|()
argument_list|)
throw|;
block|}
name|db
operator|.
name|projectRights
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|pr
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|shortName (final Project proj)
specifier|private
specifier|static
name|String
name|shortName
parameter_list|(
specifier|final
name|Project
name|proj
parameter_list|)
block|{
specifier|final
name|String
name|n
init|=
name|proj
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|s
init|=
name|n
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
return|return
literal|0
operator|<
name|s
condition|?
name|n
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
else|:
name|n
return|;
block|}
DECL|method|groups (final int arId, final String type)
specifier|private
specifier|static
name|Set
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|groups
parameter_list|(
specifier|final
name|int
name|arId
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|sql
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT g.group_id FROM account_groups g,"
operator|+
literal|" gerrit1.approval_right_groups s, gerrit1.account_groups o"
operator|+
literal|" WHERE s.ar_id = ? AND s.type = ?"
operator|+
literal|" AND o.gae_key = s.group_key AND (g.name = o.name"
operator|+
literal|" OR (g.name = 'Administrators' AND o.name = 'admin'))"
argument_list|)
decl_stmt|;
try|try
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|arId
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|type
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|sql
operator|.
name|ResultSet
name|rs
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<
name|AccountGroup
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|AccountGroup
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|users (final int arId, final String type)
specifier|private
specifier|static
name|Set
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|users
parameter_list|(
specifier|final
name|int
name|arId
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|sql
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT a.account_id FROM accounts a,"
operator|+
literal|" gerrit1.approval_right_users s"
operator|+
literal|" WHERE s.ar_id = ? AND s.type = ?"
operator|+
literal|" AND a.preferred_email = s.email"
argument_list|)
decl_stmt|;
try|try
block|{
name|ps
operator|.
name|setInt
argument_list|(
literal|1
argument_list|,
name|arId
argument_list|)
expr_stmt|;
name|ps
operator|.
name|setString
argument_list|(
literal|2
argument_list|,
name|type
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|sql
operator|.
name|ResultSet
name|rs
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
name|r
init|=
operator|new
name|HashSet
argument_list|<
name|Account
operator|.
name|Id
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findId (final String arKey)
specifier|private
specifier|static
name|int
name|findId
parameter_list|(
specifier|final
name|String
name|arKey
parameter_list|)
throws|throws
name|SQLException
block|{
specifier|final
name|PreparedStatement
name|ps
init|=
name|sql
operator|.
name|prepareStatement
argument_list|(
literal|"SELECT ar_id FROM gerrit1.approval_rights"
operator|+
literal|" WHERE gae_key=?"
argument_list|)
decl_stmt|;
try|try
block|{
name|ps
operator|.
name|setString
argument_list|(
literal|1
argument_list|,
name|arKey
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|sql
operator|.
name|ResultSet
name|rs
init|=
name|ps
operator|.
name|executeQuery
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|rs
operator|.
name|next
argument_list|()
condition|)
block|{
return|return
name|rs
operator|.
name|getInt
argument_list|(
literal|1
argument_list|)
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
finally|finally
block|{
name|rs
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|ps
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

