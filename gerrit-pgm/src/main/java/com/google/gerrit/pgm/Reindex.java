begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|IndexVersionCheck
operator|.
name|SCHEMA_VERSIONS
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|IndexVersionCheck
operator|.
name|gerritIndexConfig
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|LuceneChangeIndex
operator|.
name|LUCENE_VERSION
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DataSourceProvider
operator|.
name|Context
operator|.
name|MULTI_USER
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ArrayListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AsyncFunction
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Futures
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningScheduledExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|events
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|extensions
operator|.
name|registration
operator|.
name|DynamicSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lucene
operator|.
name|LuceneIndexModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|SiteProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|client
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|server
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|CacheRemovalListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|cache
operator|.
name|h2
operator|.
name|DefaultCacheFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|MultiProgressMonitor
operator|.
name|Task
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|ChangeIndexer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexExecutor
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListCacheImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|patch
operator|.
name|PatchListLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|query
operator|.
name|change
operator|.
name|ChangeData
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|server
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Key
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|TypeLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|diff
operator|.
name|DiffFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectInserter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Ref
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|TextProgressMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|revwalk
operator|.
name|RevWalk
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|storage
operator|.
name|file
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|FS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|io
operator|.
name|DisabledOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_class
DECL|class|Reindex
specifier|public
class|class
name|Reindex
extends|extends
name|SiteProgram
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Reindex
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--threads"
argument_list|,
name|usage
operator|=
literal|"Number of threads to use for indexing"
argument_list|)
DECL|field|threads
specifier|private
name|int
name|threads
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--dry-run"
argument_list|,
name|usage
operator|=
literal|"Dry run: don't write anything to index"
argument_list|)
DECL|field|dryRun
specifier|private
name|boolean
name|dryRun
decl_stmt|;
DECL|field|dbInjector
specifier|private
name|Injector
name|dbInjector
decl_stmt|;
DECL|field|sysInjector
specifier|private
name|Injector
name|sysInjector
decl_stmt|;
DECL|field|sitePaths
specifier|private
name|SitePaths
name|sitePaths
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|mustHaveValidSite
argument_list|()
expr_stmt|;
name|dbInjector
operator|=
name|createDbInjector
argument_list|(
name|MULTI_USER
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|IndexModule
operator|.
name|isEnabled
argument_list|(
name|dbInjector
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Secondary index not enabled"
argument_list|)
throw|;
block|}
name|LifecycleManager
name|dbManager
init|=
operator|new
name|LifecycleManager
argument_list|()
decl_stmt|;
name|dbManager
operator|.
name|add
argument_list|(
name|dbInjector
argument_list|)
expr_stmt|;
name|dbManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|sitePaths
operator|=
name|dbInjector
operator|.
name|getInstance
argument_list|(
name|SitePaths
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// Delete before any index may be created depending on this data.
name|deleteAll
argument_list|()
expr_stmt|;
name|sysInjector
operator|=
name|createSysInjector
argument_list|()
expr_stmt|;
name|LifecycleManager
name|sysManager
init|=
operator|new
name|LifecycleManager
argument_list|()
decl_stmt|;
name|sysManager
operator|.
name|add
argument_list|(
name|sysInjector
argument_list|)
expr_stmt|;
name|sysManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|result
init|=
name|indexAll
argument_list|()
decl_stmt|;
name|writeVersion
argument_list|()
expr_stmt|;
name|sysManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|dbManager
operator|.
name|stop
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|createSysInjector ()
specifier|private
name|Injector
name|createSysInjector
parameter_list|()
block|{
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
name|PatchListCacheImpl
operator|.
name|module
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|LuceneIndexModule
argument_list|(
literal|false
argument_list|,
name|threads
argument_list|,
name|dryRun
argument_list|)
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|ReviewDbModule
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
comment|// Plugins are not loaded and we're just running through each change
comment|// once, so don't worry about cache removal.
name|bind
argument_list|(
operator|new
name|TypeLiteral
argument_list|<
name|DynamicSet
argument_list|<
name|CacheRemovalListener
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
operator|.
name|toInstance
argument_list|(
name|DynamicSet
operator|.
expr|<
name|CacheRemovalListener
operator|>
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|install
argument_list|(
operator|new
name|DefaultCacheFactory
operator|.
name|Module
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dbInjector
operator|.
name|createChildInjector
argument_list|(
name|modules
argument_list|)
return|;
block|}
DECL|class|ReviewDbModule
specifier|private
class|class
name|ReviewDbModule
extends|extends
name|LifecycleModule
block|{
annotation|@
name|Override
DECL|method|configure ()
specifier|protected
name|void
name|configure
parameter_list|()
block|{
specifier|final
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
init|=
name|dbInjector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
operator|new
name|TypeLiteral
argument_list|<
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
argument_list|>
argument_list|()
block|{}
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ReviewDb
argument_list|>
name|dbs
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
name|Lists
operator|.
expr|<
name|ReviewDb
operator|>
name|newArrayListWithCapacity
argument_list|(
name|threads
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ThreadLocal
argument_list|<
name|ReviewDb
argument_list|>
name|localDb
init|=
operator|new
name|ThreadLocal
argument_list|<
name|ReviewDb
argument_list|>
argument_list|()
decl_stmt|;
name|bind
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
operator|.
name|toProvider
argument_list|(
operator|new
name|Provider
argument_list|<
name|ReviewDb
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ReviewDb
name|get
parameter_list|()
block|{
name|ReviewDb
name|db
init|=
name|localDb
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|db
operator|=
name|schema
operator|.
name|open
argument_list|()
expr_stmt|;
name|dbs
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|localDb
operator|.
name|set
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OrmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"unable to open ReviewDb"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|db
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|listener
argument_list|()
operator|.
name|toInstance
argument_list|(
operator|new
name|LifecycleListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
block|{
comment|// Do nothing.
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
block|{
for|for
control|(
name|ReviewDb
name|db
range|:
name|dbs
control|)
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteAll ()
specifier|private
name|void
name|deleteAll
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|dryRun
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|index
range|:
name|SCHEMA_VERSIONS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|sitePaths
operator|.
name|index_dir
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|String
name|name
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|indexAll ()
specifier|private
name|int
name|indexAll
parameter_list|()
throws|throws
name|Exception
block|{
name|ReviewDb
name|db
init|=
name|sysInjector
operator|.
name|getInstance
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
decl_stmt|;
name|ListeningScheduledExecutorService
name|executor
init|=
name|sysInjector
operator|.
name|getInstance
argument_list|(
name|Key
operator|.
name|get
argument_list|(
name|ListeningScheduledExecutorService
operator|.
name|class
argument_list|,
name|IndexExecutor
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|ProgressMonitor
name|pm
init|=
operator|new
name|TextProgressMonitor
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
decl_stmt|;
name|pm
operator|.
name|start
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|pm
operator|.
name|beginTask
argument_list|(
literal|"Collecting projects"
argument_list|,
name|ProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Project
operator|.
name|NameKey
argument_list|>
name|projects
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|Change
name|change
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
if|if
condition|(
name|projects
operator|.
name|add
argument_list|(
name|change
operator|.
name|getProject
argument_list|()
argument_list|)
condition|)
block|{
name|pm
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|pm
operator|.
name|endTask
argument_list|()
expr_stmt|;
specifier|final
name|MultiProgressMonitor
name|mpm
init|=
operator|new
name|MultiProgressMonitor
argument_list|(
name|System
operator|.
name|out
argument_list|,
literal|"Reindexing changes"
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|projTask
init|=
name|mpm
operator|.
name|beginSubTask
argument_list|(
literal|"projects"
argument_list|,
name|projects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|doneTask
init|=
name|mpm
operator|.
name|beginSubTask
argument_list|(
literal|null
argument_list|,
name|MultiProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
specifier|final
name|Task
name|failedTask
init|=
name|mpm
operator|.
name|beginSubTask
argument_list|(
literal|"failed"
argument_list|,
name|MultiProgressMonitor
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
name|Stopwatch
name|sw
init|=
operator|new
name|Stopwatch
argument_list|()
operator|.
name|start
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ListenableFuture
argument_list|<
name|?
argument_list|>
argument_list|>
name|futures
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|projects
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AtomicBoolean
name|ok
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|Project
operator|.
name|NameKey
name|project
range|:
name|projects
control|)
block|{
specifier|final
name|ListenableFuture
argument_list|<
name|?
argument_list|>
name|future
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|ReindexProject
argument_list|(
name|project
argument_list|,
name|doneTask
argument_list|,
name|failedTask
argument_list|)
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|future
operator|.
name|addListener
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|ok
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Logged by indexer.
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|failAndThrow
argument_list|(
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Error
name|e
parameter_list|)
block|{
name|failAndThrow
argument_list|(
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|projTask
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|fail
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Throwable
name|t
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to index project "
operator|+
name|project
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|ok
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|failAndThrow
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|RuntimeException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
specifier|private
name|void
name|failAndThrow
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Error
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|project
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
argument_list|,
name|MoreExecutors
operator|.
name|sameThreadExecutor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|mpm
operator|.
name|waitFor
argument_list|(
name|Futures
operator|.
name|transform
argument_list|(
name|Futures
operator|.
name|successfulAsList
argument_list|(
name|futures
argument_list|)
argument_list|,
operator|new
name|AsyncFunction
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|,
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ListenableFuture
argument_list|<
name|Void
argument_list|>
name|apply
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|input
parameter_list|)
throws|throws
name|Exception
block|{
name|mpm
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|Futures
operator|.
name|immediateFuture
argument_list|(
literal|null
argument_list|)
return|;
block|}
block|}
block|)
block|)
class|;
end_class

begin_decl_stmt
name|double
name|elapsed
init|=
name|sw
operator|.
name|elapsed
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|/
literal|1000d
decl_stmt|;
end_decl_stmt

begin_decl_stmt
name|int
name|n
init|=
name|doneTask
operator|.
name|getCount
argument_list|()
operator|+
name|failedTask
operator|.
name|getCount
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"Reindexed %d changes in %.01fs (%.01f/s)\n"
argument_list|,
name|n
argument_list|,
name|elapsed
argument_list|,
name|n
operator|/
name|elapsed
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|ok
operator|.
name|get
argument_list|()
condition|?
literal|0
else|:
literal|1
return|;
end_return

begin_class
unit|}    private
DECL|class|ReindexProject
class|class
name|ReindexProject
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
DECL|field|indexer
specifier|private
specifier|final
name|ChangeIndexer
name|indexer
decl_stmt|;
DECL|field|project
specifier|private
specifier|final
name|Project
operator|.
name|NameKey
name|project
decl_stmt|;
DECL|field|byId
specifier|private
specifier|final
name|ListMultimap
argument_list|<
name|ObjectId
argument_list|,
name|ChangeData
argument_list|>
name|byId
decl_stmt|;
DECL|field|done
specifier|private
specifier|final
name|Task
name|done
decl_stmt|;
DECL|field|failed
specifier|private
specifier|final
name|Task
name|failed
decl_stmt|;
DECL|field|repo
specifier|private
name|Repository
name|repo
decl_stmt|;
DECL|field|walk
specifier|private
name|RevWalk
name|walk
decl_stmt|;
DECL|method|ReindexProject (Project.NameKey project, Task done, Task failed)
specifier|private
name|ReindexProject
parameter_list|(
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
name|Task
name|done
parameter_list|,
name|Task
name|failed
parameter_list|)
block|{
name|this
operator|.
name|indexer
operator|=
name|sysInjector
operator|.
name|getInstance
argument_list|(
name|ChangeIndexer
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|project
operator|=
name|project
expr_stmt|;
name|this
operator|.
name|byId
operator|=
name|ArrayListMultimap
operator|.
name|create
argument_list|()
expr_stmt|;
name|this
operator|.
name|done
operator|=
name|done
expr_stmt|;
name|this
operator|.
name|failed
operator|=
name|failed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call ()
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ReviewDb
name|db
init|=
name|sysInjector
operator|.
name|getInstance
argument_list|(
name|ReviewDb
operator|.
name|class
argument_list|)
decl_stmt|;
name|GitRepositoryManager
name|mgr
init|=
name|sysInjector
operator|.
name|getInstance
argument_list|(
name|GitRepositoryManager
operator|.
name|class
argument_list|)
decl_stmt|;
name|repo
operator|=
name|mgr
operator|.
name|openRepository
argument_list|(
name|project
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Ref
argument_list|>
name|refs
init|=
name|repo
operator|.
name|getAllRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|Change
name|c
range|:
name|db
operator|.
name|changes
argument_list|()
operator|.
name|byProject
argument_list|(
name|project
argument_list|)
control|)
block|{
name|Ref
name|r
init|=
name|refs
operator|.
name|get
argument_list|(
name|c
operator|.
name|currentPatchSetId
argument_list|()
operator|.
name|toRefName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|byId
operator|.
name|put
argument_list|(
name|r
operator|.
name|getObjectId
argument_list|()
argument_list|,
operator|new
name|ChangeData
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|walk
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|repo
operator|.
name|close
argument_list|()
expr_stmt|;
name|RepositoryCache
operator|.
name|close
argument_list|(
name|repo
argument_list|)
expr_stmt|;
comment|// Only used once per Reindex call.
block|}
return|return
literal|null
return|;
block|}
DECL|method|walk ()
specifier|private
name|void
name|walk
parameter_list|()
throws|throws
name|Exception
block|{
name|walk
operator|=
operator|new
name|RevWalk
argument_list|(
name|repo
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Walk only refs first to cover as many changes as we can without having
comment|// to mark every single change.
for|for
control|(
name|Ref
name|ref
range|:
name|repo
operator|.
name|getRefDatabase
argument_list|()
operator|.
name|getRefs
argument_list|(
name|Constants
operator|.
name|R_HEADS
argument_list|)
operator|.
name|values
argument_list|()
control|)
block|{
name|RevObject
name|o
init|=
name|walk
operator|.
name|parseAny
argument_list|(
name|ref
operator|.
name|getObjectId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|RevCommit
condition|)
block|{
name|walk
operator|.
name|markStart
argument_list|(
operator|(
name|RevCommit
operator|)
name|o
argument_list|)
expr_stmt|;
block|}
block|}
name|RevCommit
name|bCommit
decl_stmt|;
while|while
condition|(
operator|(
name|bCommit
operator|=
name|walk
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
operator|&&
operator|!
name|byId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|byId
operator|.
name|containsKey
argument_list|(
name|bCommit
argument_list|)
condition|)
block|{
name|getPathsAndIndex
argument_list|(
name|bCommit
argument_list|)
expr_stmt|;
name|byId
operator|.
name|removeAll
argument_list|(
name|bCommit
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|ObjectId
name|id
range|:
name|byId
operator|.
name|keySet
argument_list|()
control|)
block|{
name|getPathsAndIndex
argument_list|(
name|walk
operator|.
name|parseCommit
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|walk
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getPathsAndIndex (RevCommit bCommit)
specifier|private
name|void
name|getPathsAndIndex
parameter_list|(
name|RevCommit
name|bCommit
parameter_list|)
throws|throws
name|Exception
block|{
name|RevTree
name|bTree
init|=
name|bCommit
operator|.
name|getTree
argument_list|()
decl_stmt|;
try|try
block|{
name|RevTree
name|aTree
init|=
name|aFor
argument_list|(
name|bCommit
argument_list|,
name|walk
argument_list|)
decl_stmt|;
if|if
condition|(
name|aTree
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|DiffFormatter
name|df
init|=
operator|new
name|DiffFormatter
argument_list|(
name|DisabledOutputStream
operator|.
name|INSTANCE
argument_list|)
decl_stmt|;
try|try
block|{
name|df
operator|.
name|setRepository
argument_list|(
name|repo
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChangeData
argument_list|>
name|cds
init|=
name|byId
operator|.
name|get
argument_list|(
name|bCommit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|getPaths
argument_list|(
name|df
operator|.
name|scan
argument_list|(
name|aTree
argument_list|,
name|bTree
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ChangeData
name|cd
range|:
name|cds
control|)
block|{
name|cd
operator|.
name|setCurrentFilePaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|indexer
operator|.
name|indexTask
argument_list|(
name|cd
argument_list|)
operator|.
name|call
argument_list|()
expr_stmt|;
name|done
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|df
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to index changes for commit "
operator|+
name|bCommit
operator|.
name|name
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|failed
operator|.
name|update
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getPaths (List<DiffEntry> filenames)
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPaths
parameter_list|(
name|List
argument_list|<
name|DiffEntry
argument_list|>
name|filenames
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|DiffEntry
name|e
range|:
name|filenames
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getOldPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|e
operator|.
name|getOldPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|.
name|getNewPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|e
operator|.
name|getNewPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|paths
argument_list|)
return|;
block|}
DECL|method|aFor (RevCommit b, RevWalk walk)
specifier|private
name|RevTree
name|aFor
parameter_list|(
name|RevCommit
name|b
parameter_list|,
name|RevWalk
name|walk
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|b
operator|.
name|getParentCount
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|walk
operator|.
name|parseTree
argument_list|(
name|emptyTree
argument_list|()
argument_list|)
return|;
case|case
literal|1
case|:
name|RevCommit
name|a
init|=
name|b
operator|.
name|getParent
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|walk
operator|.
name|parseBody
argument_list|(
name|a
argument_list|)
expr_stmt|;
return|return
name|walk
operator|.
name|parseTree
argument_list|(
name|a
operator|.
name|getTree
argument_list|()
argument_list|)
return|;
case|case
literal|2
case|:
return|return
name|PatchListLoader
operator|.
name|automerge
argument_list|(
name|repo
argument_list|,
name|walk
argument_list|,
name|b
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
DECL|method|emptyTree ()
specifier|private
name|ObjectId
name|emptyTree
parameter_list|()
throws|throws
name|IOException
block|{
name|ObjectInserter
name|oi
init|=
name|repo
operator|.
name|newObjectInserter
argument_list|()
decl_stmt|;
try|try
block|{
name|ObjectId
name|id
init|=
name|oi
operator|.
name|insert
argument_list|(
name|Constants
operator|.
name|OBJ_TREE
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|)
decl_stmt|;
name|oi
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|id
return|;
block|}
finally|finally
block|{
name|oi
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
DECL|method|writeVersion ()
specifier|private
name|void
name|writeVersion
parameter_list|()
throws|throws
name|IOException
throws|,
name|ConfigInvalidException
block|{
if|if
condition|(
name|dryRun
condition|)
block|{
return|return;
block|}
name|FileBasedConfig
name|cfg
init|=
operator|new
name|FileBasedConfig
argument_list|(
name|gerritIndexConfig
argument_list|(
name|sitePaths
argument_list|)
argument_list|,
name|FS
operator|.
name|detect
argument_list|()
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|e
range|:
name|SCHEMA_VERSIONS
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|cfg
operator|.
name|setInt
argument_list|(
literal|"index"
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"schemaVersion"
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cfg
operator|.
name|setEnum
argument_list|(
literal|"lucene"
argument_list|,
literal|null
argument_list|,
literal|"version"
argument_list|,
name|LUCENE_VERSION
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
end_function

unit|}
end_unit

