begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2011 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|AbstractProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|exceptions
operator|.
name|HaltException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|BufferingPrologControl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|Prolog
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|PrologClassLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|prolog_cafe
operator|.
name|lang
operator|.
name|SymbolTerm
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_class
DECL|class|PrologShell
specifier|public
class|class
name|PrologShell
extends|extends
name|AbstractProgram
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-s"
argument_list|,
name|metaVar
operator|=
literal|"FILE.pl"
argument_list|,
name|usage
operator|=
literal|"file to load"
argument_list|)
DECL|field|fileName
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fileName
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
block|{
name|banner
argument_list|()
expr_stmt|;
name|BufferingPrologControl
name|pcl
init|=
operator|new
name|BufferingPrologControl
argument_list|()
decl_stmt|;
name|pcl
operator|.
name|setPrologClassLoader
argument_list|(
operator|new
name|PrologClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|setEnabled
argument_list|(
name|Prolog
operator|.
name|Feature
operator|.
name|IO
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|setEnabled
argument_list|(
name|Prolog
operator|.
name|Feature
operator|.
name|STATISTICS
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|configureUserIO
argument_list|(
name|System
operator|.
name|in
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|pcl
operator|.
name|initialize
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|fileName
control|)
block|{
name|String
name|path
decl_stmt|;
try|try
block|{
name|path
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|path
operator|=
operator|new
name|File
argument_list|(
name|file
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|pcl
operator|.
name|execute
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|,
literal|"consult"
argument_list|,
name|SymbolTerm
operator|.
name|create
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|pcl
operator|.
name|execute
argument_list|(
name|Prolog
operator|.
name|BUILTIN
argument_list|,
literal|"cafeteria"
argument_list|)
expr_stmt|;
name|write
argument_list|(
literal|"% halt\n"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
catch|catch
parameter_list|(
name|HaltException
name|halt
parameter_list|)
block|{
name|write
argument_list|(
literal|"% halt("
operator|+
name|halt
operator|.
name|getStatus
argument_list|()
operator|+
literal|")\n"
argument_list|)
expr_stmt|;
return|return
name|halt
operator|.
name|getStatus
argument_list|()
return|;
block|}
block|}
DECL|method|banner ()
specifier|private
name|void
name|banner
parameter_list|()
block|{
name|System
operator|.
name|err
operator|.
name|format
argument_list|(
literal|"Gerrit Code Review %s - Interactive Prolog Shell"
argument_list|,
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
operator|.
name|getVersion
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"(type Ctrl-D or \"halt.\" to exit,"
operator|+
literal|" \"['path/to/file.pl'].\" to load a file)"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
DECL|method|write (String msg)
specifier|private
name|void
name|write
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

