begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2012 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.init
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|launcher
operator|.
name|GerritLauncher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ConsoleUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|plugins
operator|.
name|PluginLoader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|Manifest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|InitPlugins
specifier|public
class|class
name|InitPlugins
implements|implements
name|InitStep
block|{
DECL|field|PLUGIN_DIR
specifier|private
specifier|final
specifier|static
name|String
name|PLUGIN_DIR
init|=
literal|"WEB-INF/plugins/"
decl_stmt|;
DECL|field|JAR
specifier|private
specifier|final
specifier|static
name|String
name|JAR
init|=
literal|".jar"
decl_stmt|;
DECL|field|ui
specifier|private
specifier|final
name|ConsoleUI
name|ui
decl_stmt|;
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|pluginLoader
specifier|private
name|InitPluginStepsLoader
name|pluginLoader
decl_stmt|;
annotation|@
name|Inject
DECL|method|InitPlugins (final ConsoleUI ui, final SitePaths site, InitPluginStepsLoader pluginLoader)
name|InitPlugins
parameter_list|(
specifier|final
name|ConsoleUI
name|ui
parameter_list|,
specifier|final
name|SitePaths
name|site
parameter_list|,
name|InitPluginStepsLoader
name|pluginLoader
parameter_list|)
block|{
name|this
operator|.
name|ui
operator|=
name|ui
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|pluginLoader
operator|=
name|pluginLoader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ui
operator|.
name|header
argument_list|(
literal|"Plugins"
argument_list|)
expr_stmt|;
name|installPlugins
argument_list|()
expr_stmt|;
name|initPlugins
argument_list|()
expr_stmt|;
block|}
DECL|method|installPlugins ()
specifier|private
name|void
name|installPlugins
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|File
name|myWar
decl_stmt|;
try|try
block|{
name|myWar
operator|=
name|GerritLauncher
operator|.
name|getDistributionArchive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warn: Cannot find gerrit.war"
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|foundPlugin
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|ZipFile
name|zf
init|=
operator|new
name|ZipFile
argument_list|(
name|myWar
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|zf
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|ZipEntry
name|ze
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|ze
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|ze
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
name|PLUGIN_DIR
argument_list|)
operator|&&
name|ze
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
name|JAR
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|foundPlugin
condition|)
block|{
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|false
argument_list|,
literal|"Prompt to install core plugins"
argument_list|)
condition|)
block|{
return|return;
block|}
name|foundPlugin
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|String
name|pluginJarName
init|=
operator|new
name|File
argument_list|(
name|ze
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|pluginName
init|=
name|pluginJarName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pluginJarName
operator|.
name|length
argument_list|()
operator|-
name|JAR
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|in
init|=
name|zf
operator|.
name|getInputStream
argument_list|(
name|ze
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|File
name|tmpPlugin
init|=
name|PluginLoader
operator|.
name|storeInTemp
argument_list|(
name|pluginName
argument_list|,
name|in
argument_list|,
name|site
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pluginVersion
init|=
name|getVersion
argument_list|(
name|tmpPlugin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|false
argument_list|,
literal|"Install plugin %s version %s"
argument_list|,
name|pluginName
argument_list|,
name|pluginVersion
argument_list|)
condition|)
block|{
name|tmpPlugin
operator|.
name|delete
argument_list|()
expr_stmt|;
continue|continue;
block|}
specifier|final
name|File
name|plugin
init|=
operator|new
name|File
argument_list|(
name|site
operator|.
name|plugins_dir
argument_list|,
name|pluginJarName
argument_list|)
decl_stmt|;
if|if
condition|(
name|plugin
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|installedPluginVersion
init|=
name|getVersion
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|false
argument_list|,
literal|"version %s is already installed, overwrite it"
argument_list|,
name|installedPluginVersion
argument_list|)
condition|)
block|{
name|tmpPlugin
operator|.
name|delete
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|plugin
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to delete plugin "
operator|+
name|pluginName
operator|+
literal|": "
operator|+
name|plugin
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|tmpPlugin
operator|.
name|renameTo
argument_list|(
name|plugin
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failed to install plugin "
operator|+
name|pluginName
operator|+
literal|": "
operator|+
name|tmpPlugin
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" -> "
operator|+
name|plugin
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Failure during plugin installation"
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|foundPlugin
condition|)
block|{
name|ui
operator|.
name|message
argument_list|(
literal|"No plugins found."
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|initPlugins ()
specifier|private
name|void
name|initPlugins
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|InitStep
name|initStep
range|:
name|pluginLoader
operator|.
name|getInitSteps
argument_list|()
control|)
block|{
name|initStep
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getVersion (final File plugin)
specifier|private
specifier|static
name|String
name|getVersion
parameter_list|(
specifier|final
name|File
name|plugin
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|JarFile
name|jarFile
init|=
operator|new
name|JarFile
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Manifest
name|manifest
init|=
name|jarFile
operator|.
name|getManifest
argument_list|()
decl_stmt|;
specifier|final
name|Attributes
name|main
init|=
name|manifest
operator|.
name|getMainAttributes
argument_list|()
decl_stmt|;
return|return
name|main
operator|.
name|getValue
argument_list|(
name|Attributes
operator|.
name|Name
operator|.
name|IMPLEMENTATION_VERSION
argument_list|)
return|;
block|}
finally|finally
block|{
name|jarFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

