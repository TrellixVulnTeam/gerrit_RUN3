begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|ObjectId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|HttpSupport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ProxySelector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_comment
comment|/** Get optional or required 3rd party library files into $site_path/lib. */
end_comment

begin_class
DECL|class|LibraryDownloader
specifier|public
class|class
name|LibraryDownloader
block|{
DECL|field|console
specifier|private
specifier|final
name|ConsoleUI
name|console
decl_stmt|;
DECL|field|libDirectory
specifier|private
specifier|final
name|File
name|libDirectory
decl_stmt|;
DECL|field|required
specifier|private
name|boolean
name|required
decl_stmt|;
DECL|field|name
specifier|private
name|String
name|name
decl_stmt|;
DECL|field|jarUrl
specifier|private
name|String
name|jarUrl
decl_stmt|;
DECL|field|sha1
specifier|private
name|String
name|sha1
decl_stmt|;
DECL|field|dst
specifier|private
name|File
name|dst
decl_stmt|;
DECL|method|LibraryDownloader (final ConsoleUI console, final File sitePath)
specifier|public
name|LibraryDownloader
parameter_list|(
specifier|final
name|ConsoleUI
name|console
parameter_list|,
specifier|final
name|File
name|sitePath
parameter_list|)
block|{
name|this
operator|.
name|console
operator|=
name|console
expr_stmt|;
name|this
operator|.
name|libDirectory
operator|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
literal|"lib"
argument_list|)
expr_stmt|;
block|}
DECL|method|setRequired (final boolean required)
specifier|public
name|LibraryDownloader
name|setRequired
parameter_list|(
specifier|final
name|boolean
name|required
parameter_list|)
block|{
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setName (final String name)
specifier|public
name|LibraryDownloader
name|setName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setJarUrl (final String url)
specifier|public
name|LibraryDownloader
name|setJarUrl
parameter_list|(
specifier|final
name|String
name|url
parameter_list|)
block|{
name|this
operator|.
name|jarUrl
operator|=
name|url
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setSHA1 (final String sha1)
specifier|public
name|LibraryDownloader
name|setSHA1
parameter_list|(
specifier|final
name|String
name|sha1
parameter_list|)
block|{
name|this
operator|.
name|sha1
operator|=
name|sha1
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|download ()
specifier|public
name|void
name|download
parameter_list|()
block|{
if|if
condition|(
name|jarUrl
operator|==
literal|null
operator|||
operator|!
name|jarUrl
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid JarUrl for "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|final
name|String
name|jarName
init|=
name|jarUrl
operator|.
name|substring
argument_list|(
name|jarUrl
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|jarName
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
operator|||
name|jarName
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid JarUrl: "
operator|+
name|jarUrl
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|jarName
expr_stmt|;
block|}
name|dst
operator|=
operator|new
name|File
argument_list|(
name|libDirectory
argument_list|,
name|jarName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dst
operator|.
name|exists
argument_list|()
operator|&&
name|shouldGet
argument_list|()
condition|)
block|{
name|doGet
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|shouldGet ()
specifier|private
name|boolean
name|shouldGet
parameter_list|()
block|{
if|if
condition|(
name|console
operator|.
name|isBatch
argument_list|()
condition|)
block|{
return|return
name|required
return|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|msg
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"Gerrit Code Review is not shipped with %s\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|required
condition|)
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"**  This library is required for your configuration. **\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|.
name|append
argument_list|(
literal|"  If available, Gerrit can take advantage of features\n"
argument_list|)
expr_stmt|;
name|msg
operator|.
name|append
argument_list|(
literal|"  in the library, but will also function without it.\n"
argument_list|)
expr_stmt|;
block|}
name|msg
operator|.
name|append
argument_list|(
literal|"Download and install it now"
argument_list|)
expr_stmt|;
return|return
name|console
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
name|msg
operator|.
name|toString
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
DECL|method|doGet ()
specifier|private
name|void
name|doGet
parameter_list|()
block|{
if|if
condition|(
operator|!
name|libDirectory
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|libDirectory
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Die
argument_list|(
literal|"Cannot create "
operator|+
name|libDirectory
argument_list|)
throw|;
block|}
try|try
block|{
name|doGetByHttp
argument_list|()
expr_stmt|;
name|verifyFileChecksum
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
if|if
condition|(
name|console
operator|.
name|isBatch
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Die
argument_list|(
literal|"error: Cannot get "
operator|+
name|jarUrl
argument_list|,
name|err
argument_list|)
throw|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please download:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|jarUrl
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"and save as:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|dst
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|console
operator|.
name|waitForUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|dst
operator|.
name|exists
argument_list|()
condition|)
block|{
name|verifyFileChecksum
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|console
operator|.
name|yesno
argument_list|(
operator|!
name|required
argument_list|,
literal|"Continue without this library"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Die
argument_list|(
literal|"aborted by user"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|doGetByHttp ()
specifier|private
name|void
name|doGetByHttp
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Downloading "
operator|+
name|jarUrl
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|ProxySelector
name|proxySelector
init|=
name|ProxySelector
operator|.
name|getDefault
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|jarUrl
argument_list|)
decl_stmt|;
specifier|final
name|Proxy
name|proxy
init|=
name|HttpSupport
operator|.
name|proxyFor
argument_list|(
name|proxySelector
argument_list|,
name|url
argument_list|)
decl_stmt|;
specifier|final
name|HttpURLConnection
name|c
init|=
operator|(
name|HttpURLConnection
operator|)
name|url
operator|.
name|openConnection
argument_list|(
name|proxy
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|in
decl_stmt|;
switch|switch
condition|(
name|HttpSupport
operator|.
name|response
argument_list|(
name|c
argument_list|)
condition|)
block|{
case|case
name|HttpURLConnection
operator|.
name|HTTP_OK
case|:
name|in
operator|=
name|c
operator|.
name|getInputStream
argument_list|()
expr_stmt|;
break|break;
case|case
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
case|:
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|IOException
argument_list|(
name|url
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|HttpSupport
operator|.
name|response
argument_list|(
name|c
argument_list|)
operator|+
literal|" "
operator|+
name|c
operator|.
name|getResponseMessage
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" OK"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|err
parameter_list|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" !! FAIL !!"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
throw|throw
name|err
throw|;
block|}
block|}
DECL|method|verifyFileChecksum ()
specifier|private
name|void
name|verifyFileChecksum
parameter_list|()
block|{
if|if
condition|(
name|sha1
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"SHA-1"
argument_list|)
decl_stmt|;
specifier|final
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|md
operator|.
name|update
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sha1
operator|.
name|equals
argument_list|(
name|ObjectId
operator|.
name|fromRaw
argument_list|(
name|md
operator|.
name|digest
argument_list|()
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Checksum "
operator|+
name|dst
operator|.
name|getName
argument_list|()
operator|+
literal|" OK"
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|console
operator|.
name|isBatch
argument_list|()
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Die
argument_list|(
name|dst
operator|+
literal|" SHA-1 checksum does not match"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
operator|!
name|console
operator|.
name|yesno
argument_list|(
literal|null
comment|/* force an answer */
argument_list|,
literal|"error: SHA-1 checksum does not match\n"
operator|+
literal|"Use %s anyway"
argument_list|,
comment|//
name|dst
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Die
argument_list|(
literal|"aborted by user"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|checksumError
parameter_list|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Die
argument_list|(
literal|"cannot checksum "
operator|+
name|dst
argument_list|,
name|checksumError
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|checksumError
parameter_list|)
block|{
name|dst
operator|.
name|delete
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|Die
argument_list|(
literal|"cannot checksum "
operator|+
name|dst
argument_list|,
name|checksumError
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

