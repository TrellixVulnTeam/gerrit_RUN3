begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.http.jetty
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|http
operator|.
name|jetty
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|main
operator|.
name|GerritLauncher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|servlet
operator|.
name|GuiceServletContextListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|io
operator|.
name|EndPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Connector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Handler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|handler
operator|.
name|ContextHandlerCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|nio
operator|.
name|SelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ssl
operator|.
name|SslSelectChannelConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|DefaultServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|FilterMapping
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|resource
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|QueuedThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|util
operator|.
name|thread
operator|.
name|ThreadPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_class
annotation|@
name|Singleton
DECL|class|JettyServer
specifier|public
class|class
name|JettyServer
block|{
DECL|class|Lifecycle
specifier|static
class|class
name|Lifecycle
implements|implements
name|LifecycleListener
block|{
DECL|field|server
specifier|private
specifier|final
name|JettyServer
name|server
decl_stmt|;
annotation|@
name|Inject
DECL|method|Lifecycle (final JettyServer server)
name|Lifecycle
parameter_list|(
specifier|final
name|JettyServer
name|server
parameter_list|)
block|{
name|this
operator|.
name|server
operator|=
name|server
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|httpd
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot start HTTP daemon"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
block|{
try|try
block|{
name|server
operator|.
name|httpd
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|.
name|httpd
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Cannot stop HTTP daemon"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|field|sitePath
specifier|private
specifier|final
name|File
name|sitePath
decl_stmt|;
DECL|field|httpd
specifier|private
specifier|final
name|Server
name|httpd
decl_stmt|;
comment|/** Location on disk where our WAR file was unpacked to. */
DECL|field|baseResource
specifier|private
name|Resource
name|baseResource
decl_stmt|;
annotation|@
name|Inject
DECL|method|JettyServer (@erritServerConfig final Config cfg, @SitePath final File sitePath, final JettyEnv env)
name|JettyServer
parameter_list|(
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|,
annotation|@
name|SitePath
specifier|final
name|File
name|sitePath
parameter_list|,
specifier|final
name|JettyEnv
name|env
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|this
operator|.
name|sitePath
operator|=
name|sitePath
expr_stmt|;
name|Handler
name|app
init|=
name|makeContext
argument_list|(
name|env
argument_list|,
name|cfg
argument_list|)
decl_stmt|;
name|httpd
operator|=
operator|new
name|Server
argument_list|()
expr_stmt|;
name|httpd
operator|.
name|setConnectors
argument_list|(
name|listen
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setThreadPool
argument_list|(
name|threadPool
argument_list|(
name|cfg
argument_list|)
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setHandler
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setStopAtShutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setSendDateHeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setSendServerVersion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|setGracefulShutdown
argument_list|(
operator|(
name|int
operator|)
name|MILLISECONDS
operator|.
name|convert
argument_list|(
literal|1
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|listen (final Config cfg)
specifier|private
name|Connector
index|[]
name|listen
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
comment|// OpenID and certain web-based single-sign-on products can cause
comment|// some very long headers, especially in the Referer header. We
comment|// need to use a larger default header size to ensure we have
comment|// the space required.
comment|//
specifier|final
name|int
name|requestHeaderSize
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|"requestheadersize"
argument_list|,
literal|16386
argument_list|)
decl_stmt|;
specifier|final
name|URI
index|[]
name|listenUrls
init|=
name|listenURLs
argument_list|(
name|cfg
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|reuseAddress
init|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"httpd"
argument_list|,
literal|"reuseaddress"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|acceptors
init|=
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|"acceptorThreads"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|Connector
index|[]
name|connectors
init|=
operator|new
name|Connector
index|[
name|listenUrls
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|listenUrls
operator|.
name|length
condition|;
name|idx
operator|++
control|)
block|{
specifier|final
name|URI
name|u
init|=
name|listenUrls
index|[
name|idx
index|]
decl_stmt|;
specifier|final
name|int
name|defaultPort
decl_stmt|;
specifier|final
name|SelectChannelConnector
name|c
decl_stmt|;
if|if
condition|(
literal|"http"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|80
expr_stmt|;
name|c
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|SslSelectChannelConnector
name|ssl
init|=
operator|new
name|SslSelectChannelConnector
argument_list|()
decl_stmt|;
specifier|final
name|File
name|keystore
init|=
name|getFile
argument_list|(
name|cfg
argument_list|,
literal|"sslkeystore"
argument_list|,
literal|"etc/keystore"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"sslkeypassword"
argument_list|)
decl_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
literal|"gerrit"
expr_stmt|;
block|}
name|ssl
operator|.
name|setKeystore
argument_list|(
name|keystore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setTruststore
argument_list|(
name|keystore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setKeyPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|ssl
operator|.
name|setTrustPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|defaultPort
operator|=
literal|443
expr_stmt|;
name|c
operator|=
name|ssl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"proxy-http"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|8080
expr_stmt|;
name|c
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
expr_stmt|;
name|c
operator|.
name|setForwarded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"proxy-https"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|)
block|{
name|defaultPort
operator|=
literal|8080
expr_stmt|;
name|c
operator|=
operator|new
name|SelectChannelConnector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|customize
parameter_list|(
name|EndPoint
name|endpoint
parameter_list|,
name|Request
name|request
parameter_list|)
throws|throws
name|IOException
block|{
name|request
operator|.
name|setScheme
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|super
operator|.
name|customize
argument_list|(
name|endpoint
argument_list|,
name|request
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|c
operator|.
name|setForwarded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Protocol '"
operator|+
name|u
operator|.
name|getScheme
argument_list|()
operator|+
literal|"' "
operator|+
literal|" not supported in httpd.listenurl '"
operator|+
name|u
operator|+
literal|"';"
operator|+
literal|" only 'http', 'https', 'proxy-http, 'proxy-https'"
operator|+
literal|" are supported"
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|u
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
comment|//
operator|||
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"*:"
argument_list|)
operator|)
condition|)
block|{
comment|// Bind to all local addresses. Port wasn't parsed right by URI
comment|// due to the illegal host of "*" so replace with a legal name
comment|// and parse the URI.
comment|//
specifier|final
name|URI
name|r
init|=
operator|new
name|URI
argument_list|(
name|u
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'*'
argument_list|,
literal|'A'
argument_list|)
argument_list|)
operator|.
name|parseServerAuthority
argument_list|()
decl_stmt|;
name|c
operator|.
name|setHost
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPort
argument_list|(
literal|0
operator|<
name|r
operator|.
name|getPort
argument_list|()
condition|?
name|r
operator|.
name|getPort
argument_list|()
else|:
name|defaultPort
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|URI
name|r
init|=
name|u
operator|.
name|parseServerAuthority
argument_list|()
decl_stmt|;
name|c
operator|.
name|setHost
argument_list|(
name|r
operator|.
name|getHost
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|.
name|setPort
argument_list|(
literal|0
operator|<
name|r
operator|.
name|getPort
argument_list|()
condition|?
name|r
operator|.
name|getPort
argument_list|()
else|:
name|defaultPort
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid httpd.listenurl "
operator|+
name|u
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|c
operator|.
name|setRequestHeaderSize
argument_list|(
name|requestHeaderSize
argument_list|)
expr_stmt|;
name|c
operator|.
name|setAcceptors
argument_list|(
name|acceptors
argument_list|)
expr_stmt|;
name|c
operator|.
name|setReuseAddress
argument_list|(
name|reuseAddress
argument_list|)
expr_stmt|;
name|c
operator|.
name|setStatsOn
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connectors
index|[
name|idx
index|]
operator|=
name|c
expr_stmt|;
block|}
return|return
name|connectors
return|;
block|}
DECL|method|listenURLs (final Config cfg)
specifier|private
name|URI
index|[]
name|listenURLs
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|String
index|[]
name|urls
init|=
name|cfg
operator|.
name|getStringList
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenurl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|urls
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|urls
operator|=
operator|new
name|String
index|[]
block|{
literal|"http://*:8080/"
block|}
expr_stmt|;
block|}
specifier|final
name|URI
index|[]
name|r
init|=
operator|new
name|URI
index|[
name|urls
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|s
init|=
name|urls
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|r
index|[
name|i
index|]
operator|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid httpd.listenurl "
operator|+
name|s
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|r
return|;
block|}
DECL|method|getFile (final Config cfg, final String name, final String def)
specifier|private
name|File
name|getFile
parameter_list|(
specifier|final
name|Config
name|cfg
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|def
parameter_list|)
block|{
name|String
name|path
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|path
operator|=
name|def
expr_stmt|;
block|}
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|loc
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|loc
operator|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|loc
return|;
block|}
DECL|method|threadPool (Config cfg)
specifier|private
name|ThreadPool
name|threadPool
parameter_list|(
name|Config
name|cfg
parameter_list|)
block|{
specifier|final
name|QueuedThreadPool
name|pool
init|=
operator|new
name|QueuedThreadPool
argument_list|()
decl_stmt|;
name|pool
operator|.
name|setName
argument_list|(
literal|"HTTP"
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setMinThreads
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"minthreads"
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setMaxThreads
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"maxthreads"
argument_list|,
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|pool
operator|.
name|setMaxQueued
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"maxqueued"
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pool
return|;
block|}
DECL|method|makeContext (final JettyEnv env, final Config cfg)
specifier|private
name|Handler
name|makeContext
parameter_list|(
specifier|final
name|JettyEnv
name|env
parameter_list|,
specifier|final
name|Config
name|cfg
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|URI
name|u
range|:
name|listenURLs
argument_list|(
name|cfg
argument_list|)
control|)
block|{
name|paths
operator|.
name|add
argument_list|(
name|u
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|?
name|u
operator|.
name|getPath
argument_list|()
else|:
literal|"/"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|ContextHandler
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|ContextHandler
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|all
operator|.
name|add
argument_list|(
name|makeContext
argument_list|(
name|path
argument_list|,
name|env
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
comment|// If we only have one context path in our web space, return it
comment|// without any wrapping so Jetty has less work to do per-request.
comment|//
return|return
name|all
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
else|else
block|{
comment|// We have more than one path served out of this container so
comment|// combine them in a handler which supports dispatching to the
comment|// individual contexts.
comment|//
specifier|final
name|ContextHandlerCollection
name|r
init|=
operator|new
name|ContextHandlerCollection
argument_list|()
decl_stmt|;
name|r
operator|.
name|setHandlers
argument_list|(
name|all
operator|.
name|toArray
argument_list|(
operator|new
name|Handler
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
DECL|method|makeContext (final String contextPath, final JettyEnv env)
specifier|private
name|ContextHandler
name|makeContext
parameter_list|(
specifier|final
name|String
name|contextPath
parameter_list|,
specifier|final
name|JettyEnv
name|env
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
specifier|final
name|ServletContextHandler
name|app
init|=
operator|new
name|ServletContextHandler
argument_list|()
decl_stmt|;
comment|// This is the path we are accessed by clients within our domain.
comment|//
name|app
operator|.
name|setContextPath
argument_list|(
name|contextPath
argument_list|)
expr_stmt|;
comment|// Serve static resources directly from our JAR. This way we don't
comment|// need to unpack them into yet another temporary directory prior to
comment|// serving to clients.
comment|//
name|app
operator|.
name|setBaseResource
argument_list|(
name|getBaseResource
argument_list|()
argument_list|)
expr_stmt|;
comment|// Perform the same binding as our web.xml would do, but instead
comment|// of using the listener to create the injector pass the one we
comment|// already have built.
comment|//
name|app
operator|.
name|addFilter
argument_list|(
name|GuiceFilter
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|,
name|FilterMapping
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|app
operator|.
name|addEventListener
argument_list|(
operator|new
name|GuiceServletContextListener
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Injector
name|getInjector
parameter_list|()
block|{
return|return
name|env
operator|.
name|webInjector
return|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// Jetty requires at least one servlet be bound before it will
comment|// bother running the filter above. Since the filter has all
comment|// of our URLs except the static resources, the only servlet
comment|// we need to bind is the default static resource servlet from
comment|// the Jetty container.
comment|//
specifier|final
name|ServletHolder
name|ds
init|=
name|app
operator|.
name|addServlet
argument_list|(
name|DefaultServlet
operator|.
name|class
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"dirAllowed"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"redirectWelcome"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"useFileMappedBuffer"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitParameter
argument_list|(
literal|"gzip"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|app
operator|.
name|setWelcomeFiles
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|app
return|;
block|}
DECL|method|getBaseResource ()
specifier|private
name|Resource
name|getBaseResource
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|baseResource
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|baseResource
operator|=
name|unpackWar
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|err
parameter_list|)
block|{
throw|throw
name|err
throw|;
block|}
block|}
return|return
name|baseResource
return|;
block|}
DECL|method|unpackWar ()
specifier|private
name|Resource
name|unpackWar
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|File
name|srcwar
init|=
name|GerritLauncher
operator|.
name|getDistributionArchive
argument_list|()
decl_stmt|;
comment|// Obtain our local temporary directory, but it comes back as a file
comment|// so we have to switch it to be a directory post creation.
comment|//
name|File
name|dstwar
init|=
name|GerritLauncher
operator|.
name|createTempFile
argument_list|(
literal|"gerrit_"
argument_list|,
literal|"war"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dstwar
operator|.
name|delete
argument_list|()
operator|||
operator|!
name|dstwar
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot mkdir "
operator|+
name|dstwar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
comment|// Jetty normally refuses to serve out of a symlinked directory, as
comment|// a security feature. Try to resolve out any symlinks in the path.
comment|//
try|try
block|{
name|dstwar
operator|=
name|dstwar
operator|.
name|getCanonicalFile
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|dstwar
operator|=
name|dstwar
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ZipFile
name|zf
init|=
operator|new
name|ZipFile
argument_list|(
name|srcwar
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|zf
operator|.
name|entries
argument_list|()
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|ZipEntry
name|ze
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|ze
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ze
operator|.
name|isDirectory
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"WEB-INF/"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"META-INF/"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"com/google/gerrit/main/"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"Main.class"
argument_list|)
condition|)
continue|continue;
specifier|final
name|File
name|rawtmp
init|=
operator|new
name|File
argument_list|(
name|dstwar
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|rawtmp
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
name|rawtmp
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
specifier|final
name|FileOutputStream
name|rawout
init|=
operator|new
name|FileOutputStream
argument_list|(
name|rawtmp
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|in
init|=
name|zf
operator|.
name|getInputStream
argument_list|(
name|ze
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|buf
operator|.
name|length
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|rawout
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|rawout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|zf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|Resource
operator|.
name|newResource
argument_list|(
name|dstwar
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
DECL|method|mkdir (final File dir)
specifier|private
name|void
name|mkdir
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|mkdir
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdir
argument_list|()
condition|)
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot mkdir "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
name|dir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

