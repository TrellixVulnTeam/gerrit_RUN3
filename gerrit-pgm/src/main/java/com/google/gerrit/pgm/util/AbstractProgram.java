begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.util
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Die
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|util
operator|.
name|cli
operator|.
name|OptionHandlers
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_comment
comment|/** Base class for command line invocations of Gerrit Code Review. */
end_comment

begin_class
DECL|class|AbstractProgram
specifier|public
specifier|abstract
class|class
name|AbstractProgram
block|{
DECL|field|sleepLock
specifier|private
specifier|final
name|Object
name|sleepLock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
DECL|field|running
specifier|private
name|boolean
name|running
init|=
literal|true
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--show-stack-trace"
argument_list|,
name|usage
operator|=
literal|"display stack trace on failure"
argument_list|)
DECL|field|showStackTrace
specifier|protected
name|boolean
name|showStackTrace
decl_stmt|;
DECL|method|getName ()
specifier|private
name|String
name|getName
parameter_list|()
block|{
name|String
name|n
init|=
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|dot
init|=
name|n
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|dot
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|substring
argument_list|(
name|dot
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|n
operator|.
name|toLowerCase
argument_list|()
return|;
block|}
DECL|method|main (final String[] argv)
specifier|public
specifier|final
name|int
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|CmdLineParser
name|clp
init|=
operator|new
name|CmdLineParser
argument_list|(
name|OptionHandlers
operator|.
name|empty
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|clp
operator|.
name|parseArgument
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CmdLineException
name|err
parameter_list|)
block|{
if|if
condition|(
operator|!
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"fatal: "
operator|+
name|err
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
name|clp
operator|.
name|wasHelpRequestedByOption
argument_list|()
condition|)
block|{
name|StringWriter
name|msg
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|clp
operator|.
name|printDetailedUsage
argument_list|(
name|getName
argument_list|()
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
try|try
block|{
name|ProxyUtil
operator|.
name|configureHttpProxy
argument_list|()
expr_stmt|;
return|return
name|run
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Die
name|err
parameter_list|)
block|{
if|if
condition|(
name|showStackTrace
condition|)
block|{
name|err
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Throwable
name|cause
init|=
name|err
operator|.
name|getCause
argument_list|()
decl_stmt|;
specifier|final
name|String
name|diemsg
init|=
name|err
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
operator|&&
operator|!
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
name|diemsg
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"fatal: "
operator|+
name|cause
operator|.
name|getMessage
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\nfatal: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"fatal: "
operator|+
name|diemsg
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|"\nfatal: "
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|128
return|;
block|}
block|}
comment|/** Create a new exception to indicate we won't continue. */
DECL|method|die (String why)
specifier|protected
specifier|static
name|Die
name|die
parameter_list|(
name|String
name|why
parameter_list|)
block|{
return|return
operator|new
name|Die
argument_list|(
name|why
argument_list|)
return|;
block|}
comment|/** Create a new exception to indicate we won't continue. */
DECL|method|die (String why, Throwable cause)
specifier|protected
specifier|static
name|Die
name|die
parameter_list|(
name|String
name|why
parameter_list|,
name|Throwable
name|cause
parameter_list|)
block|{
return|return
operator|new
name|Die
argument_list|(
name|why
argument_list|,
name|cause
argument_list|)
return|;
block|}
comment|/** Method that never returns, e.g. to keep a daemon running. */
DECL|method|never ()
specifier|protected
name|int
name|never
parameter_list|()
block|{
synchronized|synchronized
init|(
name|sleepLock
init|)
block|{
while|while
condition|(
name|running
condition|)
block|{
try|try
block|{
name|sleepLock
operator|.
name|wait
argument_list|(
literal|60
operator|*
literal|60
operator|*
literal|1000L
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
continue|continue;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
comment|/**    * Run this program's logic, returning the command exit status.    *    *<p>When this method completes, the JVM is terminated. To keep the JVM running, use {@code    * return never()}.    */
DECL|method|run ()
specifier|public
specifier|abstract
name|int
name|run
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
end_class

end_unit

