begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|lifecycle
operator|.
name|LifecycleListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|jdbc
operator|.
name|SimpleDataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|ProvisionException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|dbcp
operator|.
name|BasicDataSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_comment
comment|/** Provides access to the DataSource. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|DataSourceProvider
specifier|public
specifier|final
class|class
name|DataSourceProvider
implements|implements
name|Provider
argument_list|<
name|DataSource
argument_list|>
implements|,
name|LifecycleListener
block|{
DECL|field|ds
specifier|private
specifier|final
name|DataSource
name|ds
decl_stmt|;
annotation|@
name|Inject
DECL|method|DataSourceProvider (@itePath final File sitePath, @GerritServerConfig final Config cfg)
name|DataSourceProvider
parameter_list|(
annotation|@
name|SitePath
specifier|final
name|File
name|sitePath
parameter_list|,
annotation|@
name|GerritServerConfig
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|ds
operator|=
name|open
argument_list|(
name|sitePath
argument_list|,
name|cfg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
specifier|synchronized
name|DataSource
name|get
parameter_list|()
block|{
return|return
name|ds
return|;
block|}
annotation|@
name|Override
DECL|method|start ()
specifier|public
name|void
name|start
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|stop ()
specifier|public
specifier|synchronized
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|ds
operator|instanceof
name|BasicDataSource
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|BasicDataSource
operator|)
name|ds
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
comment|// Ignore the close failure.
block|}
block|}
block|}
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|DEFAULT
DECL|enumConstant|JDBC
DECL|enumConstant|POSTGRES
DECL|enumConstant|POSTGRESQL
DECL|enumConstant|H2
DECL|enumConstant|MYSQL
name|DEFAULT
block|,
name|JDBC
block|,
name|POSTGRES
block|,
name|POSTGRESQL
block|,
name|H2
block|,
name|MYSQL
block|;   }
DECL|method|open (final File sitePath, final Config cfg)
specifier|private
name|DataSource
name|open
parameter_list|(
specifier|final
name|File
name|sitePath
parameter_list|,
specifier|final
name|Config
name|cfg
parameter_list|)
block|{
name|Type
name|type
init|=
name|ConfigUtil
operator|.
name|getEnum
argument_list|(
name|cfg
argument_list|,
literal|"database"
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|,
name|Type
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|String
name|driver
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"driver"
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"url"
argument_list|)
decl_stmt|;
name|String
name|username
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"username"
argument_list|)
decl_stmt|;
name|String
name|password
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"password"
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"hostname"
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"port"
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostname
operator|==
literal|null
condition|)
block|{
name|hostname
operator|=
literal|"localhost"
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|DEFAULT
operator|==
name|type
operator|&&
operator|(
name|driver
operator|==
literal|null
operator|||
name|driver
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:postgresql:"
argument_list|)
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|POSTGRES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"postgresql:"
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"jdbc:"
operator|+
name|url
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|POSTGRES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"postgres:"
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"jdbc:postgresql:"
operator|+
name|url
operator|.
name|substring
argument_list|(
name|url
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|POSTGRES
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:h2:"
argument_list|)
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|H2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"h2:"
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"jdbc:"
operator|+
name|url
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|H2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:mysql:"
argument_list|)
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|MYSQL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"mysql:"
argument_list|)
condition|)
block|{
name|url
operator|=
literal|"jdbc:"
operator|+
name|url
expr_stmt|;
name|type
operator|=
name|Type
operator|.
name|MYSQL
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|H2
expr_stmt|;
block|}
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|POSTGRES
case|:
case|case
name|POSTGRESQL
case|:
block|{
specifier|final
name|String
name|pfx
init|=
literal|"jdbc:postgresql://"
decl_stmt|;
name|driver
operator|=
literal|"org.postgresql.Driver"
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
operator|&&
operator|!
name|port
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|required
argument_list|(
name|cfg
argument_list|,
literal|"database"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|startsWith
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"database.url must be "
operator|+
name|pfx
operator|+
literal|" and not "
operator|+
name|url
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|H2
case|:
block|{
specifier|final
name|String
name|pfx
init|=
literal|"jdbc:h2:"
decl_stmt|;
name|driver
operator|=
literal|"org.h2.Driver"
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|String
name|database
init|=
name|optional
argument_list|(
name|cfg
argument_list|,
literal|"database"
argument_list|)
decl_stmt|;
if|if
condition|(
name|database
operator|==
literal|null
operator|||
name|database
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|database
operator|=
literal|"db/ReviewDB"
expr_stmt|;
block|}
name|File
name|db
init|=
operator|new
name|File
argument_list|(
name|database
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|db
operator|=
operator|new
name|File
argument_list|(
name|sitePath
argument_list|,
name|database
argument_list|)
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
block|}
name|url
operator|=
name|pfx
operator|+
name|db
operator|.
name|toURI
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|startsWith
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"database.url must be "
operator|+
name|pfx
operator|+
literal|" and not "
operator|+
name|url
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|MYSQL
case|:
block|{
specifier|final
name|String
name|pfx
init|=
literal|"jdbc:mysql://"
decl_stmt|;
name|driver
operator|=
literal|"com.mysql.jdbc.Driver"
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
specifier|final
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
name|pfx
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|!=
literal|null
operator|&&
operator|!
name|port
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
name|b
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
name|required
argument_list|(
name|cfg
argument_list|,
literal|"database"
argument_list|)
argument_list|)
expr_stmt|;
name|url
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|startsWith
argument_list|(
name|pfx
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"database.url must be "
operator|+
name|pfx
operator|+
literal|" and not "
operator|+
name|url
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|DEFAULT
case|:
case|case
name|JDBC
case|:
default|default:
name|driver
operator|=
name|required
argument_list|(
name|cfg
argument_list|,
literal|"driver"
argument_list|)
expr_stmt|;
name|url
operator|=
name|required
argument_list|(
name|cfg
argument_list|,
literal|"url"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"database.url must be jdbc: style"
argument_list|)
throw|;
block|}
break|break;
block|}
name|boolean
name|usePool
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"jdbc:mysql:"
argument_list|)
condition|)
block|{
comment|// MySQL has given us trouble with the connection pool,
comment|// sometimes the backend disconnects and the pool winds
comment|// up with a stale connection. Fortunately opening up
comment|// a new MySQL connection is usually very fast.
comment|//
name|usePool
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|usePool
operator|=
literal|true
expr_stmt|;
block|}
name|usePool
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"database"
argument_list|,
literal|"connectionpool"
argument_list|,
name|usePool
argument_list|)
expr_stmt|;
if|if
condition|(
name|usePool
condition|)
block|{
specifier|final
name|BasicDataSource
name|ds
init|=
operator|new
name|BasicDataSource
argument_list|()
decl_stmt|;
name|ds
operator|.
name|setDriverClassName
argument_list|(
name|driver
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
operator|!
name|username
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ds
operator|.
name|setUsername
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|!=
literal|null
operator|&&
operator|!
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ds
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
name|ds
operator|.
name|setMaxActive
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"database"
argument_list|,
literal|"poollimit"
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setMinIdle
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"database"
argument_list|,
literal|"poolminidle"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setMaxIdle
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"database"
argument_list|,
literal|"poolmaxidle"
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setMaxWait
argument_list|(
name|cfg
operator|.
name|getInt
argument_list|(
literal|"database"
argument_list|,
literal|"poolmaxwait"
argument_list|,
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|ds
operator|.
name|setInitialSize
argument_list|(
name|ds
operator|.
name|getMinIdle
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ds
return|;
block|}
else|else
block|{
comment|// Don't use the connection pool.
comment|//
try|try
block|{
specifier|final
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"driver"
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
literal|"url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SimpleDataSource
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|ProvisionException
argument_list|(
literal|"Database unavailable"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|optional (final Config config, final String name)
specifier|private
specifier|static
name|String
name|optional
parameter_list|(
specifier|final
name|Config
name|config
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|config
operator|.
name|getString
argument_list|(
literal|"database"
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|required (final Config config, final String name)
specifier|private
specifier|static
name|String
name|required
parameter_list|(
specifier|final
name|Config
name|config
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
name|v
init|=
name|optional
argument_list|(
name|config
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|v
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No database."
operator|+
name|name
operator|+
literal|" configured"
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
block|}
end_class

end_unit

