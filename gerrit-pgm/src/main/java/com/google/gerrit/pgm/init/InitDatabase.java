begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm.init
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|InitUtil
operator|.
name|die
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|InitUtil
operator|.
name|username
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DataSourceProvider
operator|.
name|Type
operator|.
name|H2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ConsoleUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DataSourceProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/** Initialize the {@code database} configuration section. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|InitDatabase
class|class
name|InitDatabase
implements|implements
name|InitStep
block|{
DECL|field|ui
specifier|private
specifier|final
name|ConsoleUI
name|ui
decl_stmt|;
DECL|field|site
specifier|private
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|libraries
specifier|private
specifier|final
name|Libraries
name|libraries
decl_stmt|;
DECL|field|database
specifier|private
specifier|final
name|Section
name|database
decl_stmt|;
annotation|@
name|Inject
DECL|method|InitDatabase (final ConsoleUI ui, final SitePaths site, final Libraries libraries, final Section.Factory sections)
name|InitDatabase
parameter_list|(
specifier|final
name|ConsoleUI
name|ui
parameter_list|,
specifier|final
name|SitePaths
name|site
parameter_list|,
specifier|final
name|Libraries
name|libraries
parameter_list|,
specifier|final
name|Section
operator|.
name|Factory
name|sections
parameter_list|)
block|{
name|this
operator|.
name|ui
operator|=
name|ui
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|libraries
operator|=
name|libraries
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|sections
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
expr_stmt|;
block|}
DECL|method|run ()
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ui
operator|.
name|header
argument_list|(
literal|"SQL Database"
argument_list|)
expr_stmt|;
specifier|final
name|DataSourceProvider
operator|.
name|Type
name|db_type
init|=
name|database
operator|.
name|select
argument_list|(
literal|"Database server type"
argument_list|,
literal|"type"
argument_list|,
name|H2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|db_type
condition|)
block|{
case|case
name|MYSQL
case|:
name|libraries
operator|.
name|mysqlDriver
operator|.
name|downloadRequired
argument_list|()
expr_stmt|;
break|break;
block|}
specifier|final
name|boolean
name|userPassAuth
decl_stmt|;
switch|switch
condition|(
name|db_type
condition|)
block|{
case|case
name|H2
case|:
block|{
name|userPassAuth
operator|=
literal|false
expr_stmt|;
name|String
name|path
init|=
name|database
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"db/ReviewDB"
expr_stmt|;
name|database
operator|.
name|set
argument_list|(
literal|"database"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|File
name|db
init|=
name|site
operator|.
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"database.database must be supplied for H2"
argument_list|)
throw|;
block|}
name|db
operator|=
name|db
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|db
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"cannot create database.database "
operator|+
name|db
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|JDBC
case|:
block|{
name|userPassAuth
operator|=
literal|true
expr_stmt|;
name|database
operator|.
name|string
argument_list|(
literal|"Driver class name"
argument_list|,
literal|"driver"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|database
operator|.
name|string
argument_list|(
literal|"URL"
argument_list|,
literal|"url"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|POSTGRES
case|:
case|case
name|POSTGRESQL
case|:
case|case
name|MYSQL
case|:
block|{
name|userPassAuth
operator|=
literal|true
expr_stmt|;
specifier|final
name|String
name|defPort
init|=
literal|"("
operator|+
name|db_type
operator|.
name|toString
argument_list|()
operator|+
literal|" default)"
decl_stmt|;
name|database
operator|.
name|string
argument_list|(
literal|"Server hostname"
argument_list|,
literal|"hostname"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|database
operator|.
name|string
argument_list|(
literal|"Server port"
argument_list|,
literal|"port"
argument_list|,
name|defPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|database
operator|.
name|string
argument_list|(
literal|"Database name"
argument_list|,
literal|"database"
argument_list|,
literal|"reviewdb"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
name|die
argument_list|(
literal|"internal bug, database "
operator|+
name|db_type
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|userPassAuth
condition|)
block|{
name|database
operator|.
name|string
argument_list|(
literal|"Database username"
argument_list|,
literal|"username"
argument_list|,
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|database
operator|.
name|password
argument_list|(
literal|"username"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

