begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|launcher
operator|.
name|GerritLauncher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLClassLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|JythonShell
specifier|public
class|class
name|JythonShell
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JythonShell
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|STARTUP_RESOURCE
specifier|private
specifier|static
specifier|final
name|String
name|STARTUP_RESOURCE
init|=
literal|"com/google/gerrit/pgm/Startup.py"
decl_stmt|;
DECL|field|STARTUP_FILE
specifier|private
specifier|static
specifier|final
name|String
name|STARTUP_FILE
init|=
literal|"Startup.py"
decl_stmt|;
DECL|field|console
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|console
decl_stmt|;
DECL|field|pyObject
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|pyObject
decl_stmt|;
DECL|field|pySystemState
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|pySystemState
decl_stmt|;
DECL|field|shell
specifier|private
name|Object
name|shell
decl_stmt|;
DECL|field|injectedVariables
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|injectedVariables
decl_stmt|;
DECL|method|JythonShell ()
specifier|public
name|JythonShell
parameter_list|()
block|{
name|Properties
name|env
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
comment|// Let us inspect private class members
name|env
operator|.
name|setProperty
argument_list|(
literal|"python.security.respectJavaAccessibility"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|File
name|home
init|=
name|GerritLauncher
operator|.
name|getHomeDirectory
argument_list|()
decl_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|env
operator|.
name|setProperty
argument_list|(
literal|"python.cachedir"
argument_list|,
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"jythoncache"
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// For package introspection and "import com.google" to work,
comment|// Jython needs to inspect actual .jar files (not just classloader)
name|StringBuilder
name|classPath
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|ClassLoader
name|cl
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
name|cl
operator|instanceof
name|java
operator|.
name|net
operator|.
name|URLClassLoader
condition|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|URLClassLoader
name|ucl
init|=
operator|(
name|URLClassLoader
operator|)
name|cl
decl_stmt|;
for|for
control|(
name|URL
name|u
range|:
name|ucl
operator|.
name|getURLs
argument_list|()
control|)
block|{
if|if
condition|(
literal|"file"
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|classPath
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|classPath
operator|.
name|append
argument_list|(
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|pathSeparatorChar
argument_list|)
expr_stmt|;
block|}
name|classPath
operator|.
name|append
argument_list|(
name|u
operator|.
name|getFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|env
operator|.
name|setProperty
argument_list|(
literal|"java.class.path"
argument_list|,
name|classPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|console
operator|=
name|findClass
argument_list|(
literal|"org.python.util.InteractiveConsole"
argument_list|)
expr_stmt|;
name|pyObject
operator|=
name|findClass
argument_list|(
literal|"org.python.core.PyObject"
argument_list|)
expr_stmt|;
name|pySystemState
operator|=
name|findClass
argument_list|(
literal|"org.python.core.PySystemState"
argument_list|)
expr_stmt|;
name|runMethod
argument_list|(
name|pySystemState
argument_list|,
name|pySystemState
argument_list|,
literal|"initialize"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|Properties
operator|.
name|class
operator|,
name|Properties
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
literal|null
block|,
name|env
block|}
block|)
empty_stmt|;
try|try
block|{
name|shell
operator|=
name|console
operator|.
name|getConstructor
argument_list|(
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
block|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Jython shell instance created."
argument_list|)
expr_stmt|;
block|}
end_class

begin_catch
catch|catch
parameter_list|(
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|InvocationTargetException
decl||
name|NoSuchMethodException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|noInterpreter
argument_list|(
name|e
argument_list|)
throw|;
block|}
end_catch

begin_expr_stmt
name|injectedVariables
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|set
argument_list|(
literal|"Shell"
argument_list|,
name|this
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    protected
DECL|method|runMethod0 ( Class<?> klazz, Object instance, String name, Class<?>[] sig, Object[] args)
name|Object
name|runMethod0
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klazz
parameter_list|,
name|Object
name|instance
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|sig
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|InvocationTargetException
block|{
try|try
block|{
name|Method
name|m
decl_stmt|;
name|m
operator|=
name|klazz
operator|.
name|getMethod
argument_list|(
name|name
argument_list|,
name|sig
argument_list|)
expr_stmt|;
return|return
name|m
operator|.
name|invoke
argument_list|(
name|instance
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
decl||
name|IllegalAccessException
decl||
name|IllegalArgumentException
decl||
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
name|cannotStart
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|runMethod ( Class<?> klazz, Object instance, String name, Class<?>[] sig, Object[] args)
specifier|protected
name|Object
name|runMethod
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|klazz
parameter_list|,
name|Object
name|instance
parameter_list|,
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|sig
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
return|return
name|runMethod0
argument_list|(
name|klazz
argument_list|,
name|instance
argument_list|,
name|name
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|cannotStart
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|runInterpreter (String name, Class<?>[] sig, Object[] args)
specifier|protected
name|Object
name|runInterpreter
parameter_list|(
name|String
name|name
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|sig
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
block|{
return|return
name|runMethod
argument_list|(
name|console
argument_list|,
name|shell
argument_list|,
name|name
argument_list|,
name|sig
argument_list|,
name|args
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|getDefaultBanner ()
specifier|protected
name|String
name|getDefaultBanner
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|runInterpreter
argument_list|(
literal|"getDefaultBanner"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{}
operator|,
operator|new
name|Object
index|[]
block|{}
block|)
function|;
end_function

begin_function
unit|}    protected
DECL|method|printInjectedVariable (String id)
name|void
name|printInjectedVariable
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|runInterpreter
argument_list|(
literal|"exec"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
literal|"print '\"%s\" is \"%s\"' % (\""
operator|+
name|id
operator|+
literal|"\", "
operator|+
name|id
operator|+
literal|")"
block|}
block|)
function|;
end_function

begin_function
unit|}    public
DECL|method|run ()
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|String
name|key
range|:
name|injectedVariables
control|)
block|{
name|printInjectedVariable
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|reload
argument_list|()
expr_stmt|;
name|runInterpreter
argument_list|(
literal|"interact"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|pyObject
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|getDefaultBanner
argument_list|()
operator|+
literal|" running for Gerrit "
operator|+
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
operator|.
name|getVersion
argument_list|()
block|,
literal|null
block|,         }
block|)
function|;
end_function

begin_function
unit|}    public
DECL|method|set (String key, Object content)
name|void
name|set
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|content
parameter_list|)
block|{
name|runInterpreter
argument_list|(
literal|"set"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
operator|,
name|Object
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|key
block|,
name|content
block|}
block|)
function|;
end_function

begin_expr_stmt
name|injectedVariables
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    private
DECL|method|findClass (String klazzname)
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|findClass
parameter_list|(
name|String
name|klazzname
parameter_list|)
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|klazzname
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
name|noShell
argument_list|(
literal|"Class "
operator|+
name|klazzname
operator|+
literal|" not found"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
DECL|method|reload ()
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|execResource
argument_list|(
name|STARTUP_RESOURCE
argument_list|)
expr_stmt|;
name|execFile
argument_list|(
name|GerritLauncher
operator|.
name|getHomeDirectory
argument_list|()
argument_list|,
name|STARTUP_FILE
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|execResource (final String p)
specifier|protected
name|void
name|execResource
parameter_list|(
specifier|final
name|String
name|p
parameter_list|)
block|{
try|try
init|(
name|InputStream
name|in
init|=
name|JythonShell
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|p
argument_list|)
init|)
block|{
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|execStream
argument_list|(
name|in
argument_list|,
literal|"resource "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot load resource "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
DECL|method|execFile (final File parent, final String p)
specifier|protected
name|void
name|execFile
parameter_list|(
specifier|final
name|File
name|parent
parameter_list|,
specifier|final
name|String
name|p
parameter_list|)
block|{
try|try
block|{
name|File
name|script
init|=
operator|new
name|File
argument_list|(
name|parent
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|script
operator|.
name|canExecute
argument_list|()
condition|)
block|{
name|runMethod0
argument_list|(
name|console
argument_list|,
name|shell
argument_list|,
literal|"execfile"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|script
operator|.
name|getAbsolutePath
argument_list|()
block|}
block|)
empty_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"User initialization file "
operator|+
name|script
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is not found or not executable"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception occurred while loading file "
operator|+
name|p
operator|+
literal|" : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_catch
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"SecurityException occurred while loading file "
operator|+
name|p
operator|+
literal|" : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_function
unit|}    protected
DECL|method|execStream (final InputStream in, final String p)
name|void
name|execStream
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|,
specifier|final
name|String
name|p
parameter_list|)
block|{
try|try
block|{
name|runMethod0
argument_list|(
name|console
argument_list|,
name|shell
argument_list|,
literal|"execfile"
argument_list|,
operator|new
name|Class
argument_list|<
name|?
argument_list|>
index|[]
block|{
name|InputStream
operator|.
name|class
operator|,
name|String
operator|.
name|class
block|}
operator|,
operator|new
name|Object
index|[]
block|{
name|in
block|,
name|p
block|}
block|)
empty_stmt|;
block|}
end_function

begin_catch
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception occurred while loading "
operator|+
name|p
operator|+
literal|" : "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

begin_function
unit|}    private
DECL|method|noShell (final String m, Throwable why)
specifier|static
name|UnsupportedOperationException
name|noShell
parameter_list|(
specifier|final
name|String
name|m
parameter_list|,
name|Throwable
name|why
parameter_list|)
block|{
specifier|final
name|String
name|prefix
init|=
literal|"Cannot create Jython shell: "
decl_stmt|;
specifier|final
name|String
name|postfix
init|=
literal|"\n     (You might need to install jython.jar in the lib directory)"
decl_stmt|;
return|return
operator|new
name|UnsupportedOperationException
argument_list|(
name|prefix
operator|+
name|m
operator|+
name|postfix
argument_list|,
name|why
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|noInterpreter (Throwable why)
specifier|private
specifier|static
name|UnsupportedOperationException
name|noInterpreter
parameter_list|(
name|Throwable
name|why
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Cannot create Python interpreter"
decl_stmt|;
return|return
name|noShell
argument_list|(
name|msg
argument_list|,
name|why
argument_list|)
return|;
block|}
end_function

begin_function
DECL|method|cannotStart (Throwable why)
specifier|private
specifier|static
name|UnsupportedOperationException
name|cannotStart
parameter_list|(
name|Throwable
name|why
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Cannot start Jython shell"
decl_stmt|;
return|return
operator|new
name|UnsupportedOperationException
argument_list|(
name|msg
argument_list|,
name|why
argument_list|)
return|;
block|}
end_function

unit|}
end_unit

