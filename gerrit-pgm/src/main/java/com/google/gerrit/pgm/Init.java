begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|DataSourceProvider
operator|.
name|Context
operator|.
name|SINGLE_USER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Stage
operator|.
name|PRODUCTION
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|Browser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|InitFlags
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|InitModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|ReloadSiteLibrary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|init
operator|.
name|SitePathInitializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ConsoleUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|Die
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ErrorLogFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|IoUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|SiteProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePath
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|LocalDiskRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitProjectImporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|schema
operator|.
name|SchemaUpdater
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|CreationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Guice
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|spi
operator|.
name|Message
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/** Initialize a new Gerrit installation. */
end_comment

begin_class
DECL|class|Init
specifier|public
class|class
name|Init
extends|extends
name|SiteProgram
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--batch"
argument_list|,
name|usage
operator|=
literal|"Batch mode; skip interactive prompting"
argument_list|)
DECL|field|batchMode
specifier|private
name|boolean
name|batchMode
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--import-projects"
argument_list|,
name|usage
operator|=
literal|"Import git repositories as projects"
argument_list|)
DECL|field|importProjects
specifier|private
name|boolean
name|importProjects
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--no-auto-start"
argument_list|,
name|usage
operator|=
literal|"Don't automatically start daemon after init"
argument_list|)
DECL|field|noAutoStart
specifier|private
name|boolean
name|noAutoStart
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ErrorLogFile
operator|.
name|errorOnlyConsole
argument_list|()
expr_stmt|;
specifier|final
name|SiteInit
name|init
init|=
name|createSiteInit
argument_list|()
decl_stmt|;
name|init
operator|.
name|flags
operator|.
name|importProjects
operator|=
name|importProjects
expr_stmt|;
name|init
operator|.
name|flags
operator|.
name|autoStart
operator|=
operator|!
name|noAutoStart
operator|&&
name|init
operator|.
name|site
operator|.
name|isNew
expr_stmt|;
specifier|final
name|SiteRun
name|run
decl_stmt|;
try|try
block|{
name|init
operator|.
name|initializer
operator|.
name|run
argument_list|()
expr_stmt|;
name|init
operator|.
name|flags
operator|.
name|deleteOnFailure
operator|=
literal|false
expr_stmt|;
name|run
operator|=
name|createSiteRun
argument_list|(
name|init
argument_list|)
expr_stmt|;
name|run
operator|.
name|schemaUpdater
operator|.
name|update
argument_list|()
expr_stmt|;
name|run
operator|.
name|importGit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
if|if
condition|(
name|init
operator|.
name|flags
operator|.
name|deleteOnFailure
condition|)
block|{
name|recursiveDelete
argument_list|(
name|getSitePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|failure
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|failure
parameter_list|)
block|{
if|if
condition|(
name|init
operator|.
name|flags
operator|.
name|deleteOnFailure
condition|)
block|{
name|recursiveDelete
argument_list|(
name|getSitePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|failure
throw|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Initialized "
operator|+
name|getSitePath
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
name|run
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
DECL|class|SiteInit
specifier|static
class|class
name|SiteInit
block|{
DECL|field|site
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|flags
specifier|final
name|InitFlags
name|flags
decl_stmt|;
DECL|field|ui
specifier|final
name|ConsoleUI
name|ui
decl_stmt|;
DECL|field|initializer
specifier|final
name|SitePathInitializer
name|initializer
decl_stmt|;
annotation|@
name|Inject
DECL|method|SiteInit (final SitePaths site, final InitFlags flags, final ConsoleUI ui, final SitePathInitializer initializer)
name|SiteInit
parameter_list|(
specifier|final
name|SitePaths
name|site
parameter_list|,
specifier|final
name|InitFlags
name|flags
parameter_list|,
specifier|final
name|ConsoleUI
name|ui
parameter_list|,
specifier|final
name|SitePathInitializer
name|initializer
parameter_list|)
block|{
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|ui
operator|=
name|ui
expr_stmt|;
name|this
operator|.
name|initializer
operator|=
name|initializer
expr_stmt|;
block|}
block|}
DECL|method|createSiteInit ()
specifier|private
name|SiteInit
name|createSiteInit
parameter_list|()
block|{
specifier|final
name|ConsoleUI
name|ui
init|=
name|ConsoleUI
operator|.
name|getInstance
argument_list|(
name|batchMode
argument_list|)
decl_stmt|;
specifier|final
name|File
name|sitePath
init|=
name|getSitePath
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Module
argument_list|>
name|m
init|=
operator|new
name|ArrayList
argument_list|<
name|Module
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|InitModule
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|ConsoleUI
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|ui
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|File
operator|.
name|class
argument_list|)
operator|.
name|annotatedWith
argument_list|(
name|SitePath
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|sitePath
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|ReloadSiteLibrary
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
operator|new
name|ReloadSiteLibrary
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|reload
parameter_list|()
block|{
name|Init
operator|.
name|super
operator|.
name|loadSiteLib
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|Guice
operator|.
name|createInjector
argument_list|(
name|PRODUCTION
argument_list|,
name|m
argument_list|)
operator|.
name|getInstance
argument_list|(
name|SiteInit
operator|.
name|class
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CreationException
name|ce
parameter_list|)
block|{
specifier|final
name|Message
name|first
init|=
name|ce
operator|.
name|getErrorMessages
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Throwable
name|why
init|=
name|first
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|why
operator|instanceof
name|Die
condition|)
block|{
throw|throw
operator|(
name|Die
operator|)
name|why
throw|;
block|}
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|why
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|why
operator|=
name|why
operator|.
name|getCause
argument_list|()
expr_stmt|;
while|while
condition|(
name|why
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"\n  caused by "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|why
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|why
operator|=
name|why
operator|.
name|getCause
argument_list|()
expr_stmt|;
block|}
throw|throw
name|die
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|RuntimeException
argument_list|(
literal|"InitInjector failed"
argument_list|,
name|ce
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|class|SiteRun
specifier|static
class|class
name|SiteRun
block|{
DECL|field|ui
specifier|final
name|ConsoleUI
name|ui
decl_stmt|;
DECL|field|site
specifier|final
name|SitePaths
name|site
decl_stmt|;
DECL|field|flags
specifier|final
name|InitFlags
name|flags
decl_stmt|;
DECL|field|schemaUpdater
specifier|final
name|SchemaUpdater
name|schemaUpdater
decl_stmt|;
DECL|field|repositoryManager
specifier|final
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
DECL|field|gitProjectImporter
specifier|final
name|GitProjectImporter
name|gitProjectImporter
decl_stmt|;
DECL|field|browser
specifier|final
name|Browser
name|browser
decl_stmt|;
annotation|@
name|Inject
DECL|method|SiteRun (final ConsoleUI ui, final SitePaths site, final InitFlags flags, final SchemaUpdater schemaUpdater, final GitRepositoryManager repositoryManager, final GitProjectImporter gitProjectImporter, final Browser browser)
name|SiteRun
parameter_list|(
specifier|final
name|ConsoleUI
name|ui
parameter_list|,
specifier|final
name|SitePaths
name|site
parameter_list|,
specifier|final
name|InitFlags
name|flags
parameter_list|,
specifier|final
name|SchemaUpdater
name|schemaUpdater
parameter_list|,
specifier|final
name|GitRepositoryManager
name|repositoryManager
parameter_list|,
specifier|final
name|GitProjectImporter
name|gitProjectImporter
parameter_list|,
specifier|final
name|Browser
name|browser
parameter_list|)
block|{
name|this
operator|.
name|ui
operator|=
name|ui
expr_stmt|;
name|this
operator|.
name|site
operator|=
name|site
expr_stmt|;
name|this
operator|.
name|flags
operator|=
name|flags
expr_stmt|;
name|this
operator|.
name|schemaUpdater
operator|=
name|schemaUpdater
expr_stmt|;
name|this
operator|.
name|repositoryManager
operator|=
name|repositoryManager
expr_stmt|;
name|this
operator|.
name|gitProjectImporter
operator|=
name|gitProjectImporter
expr_stmt|;
name|this
operator|.
name|browser
operator|=
name|browser
expr_stmt|;
block|}
DECL|method|importGit ()
name|void
name|importGit
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
block|{
if|if
condition|(
name|flags
operator|.
name|importProjects
condition|)
block|{
name|gitProjectImporter
operator|.
name|run
argument_list|(
operator|new
name|GitProjectImporter
operator|.
name|Messages
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|info
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|warning
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start ()
name|void
name|start
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|flags
operator|.
name|autoStart
condition|)
block|{
if|if
condition|(
name|IoUtil
operator|.
name|isWin32
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Automatic startup not supported on Win32."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startDaemon
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|isBatch
argument_list|()
condition|)
block|{
name|browser
operator|.
name|open
argument_list|(
name|PageLinks
operator|.
name|ADMIN_PROJECTS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|startDaemon ()
name|void
name|startDaemon
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|argv
init|=
block|{
name|site
operator|.
name|gerrit_sh
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"start"
block|}
decl_stmt|;
specifier|final
name|Process
name|proc
decl_stmt|;
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Executing "
operator|+
name|argv
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|proc
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: cannot start Gerrit: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
name|IoUtil
operator|.
name|copyWithThread
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|IoUtil
operator|.
name|copyWithThread
argument_list|(
name|proc
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
specifier|final
name|int
name|rc
init|=
name|proc
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: cannot start Gerrit: exit status "
operator|+
name|rc
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// retry
block|}
block|}
block|}
block|}
DECL|method|createSiteRun (final SiteInit init)
specifier|private
name|SiteRun
name|createSiteRun
parameter_list|(
specifier|final
name|SiteInit
name|init
parameter_list|)
block|{
return|return
name|createSysInjector
argument_list|(
name|init
argument_list|)
operator|.
name|getInstance
argument_list|(
name|SiteRun
operator|.
name|class
argument_list|)
return|;
block|}
DECL|method|createSysInjector (final SiteInit init)
specifier|private
name|Injector
name|createSysInjector
parameter_list|(
specifier|final
name|SiteInit
name|init
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<
name|Module
argument_list|>
argument_list|()
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|ConsoleUI
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|init
operator|.
name|ui
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|InitFlags
operator|.
name|class
argument_list|)
operator|.
name|toInstance
argument_list|(
name|init
operator|.
name|flags
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GitRepositoryManager
operator|.
name|class
argument_list|)
operator|.
name|to
argument_list|(
name|LocalDiskRepositoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|bind
argument_list|(
name|GitProjectImporter
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|createDbInjector
argument_list|(
name|SINGLE_USER
argument_list|)
operator|.
name|createChildInjector
argument_list|(
name|modules
argument_list|)
return|;
block|}
DECL|method|recursiveDelete (File path)
specifier|private
specifier|static
name|void
name|recursiveDelete
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|File
index|[]
name|entries
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|e
range|:
name|entries
control|)
block|{
name|recursiveDelete
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|delete
argument_list|()
operator|&&
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warn: Cannot remove "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

