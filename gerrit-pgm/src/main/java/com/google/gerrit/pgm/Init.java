begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2009 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.pgm
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|DataSourceProvider
operator|.
name|Context
operator|.
name|SINGLE_USER
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|DataSourceProvider
operator|.
name|Type
operator|.
name|H2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|PageLinks
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|main
operator|.
name|GerritLauncher
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ConsoleUI
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|DataSourceProvider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|ErrorLogFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|IoUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|LibraryDownloader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|util
operator|.
name|SiteProgram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|AuthType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|ReviewDb
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|SystemConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|reviewdb
operator|.
name|Project
operator|.
name|SubmitType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|ConfigUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|git
operator|.
name|GitRepositoryManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|mail
operator|.
name|SmtpEmailSender
operator|.
name|Encryption
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|SignedToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|SchemaFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|AbstractModule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Injector
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|common
operator|.
name|util
operator|.
name|SecurityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sshd
operator|.
name|server
operator|.
name|keyprovider
operator|.
name|SimpleGeneratorHostKeyProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|errors
operator|.
name|ConfigInvalidException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|FileBasedConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|LockFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|RepositoryCache
operator|.
name|FileKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|util
operator|.
name|SystemReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|util
operator|.
name|StartBrowser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/** Initialize a new Gerrit installation. */
end_comment

begin_class
DECL|class|Init
specifier|public
class|class
name|Init
extends|extends
name|SiteProgram
block|{
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--batch"
argument_list|,
name|usage
operator|=
literal|"Batch mode; skip interactive prompting"
argument_list|)
DECL|field|batchMode
specifier|private
name|boolean
name|batchMode
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--import-projects"
argument_list|,
name|usage
operator|=
literal|"Import git repositories as projects"
argument_list|)
DECL|field|importProjects
specifier|private
name|boolean
name|importProjects
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--no-auto-start"
argument_list|,
name|usage
operator|=
literal|"Don't automatically start daemon after init"
argument_list|)
DECL|field|noAutoStart
specifier|private
name|boolean
name|noAutoStart
decl_stmt|;
annotation|@
name|Inject
DECL|field|repositoryManager
specifier|private
name|GitRepositoryManager
name|repositoryManager
decl_stmt|;
annotation|@
name|Inject
DECL|field|schema
specifier|private
name|SchemaFactory
argument_list|<
name|ReviewDb
argument_list|>
name|schema
decl_stmt|;
DECL|field|isNew
specifier|private
name|boolean
name|isNew
decl_stmt|;
DECL|field|deleteOnFailure
specifier|private
name|boolean
name|deleteOnFailure
decl_stmt|;
DECL|field|ui
specifier|private
name|ConsoleUI
name|ui
decl_stmt|;
DECL|field|dbInjector
specifier|private
name|Injector
name|dbInjector
decl_stmt|;
DECL|field|sysInjector
specifier|private
name|Injector
name|sysInjector
decl_stmt|;
DECL|field|site_path
specifier|private
name|File
name|site_path
decl_stmt|;
DECL|field|bin_dir
specifier|private
name|File
name|bin_dir
decl_stmt|;
DECL|field|etc_dir
specifier|private
name|File
name|etc_dir
decl_stmt|;
DECL|field|lib_dir
specifier|private
name|File
name|lib_dir
decl_stmt|;
DECL|field|logs_dir
specifier|private
name|File
name|logs_dir
decl_stmt|;
DECL|field|static_dir
specifier|private
name|File
name|static_dir
decl_stmt|;
DECL|field|gerrit_sh
specifier|private
name|File
name|gerrit_sh
decl_stmt|;
DECL|field|gerrit_config
specifier|private
name|File
name|gerrit_config
decl_stmt|;
DECL|field|secure_config
specifier|private
name|File
name|secure_config
decl_stmt|;
DECL|field|replication_config
specifier|private
name|File
name|replication_config
decl_stmt|;
DECL|field|cfg
specifier|private
name|FileBasedConfig
name|cfg
decl_stmt|;
DECL|field|sec
specifier|private
name|FileBasedConfig
name|sec
decl_stmt|;
annotation|@
name|Override
DECL|method|run ()
specifier|public
name|int
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|ErrorLogFile
operator|.
name|errorOnlyConsole
argument_list|()
expr_stmt|;
name|ui
operator|=
name|ConsoleUI
operator|.
name|getInstance
argument_list|(
name|batchMode
argument_list|)
expr_stmt|;
name|initPathLocations
argument_list|()
expr_stmt|;
if|if
condition|(
name|site_path
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
index|[]
name|contents
init|=
name|site_path
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|contents
operator|!=
literal|null
condition|)
name|isNew
operator|=
name|contents
operator|.
name|length
operator|==
literal|0
expr_stmt|;
elseif|else
if|if
condition|(
name|site_path
operator|.
name|isDirectory
argument_list|()
condition|)
throw|throw
name|die
argument_list|(
literal|"Cannot access "
operator|+
name|site_path
argument_list|)
throw|;
else|else
throw|throw
name|die
argument_list|(
literal|"Not a directory: "
operator|+
name|site_path
argument_list|)
throw|;
block|}
else|else
block|{
name|isNew
operator|=
literal|true
expr_stmt|;
block|}
try|try
block|{
name|upgradeFrom2_0
argument_list|()
expr_stmt|;
name|initSitePath
argument_list|()
expr_stmt|;
name|generateSshHostKeys
argument_list|()
expr_stmt|;
name|deleteOnFailure
operator|=
literal|false
expr_stmt|;
name|inject
argument_list|()
expr_stmt|;
name|updateSystemConfig
argument_list|()
expr_stmt|;
name|initGit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|failure
parameter_list|)
block|{
if|if
condition|(
name|deleteOnFailure
condition|)
block|{
name|recursiveDelete
argument_list|(
name|getSitePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|failure
throw|;
block|}
catch|catch
parameter_list|(
name|Error
name|failure
parameter_list|)
block|{
if|if
condition|(
name|deleteOnFailure
condition|)
block|{
name|recursiveDelete
argument_list|(
name|getSitePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|failure
throw|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Initialized "
operator|+
name|getSitePath
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNew
operator|&&
operator|!
name|noAutoStart
condition|)
block|{
if|if
condition|(
name|IoUtil
operator|.
name|isWin32
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Automatic startup not supported on this platform."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|start
argument_list|()
expr_stmt|;
name|openBrowser
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
DECL|method|initPathLocations ()
specifier|private
name|void
name|initPathLocations
parameter_list|()
block|{
name|site_path
operator|=
name|getSitePath
argument_list|()
expr_stmt|;
name|bin_dir
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
literal|"bin"
argument_list|)
expr_stmt|;
name|etc_dir
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
literal|"etc"
argument_list|)
expr_stmt|;
name|lib_dir
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
literal|"lib"
argument_list|)
expr_stmt|;
name|logs_dir
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
literal|"logs"
argument_list|)
expr_stmt|;
name|static_dir
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
literal|"static"
argument_list|)
expr_stmt|;
name|gerrit_sh
operator|=
operator|new
name|File
argument_list|(
name|bin_dir
argument_list|,
literal|"gerrit.sh"
argument_list|)
expr_stmt|;
name|gerrit_config
operator|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"gerrit.config"
argument_list|)
expr_stmt|;
name|secure_config
operator|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"secure.config"
argument_list|)
expr_stmt|;
name|replication_config
operator|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"replication.config"
argument_list|)
expr_stmt|;
name|cfg
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|gerrit_config
argument_list|)
expr_stmt|;
name|sec
operator|=
operator|new
name|FileBasedConfig
argument_list|(
name|secure_config
argument_list|)
expr_stmt|;
block|}
DECL|method|upgradeFrom2_0 ()
specifier|private
name|void
name|upgradeFrom2_0
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|isPre2_1
init|=
literal|false
decl_stmt|;
specifier|final
name|String
index|[]
name|etcFiles
init|=
block|{
literal|"gerrit.config"
block|,
literal|"secure.config"
block|,
literal|"replication.config"
block|,
literal|"ssh_host_rsa_key"
block|,
literal|"ssh_host_rsa_key.pub"
block|,
literal|"ssh_host_dsa_key"
block|,
literal|"ssh_host_dsa_key.pub"
block|,
literal|"ssh_host_key"
block|,
literal|"contact_information.pub"
block|,
literal|"gitweb_config.perl"
block|,
literal|"keystore"
block|,
literal|"GerritSite.css"
block|,
literal|"GerritSiteFooter.html"
block|,
literal|"GerritSiteHeader.html"
block|}
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|etcFiles
control|)
block|{
if|if
condition|(
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
name|name
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|isPre2_1
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|isPre2_1
condition|)
block|{
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
literal|"Upgrade '%s'"
argument_list|,
name|site_path
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"aborted by user"
argument_list|)
throw|;
block|}
name|mkdir
argument_list|(
name|etc_dir
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|etcFiles
control|)
block|{
specifier|final
name|File
name|src
init|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dst
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|dst
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"File "
operator|+
name|src
operator|+
literal|" would overwrite "
operator|+
name|dst
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|src
operator|.
name|renameTo
argument_list|(
name|dst
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot rename "
operator|+
name|src
operator|+
literal|" to "
operator|+
name|dst
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
DECL|method|initSitePath ()
specifier|private
name|void
name|initSitePath
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
throws|,
name|ConfigInvalidException
block|{
name|ui
operator|.
name|header
argument_list|(
literal|"Gerrit Code Review %s"
argument_list|,
name|version
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isNew
condition|)
block|{
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
literal|"Create '%s'"
argument_list|,
name|site_path
operator|.
name|getCanonicalPath
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"aborted by user"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|site_path
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|site_path
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot make directory "
operator|+
name|site_path
argument_list|)
throw|;
block|}
name|deleteOnFailure
operator|=
literal|true
expr_stmt|;
block|}
name|mkdir
argument_list|(
name|bin_dir
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|etc_dir
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|lib_dir
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|logs_dir
argument_list|)
expr_stmt|;
name|mkdir
argument_list|(
name|static_dir
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|load
argument_list|()
expr_stmt|;
name|sec
operator|.
name|load
argument_list|()
expr_stmt|;
name|downloadOptionalLibraries
argument_list|()
expr_stmt|;
name|init_gerrit_basepath
argument_list|()
expr_stmt|;
name|init_database
argument_list|()
expr_stmt|;
name|init_auth
argument_list|()
expr_stmt|;
name|init_sendemail
argument_list|()
expr_stmt|;
name|init_container
argument_list|()
expr_stmt|;
name|init_sshd
argument_list|()
expr_stmt|;
name|init_httpd
argument_list|()
expr_stmt|;
name|init_cache
argument_list|()
expr_stmt|;
name|cfg
operator|.
name|save
argument_list|()
expr_stmt|;
name|saveSecureConfig
argument_list|(
name|sec
argument_list|)
expr_stmt|;
if|if
condition|(
name|ui
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|secure_config
operator|.
name|exists
argument_list|()
condition|)
block|{
name|chmod
argument_list|(
literal|0600
argument_list|,
name|secure_config
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|replication_config
operator|.
name|exists
argument_list|()
condition|)
block|{
name|replication_config
operator|.
name|createNewFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gerrit_sh
operator|.
name|exists
argument_list|()
condition|)
block|{
name|extract
argument_list|(
name|gerrit_sh
argument_list|,
literal|"WEB-INF/extra/bin/gerrit.sh"
argument_list|)
expr_stmt|;
name|chmod
argument_list|(
literal|0755
argument_list|,
name|gerrit_sh
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|updateSystemConfig ()
specifier|private
name|void
name|updateSystemConfig
parameter_list|()
throws|throws
name|OrmException
block|{
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SystemConfig
name|sc
init|=
name|db
operator|.
name|systemConfig
argument_list|()
operator|.
name|get
argument_list|(
operator|new
name|SystemConfig
operator|.
name|Key
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sc
operator|==
literal|null
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"No record in system_config table"
argument_list|)
throw|;
block|}
try|try
block|{
name|sc
operator|.
name|sitePath
operator|=
name|getSitePath
argument_list|()
operator|.
name|getCanonicalPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sc
operator|.
name|sitePath
operator|=
name|getSitePath
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
name|db
operator|.
name|systemConfig
argument_list|()
operator|.
name|update
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|sc
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|initGit ()
specifier|private
name|void
name|initGit
parameter_list|()
throws|throws
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|File
name|root
init|=
name|repositoryManager
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|importProjects
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Scanning projects under "
operator|+
name|root
argument_list|)
expr_stmt|;
specifier|final
name|ReviewDb
name|db
init|=
name|schema
operator|.
name|open
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|have
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Project
name|p
range|:
name|db
operator|.
name|projects
argument_list|()
operator|.
name|all
argument_list|()
control|)
block|{
name|have
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|importProjects
argument_list|(
name|root
argument_list|,
literal|""
argument_list|,
name|db
argument_list|,
name|have
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|db
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|importProjects (final File dir, final String prefix, final ReviewDb db, final Set<String> have)
specifier|private
name|void
name|importProjects
parameter_list|(
specifier|final
name|File
name|dir
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|ReviewDb
name|db
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|have
parameter_list|)
throws|throws
name|OrmException
throws|,
name|IOException
block|{
specifier|final
name|File
index|[]
name|ls
init|=
name|dir
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|ls
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|File
name|f
range|:
name|ls
control|)
block|{
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|".."
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{       }
elseif|else
if|if
condition|(
name|FileKey
operator|.
name|isGitRepository
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|String
name|name
init|=
name|f
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
name|name
operator|=
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefix
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|name
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
name|name
operator|=
name|prefix
operator|+
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|4
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|prefix
operator|+
name|name
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ignoring non-standard name '"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|have
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|Project
operator|.
name|NameKey
name|nameKey
init|=
operator|new
name|Project
operator|.
name|NameKey
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|Project
operator|.
name|Id
name|idKey
init|=
operator|new
name|Project
operator|.
name|Id
argument_list|(
name|db
operator|.
name|nextProjectId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Project
name|p
init|=
operator|new
name|Project
argument_list|(
name|nameKey
argument_list|,
name|idKey
argument_list|)
decl_stmt|;
name|p
operator|.
name|setDescription
argument_list|(
name|repositoryManager
operator|.
name|getProjectDescription
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setSubmitType
argument_list|(
name|SubmitType
operator|.
name|MERGE_IF_NECESSARY
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseContributorAgreements
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setUseSignedOffBy
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|db
operator|.
name|projects
argument_list|()
operator|.
name|insert
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|importProjects
argument_list|(
name|f
argument_list|,
name|prefix
operator|+
name|f
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|,
name|db
argument_list|,
name|have
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|saveSecureConfig (final FileBasedConfig sec)
specifier|private
name|void
name|saveSecureConfig
parameter_list|(
specifier|final
name|FileBasedConfig
name|sec
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|out
init|=
name|Constants
operator|.
name|encode
argument_list|(
name|sec
operator|.
name|toText
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|File
name|path
init|=
name|sec
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|LockFile
name|lf
init|=
operator|new
name|LockFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|lock
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot lock "
operator|+
name|path
argument_list|)
throw|;
block|}
try|try
block|{
name|chmod
argument_list|(
literal|0600
argument_list|,
operator|new
name|File
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
operator|+
literal|".lock"
argument_list|)
argument_list|)
expr_stmt|;
name|lf
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lf
operator|.
name|commit
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot commit write to "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|lf
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|mkdir (final File path)
specifier|private
specifier|static
name|void
name|mkdir
parameter_list|(
specifier|final
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|path
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot make directory "
operator|+
name|path
argument_list|)
throw|;
block|}
block|}
DECL|method|chmod (final int mode, final File path)
specifier|private
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|File
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|path
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Cannot create "
operator|+
name|path
argument_list|)
throw|;
block|}
name|path
operator|.
name|setReadable
argument_list|(
literal|false
argument_list|,
literal|false
comment|/* all */
argument_list|)
expr_stmt|;
name|path
operator|.
name|setWritable
argument_list|(
literal|false
argument_list|,
literal|false
comment|/* all */
argument_list|)
expr_stmt|;
name|path
operator|.
name|setExecutable
argument_list|(
literal|false
argument_list|,
literal|false
comment|/* all */
argument_list|)
expr_stmt|;
name|path
operator|.
name|setReadable
argument_list|(
operator|(
name|mode
operator|&
literal|0400
operator|)
operator|==
literal|0400
argument_list|,
literal|true
comment|/* owner only */
argument_list|)
expr_stmt|;
name|path
operator|.
name|setWritable
argument_list|(
operator|(
name|mode
operator|&
literal|0200
operator|)
operator|==
literal|0200
argument_list|,
literal|true
comment|/* owner only */
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isDirectory
argument_list|()
operator|||
operator|(
name|mode
operator|&
literal|0100
operator|)
operator|==
literal|0100
condition|)
block|{
name|path
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|true
comment|/* owner only */
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mode
operator|&
literal|0044
operator|)
operator|==
literal|0044
condition|)
block|{
name|path
operator|.
name|setReadable
argument_list|(
literal|true
argument_list|,
literal|false
comment|/* all */
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|mode
operator|&
literal|0011
operator|)
operator|==
literal|0011
condition|)
block|{
name|path
operator|.
name|setExecutable
argument_list|(
literal|true
argument_list|,
literal|false
comment|/* all */
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|downloadOptionalLibraries ()
specifier|private
name|void
name|downloadOptionalLibraries
parameter_list|()
block|{
comment|// Download and install BouncyCastle if the user wants to use it.
comment|//
name|createDownloader
argument_list|()
operator|.
name|setRequired
argument_list|(
literal|false
argument_list|)
operator|.
name|setName
argument_list|(
literal|"Bouncy Castle Crypto v144"
argument_list|)
operator|.
name|setJarUrl
argument_list|(
literal|"http://www.bouncycastle.org/download/bcprov-jdk16-144.jar"
argument_list|)
operator|.
name|setSHA1
argument_list|(
literal|"6327a5f7a3dc45e0fd735adb5d08c5a74c05c20c"
argument_list|)
operator|.
name|download
argument_list|()
expr_stmt|;
name|loadSiteLib
argument_list|()
expr_stmt|;
block|}
DECL|method|init_gerrit_basepath ()
specifier|private
name|void
name|init_gerrit_basepath
parameter_list|()
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"gerrit"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"Git Repositories"
argument_list|)
expr_stmt|;
name|File
name|d
init|=
name|cfg
operator|.
name|path
argument_list|(
literal|"Location of Git repositories"
argument_list|,
literal|"basePath"
argument_list|,
literal|"git"
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"gerrit.basePath is required"
argument_list|)
throw|;
block|}
if|if
condition|(
name|d
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|importProjects
operator|&&
name|d
operator|.
name|list
argument_list|()
operator|!=
literal|null
operator|&&
name|d
operator|.
name|list
argument_list|()
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|importProjects
operator|=
name|ui
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
literal|"Import existing repositories"
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|d
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot create "
operator|+
name|d
argument_list|)
throw|;
block|}
block|}
DECL|method|init_database ()
specifier|private
name|void
name|init_database
parameter_list|()
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"database"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"SQL Database"
argument_list|)
expr_stmt|;
specifier|final
name|DataSourceProvider
operator|.
name|Type
name|db_type
init|=
name|cfg
operator|.
name|select
argument_list|(
literal|"Database server type"
argument_list|,
literal|"type"
argument_list|,
name|H2
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|db_type
condition|)
block|{
case|case
name|MYSQL
case|:
name|createDownloader
argument_list|()
operator|.
name|setRequired
argument_list|(
literal|true
argument_list|)
operator|.
name|setName
argument_list|(
literal|"MySQL Connector/J 5.1.10"
argument_list|)
operator|.
name|setJarUrl
argument_list|(
literal|"http://repo2.maven.org/maven2/mysql/mysql-connector-java/5.1.10/mysql-connector-java-5.1.10.jar"
argument_list|)
operator|.
name|setSHA1
argument_list|(
literal|"b83574124f1a00d6f70d56ba64aa52b8e1588e6d"
argument_list|)
operator|.
name|download
argument_list|()
expr_stmt|;
name|loadSiteLib
argument_list|()
expr_stmt|;
break|break;
block|}
specifier|final
name|boolean
name|userPassAuth
decl_stmt|;
switch|switch
condition|(
name|db_type
condition|)
block|{
case|case
name|H2
case|:
block|{
name|userPassAuth
operator|=
literal|false
expr_stmt|;
name|String
name|path
init|=
name|cfg
operator|.
name|get
argument_list|(
literal|"database"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"db/ReviewDB"
expr_stmt|;
name|cfg
operator|.
name|set
argument_list|(
literal|"database"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
name|File
name|db
init|=
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"database.database must be supplied for H2"
argument_list|)
throw|;
block|}
name|db
operator|=
name|db
operator|.
name|getParentFile
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|db
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"cannot create database.database "
operator|+
name|db
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|JDBC
case|:
block|{
name|userPassAuth
operator|=
literal|true
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Driver class name"
argument_list|,
literal|"driver"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"URL"
argument_list|,
literal|"url"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|POSTGRES
case|:
case|case
name|POSTGRESQL
case|:
case|case
name|MYSQL
case|:
block|{
name|userPassAuth
operator|=
literal|true
expr_stmt|;
specifier|final
name|String
name|defPort
init|=
literal|"("
operator|+
name|db_type
operator|.
name|toString
argument_list|()
operator|+
literal|" default)"
decl_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Server hostname"
argument_list|,
literal|"hostname"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Server port"
argument_list|,
literal|"port"
argument_list|,
name|defPort
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Database name"
argument_list|,
literal|"database"
argument_list|,
literal|"reviewdb"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
name|die
argument_list|(
literal|"internal bug, database "
operator|+
name|db_type
operator|+
literal|" not supported"
argument_list|)
throw|;
block|}
if|if
condition|(
name|userPassAuth
condition|)
block|{
name|cfg
operator|.
name|string
argument_list|(
literal|"Database username"
argument_list|,
literal|"username"
argument_list|,
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|password
argument_list|(
literal|"username"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|init_auth ()
specifier|private
name|void
name|init_auth
parameter_list|()
block|{
specifier|final
name|Section
name|auth
init|=
operator|new
name|Section
argument_list|(
literal|"auth"
argument_list|)
decl_stmt|;
specifier|final
name|Section
name|ldap
init|=
operator|new
name|Section
argument_list|(
literal|"ldap"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"User Authentication"
argument_list|)
expr_stmt|;
specifier|final
name|AuthType
name|auth_type
init|=
name|auth
operator|.
name|select
argument_list|(
literal|"Authentication method"
argument_list|,
literal|"type"
argument_list|,
name|AuthType
operator|.
name|OPENID
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|auth_type
condition|)
block|{
case|case
name|HTTP
case|:
case|case
name|HTTP_LDAP
case|:
block|{
name|String
name|hdr
init|=
name|auth
operator|.
name|get
argument_list|(
literal|"httpHeader"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ui
operator|.
name|yesno
argument_list|(
name|hdr
operator|!=
literal|null
argument_list|,
literal|"Get username from custom HTTP header"
argument_list|)
condition|)
block|{
name|auth
operator|.
name|string
argument_list|(
literal|"Username HTTP header"
argument_list|,
literal|"httpHeader"
argument_list|,
literal|"SM_USER"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hdr
operator|!=
literal|null
condition|)
block|{
name|auth
operator|.
name|unset
argument_list|(
literal|"httpHeader"
argument_list|)
expr_stmt|;
block|}
name|auth
operator|.
name|string
argument_list|(
literal|"SSO logout URL"
argument_list|,
literal|"logoutUrl"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
switch|switch
condition|(
name|auth_type
condition|)
block|{
case|case
name|LDAP
case|:
case|case
name|HTTP_LDAP
case|:
block|{
name|String
name|server
init|=
name|ldap
operator|.
name|string
argument_list|(
literal|"LDAP server"
argument_list|,
literal|"server"
argument_list|,
literal|"ldap://localhost"
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|!=
literal|null
comment|//
operator|&&
operator|!
name|server
operator|.
name|startsWith
argument_list|(
literal|"ldap://"
argument_list|)
comment|//
operator|&&
operator|!
name|server
operator|.
name|startsWith
argument_list|(
literal|"ldaps://"
argument_list|)
condition|)
block|{
if|if
condition|(
name|ui
operator|.
name|yesno
argument_list|(
literal|false
argument_list|,
literal|"Use SSL"
argument_list|)
condition|)
block|{
name|server
operator|=
literal|"ldaps://"
operator|+
name|server
expr_stmt|;
block|}
else|else
block|{
name|server
operator|=
literal|"ldap://"
operator|+
name|server
expr_stmt|;
block|}
name|ldap
operator|.
name|set
argument_list|(
literal|"server"
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|ldap
operator|.
name|string
argument_list|(
literal|"LDAP username"
argument_list|,
literal|"username"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ldap
operator|.
name|password
argument_list|(
literal|"username"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|def_dn
init|=
name|dnOf
argument_list|(
name|server
argument_list|)
decl_stmt|;
name|String
name|aBase
init|=
name|ldap
operator|.
name|string
argument_list|(
literal|"Account BaseDN"
argument_list|,
literal|"accountBase"
argument_list|,
name|def_dn
argument_list|)
decl_stmt|;
name|String
name|gBase
init|=
name|ldap
operator|.
name|string
argument_list|(
literal|"Group BaseDN"
argument_list|,
literal|"groupBase"
argument_list|,
name|aBase
argument_list|)
decl_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|init_sendemail ()
specifier|private
name|void
name|init_sendemail
parameter_list|()
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"sendemail"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"Email Delivery"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|hostname
init|=
name|cfg
operator|.
name|string
argument_list|(
literal|"SMTP server hostname"
argument_list|,
literal|"smtpServer"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"SMTP server port"
argument_list|,
literal|"smtpServerPort"
argument_list|,
literal|"(default)"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Encryption
name|enc
init|=
name|cfg
operator|.
name|select
argument_list|(
literal|"SMTP encryption"
argument_list|,
literal|"smtpEncryption"
argument_list|,
name|Encryption
operator|.
name|NONE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
name|enc
operator|!=
literal|null
operator|&&
name|enc
operator|!=
name|Encryption
operator|.
name|NONE
operator|)
operator|||
operator|!
name|isLocal
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
name|username
operator|=
name|username
argument_list|()
expr_stmt|;
block|}
name|cfg
operator|.
name|string
argument_list|(
literal|"SMTP username"
argument_list|,
literal|"smtpUser"
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|password
argument_list|(
literal|"smtpUser"
argument_list|,
literal|"smtpPass"
argument_list|)
expr_stmt|;
block|}
DECL|method|init_container ()
specifier|private
name|void
name|init_container
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"container"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"Container Process"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Run as"
argument_list|,
literal|"user"
argument_list|,
name|username
argument_list|()
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|string
argument_list|(
literal|"Java runtime"
argument_list|,
literal|"javaHome"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|File
name|siteWar
init|=
operator|new
name|File
argument_list|(
name|bin_dir
argument_list|,
literal|"gerrit.war"
argument_list|)
decl_stmt|;
name|File
name|myWar
decl_stmt|;
try|try
block|{
name|myWar
operator|=
name|GerritLauncher
operator|.
name|getDistributionArchive
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warn: Cannot find gerrit.war"
argument_list|)
expr_stmt|;
name|myWar
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|path
init|=
name|cfg
operator|.
name|get
argument_list|(
literal|"war"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|cfg
operator|.
name|string
argument_list|(
literal|"Gerrit runtime"
argument_list|,
literal|"war"
argument_list|,
comment|//
name|myWar
operator|!=
literal|null
condition|?
name|myWar
operator|.
name|getAbsolutePath
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"container.war is required"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|myWar
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|copy
decl_stmt|;
if|if
condition|(
name|siteWar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|copy
operator|=
name|ui
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
literal|"Upgrade %s"
argument_list|,
name|siteWar
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|copy
operator|=
name|ui
operator|.
name|yesno
argument_list|(
literal|true
argument_list|,
literal|"Copy gerrit.war to %s"
argument_list|,
name|siteWar
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|copy
condition|)
block|{
name|cfg
operator|.
name|unset
argument_list|(
literal|"war"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cfg
operator|.
name|set
argument_list|(
literal|"war"
argument_list|,
name|myWar
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|copy
condition|)
block|{
if|if
condition|(
operator|!
name|ui
operator|.
name|isBatch
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|format
argument_list|(
literal|"Copying gerrit.war to %s"
argument_list|,
name|siteWar
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|copy
argument_list|(
name|siteWar
argument_list|,
operator|new
name|FileInputStream
argument_list|(
name|myWar
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|init_sshd ()
specifier|private
name|void
name|init_sshd
parameter_list|()
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"sshd"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"SSH Daemon"
argument_list|)
expr_stmt|;
name|String
name|hostname
init|=
literal|"*"
decl_stmt|,
name|port
init|=
literal|"29418"
decl_stmt|;
name|String
name|listenAddress
init|=
name|cfg
operator|.
name|get
argument_list|(
literal|"listenAddress"
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenAddress
operator|!=
literal|null
operator|&&
operator|!
name|listenAddress
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|listenAddress
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
specifier|final
name|int
name|hostEnd
init|=
name|listenAddress
operator|.
name|indexOf
argument_list|(
literal|']'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|hostEnd
condition|)
block|{
name|hostname
operator|=
name|listenAddress
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|hostEnd
argument_list|)
expr_stmt|;
if|if
condition|(
name|hostEnd
operator|+
literal|1
operator|<
name|listenAddress
operator|.
name|length
argument_list|()
comment|//
operator|&&
name|listenAddress
operator|.
name|charAt
argument_list|(
name|hostEnd
operator|+
literal|1
argument_list|)
operator|==
literal|':'
condition|)
block|{
name|port
operator|=
name|listenAddress
operator|.
name|substring
argument_list|(
name|hostEnd
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|int
name|hostEnd
init|=
name|listenAddress
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|hostEnd
condition|)
block|{
name|hostname
operator|=
name|listenAddress
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|hostEnd
argument_list|)
expr_stmt|;
name|port
operator|=
name|listenAddress
operator|.
name|substring
argument_list|(
name|hostEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|hostname
operator|=
name|listenAddress
expr_stmt|;
block|}
block|}
block|}
name|hostname
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|hostname
argument_list|,
literal|"Listen on address"
argument_list|)
expr_stmt|;
name|port
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|port
argument_list|,
literal|"Listen on port"
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|set
argument_list|(
literal|"listenAddress"
argument_list|,
name|hostname
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
DECL|method|init_httpd ()
specifier|private
name|void
name|init_httpd
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Section
name|httpd
init|=
operator|new
name|Section
argument_list|(
literal|"httpd"
argument_list|)
decl_stmt|;
name|ui
operator|.
name|header
argument_list|(
literal|"HTTP Daemon"
argument_list|)
expr_stmt|;
name|boolean
name|proxy
init|=
literal|false
decl_stmt|,
name|ssl
init|=
literal|false
decl_stmt|;
name|String
name|address
init|=
literal|"*"
decl_stmt|,
name|port
init|=
literal|null
decl_stmt|,
name|context
init|=
literal|"/"
decl_stmt|;
name|String
name|listenUrl
init|=
name|httpd
operator|.
name|get
argument_list|(
literal|"listenUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenUrl
operator|!=
literal|null
operator|&&
operator|!
name|listenUrl
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|URI
name|uri
init|=
name|toURI
argument_list|(
name|listenUrl
argument_list|)
decl_stmt|;
name|proxy
operator|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"proxy-"
argument_list|)
expr_stmt|;
name|ssl
operator|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"https"
argument_list|)
expr_stmt|;
name|address
operator|=
name|isAnyAddress
argument_list|(
operator|new
name|URI
argument_list|(
name|listenUrl
argument_list|)
argument_list|)
condition|?
literal|"*"
else|:
name|uri
operator|.
name|getHost
argument_list|()
expr_stmt|;
name|port
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|uri
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|uri
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warning: invalid httpd.listenUrl "
operator|+
name|listenUrl
argument_list|)
expr_stmt|;
block|}
block|}
name|proxy
operator|=
name|ui
operator|.
name|yesno
argument_list|(
name|proxy
argument_list|,
literal|"Behind reverse proxy"
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
condition|)
block|{
name|ssl
operator|=
name|ui
operator|.
name|yesno
argument_list|(
name|ssl
argument_list|,
literal|"Proxy uses SSL (https://)"
argument_list|)
expr_stmt|;
name|context
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|context
argument_list|,
literal|"Subdirectory on proxy server"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ssl
operator|=
name|ui
operator|.
name|yesno
argument_list|(
name|ssl
argument_list|,
literal|"Use SSL (https://)"
argument_list|)
expr_stmt|;
name|context
operator|=
literal|"/"
expr_stmt|;
block|}
name|address
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|address
argument_list|,
literal|"Listen on address"
argument_list|)
expr_stmt|;
if|if
condition|(
name|port
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|proxy
condition|)
block|{
name|port
operator|=
literal|"8081"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ssl
condition|)
block|{
name|port
operator|=
literal|"8443"
expr_stmt|;
block|}
else|else
block|{
name|port
operator|=
literal|"8080"
expr_stmt|;
block|}
block|}
name|port
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|port
argument_list|,
literal|"Listen on port"
argument_list|)
expr_stmt|;
specifier|final
name|StringBuilder
name|urlbuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
name|proxy
condition|?
literal|"proxy-"
else|:
literal|""
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
name|ssl
condition|?
literal|"https"
else|:
literal|"http"
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|urlbuf
operator|.
name|append
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|httpd
operator|.
name|set
argument_list|(
literal|"listenUrl"
argument_list|,
name|urlbuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
name|toURI
argument_list|(
name|httpd
operator|.
name|get
argument_list|(
literal|"listenUrl"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"proxy-"
argument_list|)
condition|)
block|{
comment|// If its a proxy URL, assume the reverse proxy is on our system
comment|// at the protocol standard ports (so omit the ports from the URL).
comment|//
name|String
name|s
init|=
name|uri
operator|.
name|getScheme
argument_list|()
operator|.
name|substring
argument_list|(
literal|"proxy-"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|uri
operator|=
operator|new
name|URI
argument_list|(
name|s
operator|+
literal|"://"
operator|+
name|uri
operator|.
name|getHost
argument_list|()
operator|+
name|uri
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|die
argument_list|(
literal|"invalid httpd.listenUrl"
argument_list|)
throw|;
block|}
specifier|final
name|Section
name|gerrit
init|=
operator|new
name|Section
argument_list|(
literal|"gerrit"
argument_list|)
decl_stmt|;
if|if
condition|(
name|gerrit
operator|.
name|get
argument_list|(
literal|"canonicalWebUrl"
argument_list|)
operator|!=
literal|null
operator|||
operator|(
operator|!
name|proxy
operator|&&
name|ssl
operator|)
operator|||
name|ConfigUtil
operator|.
name|getEnum
argument_list|(
name|cfg
argument_list|,
literal|"auth"
argument_list|,
literal|null
argument_list|,
literal|"type"
argument_list|,
name|AuthType
operator|.
name|OPENID
argument_list|)
operator|==
name|AuthType
operator|.
name|OPENID
condition|)
block|{
name|gerrit
operator|.
name|string
argument_list|(
literal|"Canonical URL"
argument_list|,
literal|"canonicalWebUrl"
argument_list|,
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generateSslCertificate
argument_list|()
expr_stmt|;
block|}
DECL|method|generateSslCertificate ()
specifier|private
name|void
name|generateSslCertificate
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
specifier|final
name|Section
name|httpd
init|=
operator|new
name|Section
argument_list|(
literal|"httpd"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|listenUrl
init|=
name|httpd
operator|.
name|get
argument_list|(
literal|"listenUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|listenUrl
operator|.
name|startsWith
argument_list|(
literal|"https://"
argument_list|)
condition|)
block|{
comment|// We aren't responsible for SSL processing.
comment|//
return|return;
block|}
name|String
name|hostname
decl_stmt|;
try|try
block|{
name|String
name|url
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|listenUrl
expr_stmt|;
block|}
name|hostname
operator|=
name|toURI
argument_list|(
name|url
argument_list|)
operator|.
name|getHost
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Invalid httpd.listenUrl, not checking certificate"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|File
name|store
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"keystore"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ui
operator|.
name|yesno
argument_list|(
operator|!
name|store
operator|.
name|exists
argument_list|()
argument_list|,
literal|"Create new self-signed SSL certificate"
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|ssl_pass
init|=
name|sec
operator|.
name|getString
argument_list|(
literal|"http"
argument_list|,
literal|null
argument_list|,
literal|"sslKeyPassword"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ssl_pass
operator|==
literal|null
operator|||
name|ssl_pass
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ssl_pass
operator|=
name|SignedToken
operator|.
name|generateRandomKey
argument_list|()
expr_stmt|;
name|sec
operator|.
name|setString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"sslKeyPassword"
argument_list|,
name|ssl_pass
argument_list|)
expr_stmt|;
block|}
name|hostname
operator|=
name|ui
operator|.
name|readString
argument_list|(
name|hostname
argument_list|,
literal|"Certificate server name"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|validity
init|=
name|ui
operator|.
name|readString
argument_list|(
literal|"365"
argument_list|,
literal|"Certificate expires in (days)"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|dname
init|=
literal|"CN="
operator|+
name|hostname
operator|+
literal|",OU=Gerrit Code Review,O="
operator|+
name|domainOf
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
specifier|final
name|File
name|tmpdir
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"tmp.sslcertgen"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpdir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot create directory "
operator|+
name|tmpdir
argument_list|)
throw|;
block|}
name|chmod
argument_list|(
literal|0600
argument_list|,
name|tmpdir
argument_list|)
expr_stmt|;
specifier|final
name|File
name|tmpstore
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
literal|"keystore"
argument_list|)
decl_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"keytool"
block|,
comment|//
literal|"-keystore"
block|,
name|tmpstore
operator|.
name|getAbsolutePath
argument_list|()
block|,
comment|//
literal|"-storepass"
block|,
name|ssl_pass
block|,
comment|//
literal|"-genkeypair"
block|,
comment|//
literal|"-alias"
block|,
name|hostname
block|,
comment|//
literal|"-keyalg"
block|,
literal|"RSA"
block|,
comment|//
literal|"-validity"
block|,
name|validity
block|,
comment|//
literal|"-dname"
block|,
name|dname
block|,
comment|//
literal|"-keypass"
block|,
name|ssl_pass
block|,
comment|//
block|}
argument_list|)
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|chmod
argument_list|(
literal|0600
argument_list|,
name|tmpstore
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmpstore
operator|.
name|renameTo
argument_list|(
name|store
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot rename "
operator|+
name|tmpstore
operator|+
literal|" to "
operator|+
name|store
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tmpdir
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot delete "
operator|+
name|tmpdir
argument_list|)
throw|;
block|}
block|}
DECL|method|init_cache ()
specifier|private
name|void
name|init_cache
parameter_list|()
block|{
specifier|final
name|Section
name|cfg
init|=
operator|new
name|Section
argument_list|(
literal|"cache"
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|cfg
operator|.
name|get
argument_list|(
literal|"directory"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Explicitly set to empty implies the administrator has
comment|// disabled the on disk cache and doesn't want it enabled.
comment|//
return|return;
block|}
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
literal|"cache"
expr_stmt|;
name|cfg
operator|.
name|set
argument_list|(
literal|"directory"
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|File
name|loc
init|=
name|resolve
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|loc
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|loc
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"cannot create cache.directory "
operator|+
name|loc
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|resolve (final String path)
specifier|private
name|File
name|resolve
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|File
name|loc
init|=
operator|new
name|File
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|loc
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|loc
operator|=
operator|new
name|File
argument_list|(
name|site_path
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|loc
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|generateSshHostKeys ()
specifier|private
name|void
name|generateSshHostKeys
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|File
name|key
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"ssh_host_key"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|rsa
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"ssh_host_rsa_key"
argument_list|)
decl_stmt|;
specifier|final
name|File
name|dsa
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"ssh_host_dsa_key"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|key
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|rsa
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|dsa
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Generating SSH host key ..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|SecurityUtils
operator|.
name|isBouncyCastleRegistered
argument_list|()
condition|)
block|{
comment|// Generate the SSH daemon host key using ssh-keygen.
comment|//
specifier|final
name|String
name|comment
init|=
literal|"gerrit-code-review@"
operator|+
name|hostname
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|" rsa..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ssh-keygen"
block|,
comment|//
literal|"-q"
comment|/* quiet */
block|,
comment|//
literal|"-t"
block|,
literal|"rsa"
block|,
comment|//
literal|"-P"
block|,
literal|""
block|,
comment|//
literal|"-C"
block|,
name|comment
block|,
comment|//
literal|"-f"
block|,
name|rsa
operator|.
name|getAbsolutePath
argument_list|()
comment|//
block|}
argument_list|)
operator|.
name|waitFor
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|" dsa..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"ssh-keygen"
block|,
comment|//
literal|"-q"
comment|/* quiet */
block|,
comment|//
literal|"-t"
block|,
literal|"dsa"
block|,
comment|//
literal|"-P"
block|,
literal|""
block|,
comment|//
literal|"-C"
block|,
name|comment
block|,
comment|//
literal|"-f"
block|,
name|dsa
operator|.
name|getAbsolutePath
argument_list|()
comment|//
block|}
argument_list|)
operator|.
name|waitFor
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Generate the SSH daemon host key ourselves. This is complex
comment|// because SimpleGeneratorHostKeyProvider doesn't mark the data
comment|// file as only readable by us, exposing the private key for a
comment|// short period of time. We try to reduce that risk by creating
comment|// the key within a temporary directory.
comment|//
specifier|final
name|File
name|tmpdir
init|=
operator|new
name|File
argument_list|(
name|etc_dir
argument_list|,
literal|"tmp.sshkeygen"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmpdir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot create directory "
operator|+
name|tmpdir
argument_list|)
throw|;
block|}
name|chmod
argument_list|(
literal|0600
argument_list|,
name|tmpdir
argument_list|)
expr_stmt|;
specifier|final
name|File
name|tmpkey
init|=
operator|new
name|File
argument_list|(
name|tmpdir
argument_list|,
name|key
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|SimpleGeneratorHostKeyProvider
name|p
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|" rsa(simple)..."
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
name|p
operator|=
operator|new
name|SimpleGeneratorHostKeyProvider
argument_list|()
expr_stmt|;
name|p
operator|.
name|setPath
argument_list|(
name|tmpkey
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAlgorithm
argument_list|(
literal|"RSA"
argument_list|)
expr_stmt|;
name|p
operator|.
name|loadKeys
argument_list|()
expr_stmt|;
comment|// forces the key to generate.
name|chmod
argument_list|(
literal|0600
argument_list|,
name|tmpkey
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmpkey
operator|.
name|renameTo
argument_list|(
name|key
argument_list|)
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot rename "
operator|+
name|tmpkey
operator|+
literal|" to "
operator|+
name|key
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|tmpdir
operator|.
name|delete
argument_list|()
condition|)
block|{
throw|throw
name|die
argument_list|(
literal|"Cannot delete "
operator|+
name|tmpdir
argument_list|)
throw|;
block|}
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|" done"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|start ()
specifier|private
name|void
name|start
parameter_list|()
block|{
specifier|final
name|String
index|[]
name|argv
init|=
block|{
name|gerrit_sh
operator|.
name|getAbsolutePath
argument_list|()
block|,
literal|"start"
block|}
decl_stmt|;
specifier|final
name|Process
name|proc
decl_stmt|;
try|try
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Executing "
operator|+
name|argv
index|[
literal|0
index|]
operator|+
literal|" "
operator|+
name|argv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|proc
operator|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|exec
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: cannot start Gerrit: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|proc
operator|.
name|getOutputStream
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{     }
name|IoUtil
operator|.
name|copyWithThread
argument_list|(
name|proc
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|IoUtil
operator|.
name|copyWithThread
argument_list|(
name|proc
operator|.
name|getErrorStream
argument_list|()
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
try|try
block|{
specifier|final
name|int
name|rc
init|=
name|proc
operator|.
name|waitFor
argument_list|()
decl_stmt|;
if|if
condition|(
name|rc
operator|!=
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: cannot start Gerrit: exit status "
operator|+
name|rc
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// retry
block|}
block|}
block|}
DECL|method|openBrowser ()
specifier|private
name|void
name|openBrowser
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|ui
operator|.
name|isBatch
argument_list|()
condition|)
block|{
return|return;
block|}
name|String
name|url
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"httpd"
argument_list|,
literal|null
argument_list|,
literal|"listenUrl"
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|url
operator|.
name|startsWith
argument_list|(
literal|"proxy-"
argument_list|)
condition|)
block|{
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|"proxy-"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|URI
name|uri
decl_stmt|;
try|try
block|{
name|uri
operator|=
name|toURI
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"error: invalid httpd.listenUrl: "
operator|+
name|url
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|hostname
init|=
name|uri
operator|.
name|getHost
argument_list|()
decl_stmt|;
specifier|final
name|int
name|port
init|=
name|portOf
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Waiting for server to start ... "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|flush
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
specifier|final
name|Socket
name|s
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|Socket
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{         }
continue|continue;
block|}
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"OK"
argument_list|)
expr_stmt|;
name|url
operator|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"gerrit"
argument_list|,
literal|null
argument_list|,
literal|"canonicalWebUrl"
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
operator|||
name|url
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|url
operator|=
name|uri
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|url
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|url
operator|+=
literal|"/"
expr_stmt|;
block|}
name|url
operator|+=
literal|"#"
operator|+
name|PageLinks
operator|.
name|ADMIN_PROJECTS
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Opening browser ..."
argument_list|)
expr_stmt|;
name|StartBrowser
operator|.
name|openURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
DECL|method|toURI (String url)
specifier|private
specifier|static
name|URI
name|toURI
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|URISyntaxException
block|{
specifier|final
name|URI
name|u
init|=
operator|new
name|URI
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAnyAddress
argument_list|(
name|u
argument_list|)
condition|)
block|{
comment|// If the URL uses * it means all addresses on this system, use the
comment|// current hostname instead in the returned URI.
comment|//
specifier|final
name|int
name|s
init|=
name|url
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
decl_stmt|;
name|url
operator|=
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|s
argument_list|)
operator|+
name|hostname
argument_list|()
operator|+
name|url
operator|.
name|substring
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|URI
argument_list|(
name|url
argument_list|)
return|;
block|}
DECL|method|isAnyAddress (final URI u)
specifier|private
specifier|static
name|boolean
name|isAnyAddress
parameter_list|(
specifier|final
name|URI
name|u
parameter_list|)
block|{
return|return
name|u
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|&&
operator|(
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
operator|||
name|u
operator|.
name|getAuthority
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"*:"
argument_list|)
operator|)
return|;
block|}
DECL|method|portOf (final URI uri)
specifier|private
specifier|static
name|int
name|portOf
parameter_list|(
specifier|final
name|URI
name|uri
parameter_list|)
block|{
name|int
name|port
init|=
name|uri
operator|.
name|getPort
argument_list|()
decl_stmt|;
if|if
condition|(
name|port
operator|<
literal|0
condition|)
block|{
name|port
operator|=
literal|"https"
operator|.
name|equals
argument_list|(
name|uri
operator|.
name|getScheme
argument_list|()
argument_list|)
condition|?
literal|443
else|:
literal|80
expr_stmt|;
block|}
return|return
name|port
return|;
block|}
DECL|method|inject ()
specifier|private
name|void
name|inject
parameter_list|()
block|{
name|dbInjector
operator|=
name|createDbInjector
argument_list|(
name|SINGLE_USER
argument_list|)
expr_stmt|;
name|sysInjector
operator|=
name|createSysInjector
argument_list|()
expr_stmt|;
name|sysInjector
operator|.
name|injectMembers
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|createSysInjector ()
specifier|private
name|Injector
name|createSysInjector
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Module
argument_list|>
name|modules
init|=
operator|new
name|ArrayList
argument_list|<
name|Module
argument_list|>
argument_list|()
decl_stmt|;
name|modules
operator|.
name|add
argument_list|(
operator|new
name|AbstractModule
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|configure
parameter_list|()
block|{
name|bind
argument_list|(
name|GitRepositoryManager
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|dbInjector
operator|.
name|createChildInjector
argument_list|(
name|modules
argument_list|)
return|;
block|}
DECL|method|createDownloader ()
specifier|private
name|LibraryDownloader
name|createDownloader
parameter_list|()
block|{
return|return
operator|new
name|LibraryDownloader
argument_list|(
name|ui
argument_list|,
name|getSitePath
argument_list|()
argument_list|)
return|;
block|}
DECL|method|version ()
specifier|private
specifier|static
name|String
name|version
parameter_list|()
block|{
return|return
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|common
operator|.
name|Version
operator|.
name|getVersion
argument_list|()
return|;
block|}
DECL|method|username ()
specifier|private
specifier|static
name|String
name|username
parameter_list|()
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
return|;
block|}
DECL|method|hostname ()
specifier|private
specifier|static
name|String
name|hostname
parameter_list|()
block|{
return|return
name|SystemReader
operator|.
name|getInstance
argument_list|()
operator|.
name|getHostname
argument_list|()
return|;
block|}
DECL|method|isLocal (final String hostname)
specifier|private
specifier|static
name|boolean
name|isLocal
parameter_list|(
specifier|final
name|String
name|hostname
parameter_list|)
block|{
try|try
block|{
return|return
name|InetAddress
operator|.
name|getByName
argument_list|(
name|hostname
argument_list|)
operator|.
name|isLoopbackAddress
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|dnOf (String name)
specifier|private
specifier|static
name|String
name|dnOf
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|p
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|p
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
name|name
operator|=
literal|"DC="
operator|+
name|name
operator|.
name|replaceAll
argument_list|(
literal|"\\."
argument_list|,
literal|",DC="
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
DECL|method|domainOf (String name)
specifier|private
specifier|static
name|String
name|domainOf
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|int
name|p
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"://"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|p
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|name
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|<
name|p
condition|)
block|{
name|name
operator|=
name|name
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
DECL|method|recursiveDelete (File path)
specifier|private
specifier|static
name|void
name|recursiveDelete
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|File
index|[]
name|entries
init|=
name|path
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|e
range|:
name|entries
control|)
block|{
name|recursiveDelete
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|path
operator|.
name|delete
argument_list|()
operator|&&
name|path
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warn: Cannot remove "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|extract (final File dst, final String path)
specifier|private
specifier|static
name|void
name|extract
parameter_list|(
specifier|final
name|File
name|dst
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|URL
name|u
init|=
name|GerritLauncher
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"warn: Cannot read "
operator|+
name|path
argument_list|)
expr_stmt|;
return|return;
block|}
name|copy
argument_list|(
name|dst
argument_list|,
name|u
operator|.
name|openStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|copy (final File dst, final InputStream in)
specifier|private
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|File
name|dst
parameter_list|,
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|FileNotFoundException
throws|,
name|IOException
block|{
try|try
block|{
name|dst
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
specifier|final
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|dst
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|n
decl_stmt|;
while|while
condition|(
literal|0
operator|<
operator|(
name|n
operator|=
name|in
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
condition|)
block|{
name|out
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|Section
specifier|private
class|class
name|Section
block|{
DECL|field|section
specifier|final
name|String
name|section
decl_stmt|;
DECL|method|Section (final String section)
name|Section
parameter_list|(
specifier|final
name|String
name|section
parameter_list|)
block|{
name|this
operator|.
name|section
operator|=
name|section
expr_stmt|;
block|}
DECL|method|get (String name)
name|String
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|cfg
operator|.
name|getString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
return|;
block|}
DECL|method|set (final String name, final String value)
name|void
name|set
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|all
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|all
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|cfg
operator|.
name|getStringList
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
name|all
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|cfg
operator|.
name|setString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|all
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{       }
elseif|else
if|if
condition|(
name|all
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|cfg
operator|.
name|unset
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|all
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cfg
operator|.
name|setStringList
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|unset (String name)
name|void
name|unset
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|set
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|string (final String title, final String name, final String dv)
name|String
name|string
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|dv
parameter_list|)
block|{
return|return
name|string
argument_list|(
name|title
argument_list|,
name|name
argument_list|,
name|dv
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|string (final String title, final String name, final String dv, final boolean nullIfDefault)
name|String
name|string
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|dv
parameter_list|,
specifier|final
name|boolean
name|nullIfDefault
parameter_list|)
block|{
specifier|final
name|String
name|ov
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|nv
init|=
name|ui
operator|.
name|readString
argument_list|(
name|ov
operator|!=
literal|null
condition|?
name|ov
else|:
name|dv
argument_list|,
literal|"%s"
argument_list|,
name|title
argument_list|)
decl_stmt|;
if|if
condition|(
name|nullIfDefault
operator|&&
name|nv
operator|==
name|dv
condition|)
block|{
name|nv
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|eq
argument_list|(
name|ov
argument_list|,
name|nv
argument_list|)
condition|)
block|{
name|set
argument_list|(
name|name
argument_list|,
name|nv
argument_list|)
expr_stmt|;
block|}
return|return
name|nv
return|;
block|}
DECL|method|path (final String title, final String name, final String defValue)
name|File
name|path
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|defValue
parameter_list|)
block|{
return|return
name|resolve
argument_list|(
name|string
argument_list|(
name|title
argument_list|,
name|name
argument_list|,
name|defValue
argument_list|)
argument_list|)
return|;
block|}
DECL|method|select (final String title, final String name, final T defValue)
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
name|select
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|T
name|defValue
parameter_list|)
block|{
return|return
name|select
argument_list|(
name|title
argument_list|,
name|name
argument_list|,
name|defValue
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|select (final String title, final String name, final T defValue, final boolean nullIfDefault)
parameter_list|<
name|T
extends|extends
name|Enum
argument_list|<
name|?
argument_list|>
parameter_list|>
name|T
name|select
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|T
name|defValue
parameter_list|,
specifier|final
name|boolean
name|nullIfDefault
parameter_list|)
block|{
specifier|final
name|boolean
name|set
init|=
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|T
name|oldValue
init|=
name|ConfigUtil
operator|.
name|getEnum
argument_list|(
name|cfg
argument_list|,
name|section
argument_list|,
literal|null
argument_list|,
name|name
argument_list|,
name|defValue
argument_list|)
decl_stmt|;
name|T
name|newValue
init|=
name|ui
operator|.
name|readEnum
argument_list|(
name|oldValue
argument_list|,
literal|"%s"
argument_list|,
name|title
argument_list|)
decl_stmt|;
if|if
condition|(
name|nullIfDefault
operator|&&
name|newValue
operator|==
name|defValue
condition|)
block|{
name|newValue
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|set
operator|||
name|oldValue
operator|!=
name|newValue
condition|)
block|{
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|set
argument_list|(
name|name
argument_list|,
name|newValue
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|unset
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newValue
return|;
block|}
DECL|method|password (final String username, final String password)
name|String
name|password
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
block|{
specifier|final
name|String
name|ov
init|=
name|sec
operator|.
name|getString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|String
name|user
init|=
name|sec
operator|.
name|getString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|username
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|get
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|sec
operator|.
name|unset
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|password
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|ov
operator|!=
literal|null
condition|)
block|{
comment|// If the user already has a password stored, try to reuse it
comment|// rather than prompting for a whole new one.
comment|//
if|if
condition|(
name|ui
operator|.
name|isBatch
argument_list|()
operator|||
operator|!
name|ui
operator|.
name|yesno
argument_list|(
literal|false
argument_list|,
literal|"Change %s's password"
argument_list|,
name|user
argument_list|)
condition|)
block|{
return|return
name|ov
return|;
block|}
block|}
specifier|final
name|String
name|nv
init|=
name|ui
operator|.
name|password
argument_list|(
literal|"%s's password"
argument_list|,
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|eq
argument_list|(
name|ov
argument_list|,
name|nv
argument_list|)
condition|)
block|{
if|if
condition|(
name|nv
operator|!=
literal|null
condition|)
block|{
name|sec
operator|.
name|setString
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|password
argument_list|,
name|nv
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sec
operator|.
name|unset
argument_list|(
name|section
argument_list|,
literal|null
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nv
return|;
block|}
block|}
DECL|method|eq (final String a, final String b)
specifier|private
specifier|static
name|boolean
name|eq
parameter_list|(
specifier|final
name|String
name|a
parameter_list|,
specifier|final
name|String
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|&&
name|b
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|a
operator|!=
literal|null
condition|?
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
else|:
literal|false
return|;
block|}
block|}
end_class

end_unit

