begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.prettify.common
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtml
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtexpui
operator|.
name|safehtml
operator|.
name|client
operator|.
name|SafeHtmlBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|PrettyFormatter
specifier|public
specifier|abstract
class|class
name|PrettyFormatter
block|{
DECL|field|lines
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
DECL|field|settings
specifier|protected
name|PrettySettings
name|settings
decl_stmt|;
comment|/** @return the line of formatted HTML. */
DECL|method|getLine (int lineNo)
specifier|public
name|SafeHtml
name|getLine
parameter_list|(
name|int
name|lineNo
parameter_list|)
block|{
return|return
name|SafeHtml
operator|.
name|asis
argument_list|(
name|lines
operator|.
name|get
argument_list|(
name|lineNo
argument_list|)
argument_list|)
return|;
block|}
comment|/** @return the number of lines in this formatter. */
DECL|method|size ()
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|lines
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Parse and format a complete source code file.    *    * @param how the settings to apply to the formatter.    * @param srcText raw content of the file to format. The string will be HTML    *        escaped before processing, so it must be the raw text.    */
DECL|method|format (PrettySettings how, String srcText)
specifier|public
name|void
name|format
parameter_list|(
name|PrettySettings
name|how
parameter_list|,
name|String
name|srcText
parameter_list|)
block|{
name|settings
operator|=
name|how
expr_stmt|;
name|lines
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|String
name|html
init|=
name|prettify
argument_list|(
name|toHTML
argument_list|(
name|srcText
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|int
name|textChunkStart
init|=
literal|0
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
name|Tag
name|lastTag
init|=
name|Tag
operator|.
name|NULL
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
name|pos
operator|<=
name|html
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|tagStart
init|=
name|html
operator|.
name|indexOf
argument_list|(
literal|'<'
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|tagStart
operator|<
literal|0
condition|)
block|{
comment|// No more tags remaining. What's left is plain text.
comment|//
assert|assert
name|lastTag
operator|==
name|Tag
operator|.
name|NULL
assert|;
name|pos
operator|=
name|html
operator|.
name|length
argument_list|()
expr_stmt|;
if|if
condition|(
name|textChunkStart
operator|<
name|pos
condition|)
block|{
name|col
operator|=
name|htmlText
argument_list|(
name|col
argument_list|,
name|buf
argument_list|,
name|html
operator|.
name|substring
argument_list|(
name|textChunkStart
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|<
name|buf
operator|.
name|length
argument_list|()
condition|)
block|{
name|lines
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
comment|// Assume no attribute contains '>' and that all tags
comment|// within the HTML will be well-formed.
comment|//
name|int
name|tagEnd
init|=
name|html
operator|.
name|indexOf
argument_list|(
literal|'>'
argument_list|,
name|tagStart
argument_list|)
decl_stmt|;
assert|assert
name|tagStart
operator|<
name|tagEnd
assert|;
name|pos
operator|=
name|tagEnd
operator|+
literal|1
expr_stmt|;
comment|// Handle any text between the end of the last tag,
comment|// and the start of this tag.
comment|//
if|if
condition|(
name|textChunkStart
operator|<
name|tagStart
condition|)
block|{
name|lastTag
operator|.
name|open
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|col
operator|=
name|htmlText
argument_list|(
name|col
argument_list|,
name|buf
argument_list|,
name|html
operator|.
name|substring
argument_list|(
name|textChunkStart
argument_list|,
name|tagStart
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textChunkStart
operator|=
name|pos
expr_stmt|;
if|if
condition|(
name|isBR
argument_list|(
name|html
argument_list|,
name|tagStart
argument_list|,
name|tagEnd
argument_list|)
condition|)
block|{
name|lastTag
operator|.
name|close
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|lines
operator|.
name|add
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
name|col
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|html
operator|.
name|charAt
argument_list|(
name|tagStart
operator|+
literal|1
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|lastTag
operator|=
name|lastTag
operator|.
name|pop
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|html
operator|.
name|charAt
argument_list|(
name|tagEnd
operator|-
literal|1
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|lastTag
operator|=
operator|new
name|Tag
argument_list|(
name|lastTag
argument_list|,
name|tagStart
argument_list|,
name|tagEnd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|htmlText (int col, StringBuilder buf, String txt)
specifier|private
name|int
name|htmlText
parameter_list|(
name|int
name|col
parameter_list|,
name|StringBuilder
name|buf
parameter_list|,
name|String
name|txt
parameter_list|)
block|{
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|txt
operator|.
name|length
argument_list|()
condition|)
block|{
name|int
name|start
init|=
name|txt
operator|.
name|indexOf
argument_list|(
literal|'&'
argument_list|,
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|col
operator|=
name|cleanText
argument_list|(
name|col
argument_list|,
name|buf
argument_list|,
name|txt
argument_list|,
name|pos
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|pos
operator|=
name|txt
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|,
name|start
operator|+
literal|1
argument_list|)
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|getLineLength
argument_list|()
operator|<=
name|col
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
name|col
operator|=
literal|0
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|txt
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|++
expr_stmt|;
block|}
return|return
name|cleanText
argument_list|(
name|col
argument_list|,
name|buf
argument_list|,
name|txt
argument_list|,
name|pos
argument_list|,
name|txt
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
DECL|method|cleanText (int col, StringBuilder buf, String txt, int pos, int end)
specifier|private
name|int
name|cleanText
parameter_list|(
name|int
name|col
parameter_list|,
name|StringBuilder
name|buf
parameter_list|,
name|String
name|txt
parameter_list|,
name|int
name|pos
parameter_list|,
name|int
name|end
parameter_list|)
block|{
while|while
condition|(
name|pos
operator|<
name|end
condition|)
block|{
name|int
name|free
init|=
name|settings
operator|.
name|getLineLength
argument_list|()
operator|-
name|col
decl_stmt|;
if|if
condition|(
name|free
operator|<=
literal|0
condition|)
block|{
comment|// The current line is full. Throw an explicit line break
comment|// onto the end, and we'll continue on the next line.
comment|//
name|buf
operator|.
name|append
argument_list|(
literal|"<br />"
argument_list|)
expr_stmt|;
name|col
operator|=
literal|0
expr_stmt|;
name|free
operator|=
name|settings
operator|.
name|getLineLength
argument_list|()
expr_stmt|;
block|}
name|int
name|n
init|=
name|Math
operator|.
name|min
argument_list|(
name|end
operator|-
name|pos
argument_list|,
name|free
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|txt
operator|.
name|substring
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|col
operator|+=
name|n
expr_stmt|;
name|pos
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|col
return|;
block|}
comment|/** Run the prettify engine over the text and return the result. */
DECL|method|prettify (String html)
specifier|protected
specifier|abstract
name|String
name|prettify
parameter_list|(
name|String
name|html
parameter_list|)
function_decl|;
DECL|method|isBR (String html, int tagStart, int tagEnd)
specifier|private
specifier|static
name|boolean
name|isBR
parameter_list|(
name|String
name|html
parameter_list|,
name|int
name|tagStart
parameter_list|,
name|int
name|tagEnd
parameter_list|)
block|{
return|return
name|tagEnd
operator|-
name|tagStart
operator|==
literal|5
comment|//
operator|&&
name|html
operator|.
name|charAt
argument_list|(
name|tagStart
operator|+
literal|1
argument_list|)
operator|==
literal|'b'
comment|//
operator|&&
name|html
operator|.
name|charAt
argument_list|(
name|tagStart
operator|+
literal|2
argument_list|)
operator|==
literal|'r'
comment|//
operator|&&
name|html
operator|.
name|charAt
argument_list|(
name|tagStart
operator|+
literal|3
argument_list|)
operator|==
literal|' '
return|;
block|}
DECL|class|Tag
specifier|private
specifier|static
class|class
name|Tag
block|{
DECL|field|NULL
specifier|static
specifier|final
name|Tag
name|NULL
init|=
operator|new
name|Tag
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|{
annotation|@
name|Override
name|void
name|open
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{       }
annotation|@
name|Override
name|void
name|close
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{       }
annotation|@
name|Override
name|Tag
name|pop
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
decl_stmt|;
DECL|field|parent
specifier|final
name|Tag
name|parent
decl_stmt|;
DECL|field|start
specifier|final
name|int
name|start
decl_stmt|;
DECL|field|end
specifier|final
name|int
name|end
decl_stmt|;
DECL|field|open
name|boolean
name|open
decl_stmt|;
DECL|method|Tag (Tag p, int s, int e)
name|Tag
parameter_list|(
name|Tag
name|p
parameter_list|,
name|int
name|s
parameter_list|,
name|int
name|e
parameter_list|)
block|{
name|parent
operator|=
name|p
expr_stmt|;
name|start
operator|=
name|s
expr_stmt|;
name|end
operator|=
name|e
expr_stmt|;
block|}
DECL|method|open (StringBuilder buf, String html)
name|void
name|open
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{
if|if
condition|(
operator|!
name|open
condition|)
block|{
name|parent
operator|.
name|open
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|html
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|open
operator|=
literal|true
expr_stmt|;
block|}
block|}
DECL|method|close (StringBuilder buf, String html)
name|void
name|close
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{
name|pop
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
name|parent
operator|.
name|close
argument_list|(
name|buf
argument_list|,
name|html
argument_list|)
expr_stmt|;
block|}
DECL|method|pop (StringBuilder buf, String html)
name|Tag
name|pop
parameter_list|(
name|StringBuilder
name|buf
parameter_list|,
name|String
name|html
parameter_list|)
block|{
if|if
condition|(
name|open
condition|)
block|{
name|int
name|sp
init|=
name|html
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|start
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|sp
operator|<
literal|0
operator|||
name|end
operator|<
name|sp
condition|)
block|{
name|sp
operator|=
name|end
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|html
operator|.
name|substring
argument_list|(
name|start
operator|+
literal|1
argument_list|,
name|sp
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
name|open
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|parent
return|;
block|}
block|}
DECL|method|toHTML (String src)
specifier|private
name|String
name|toHTML
parameter_list|(
name|String
name|src
parameter_list|)
block|{
name|SafeHtml
name|html
init|=
operator|new
name|SafeHtmlBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|src
argument_list|)
decl_stmt|;
comment|// The prettify parsers don't like&#39; as an entity for the
comment|// single quote character. Replace them all out so we don't
comment|// confuse the parser.
comment|//
name|html
operator|=
name|html
operator|.
name|replaceAll
argument_list|(
literal|"&#39;"
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|settings
operator|.
name|isShowWhiteSpaceErrors
argument_list|()
condition|)
block|{
comment|// We need to do whitespace errors before showing tabs, because
comment|// these patterns rely on \t as a literal, before it expands.
comment|//
name|html
operator|=
name|showTabAfterSpace
argument_list|(
name|html
argument_list|)
expr_stmt|;
name|html
operator|=
name|showTrailingWhitespace
argument_list|(
name|html
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|settings
operator|.
name|isShowTabs
argument_list|()
condition|)
block|{
name|String
name|t
init|=
literal|1
operator|<
name|settings
operator|.
name|getTabSize
argument_list|()
condition|?
literal|"\t"
else|:
literal|""
decl_stmt|;
name|html
operator|=
name|html
operator|.
name|replaceAll
argument_list|(
literal|"\t"
argument_list|,
literal|"<span class=\"vt\">&nbsp;</span>"
operator|+
name|t
argument_list|)
expr_stmt|;
block|}
return|return
name|html
operator|.
name|asString
argument_list|()
return|;
block|}
DECL|method|showTabAfterSpace (SafeHtml src)
specifier|private
name|SafeHtml
name|showTabAfterSpace
parameter_list|(
name|SafeHtml
name|src
parameter_list|)
block|{
name|src
operator|=
name|src
operator|.
name|replaceFirst
argument_list|(
literal|"^(  *\t)"
argument_list|,
literal|"<span class=\"wse\">$1</span>"
argument_list|)
expr_stmt|;
name|src
operator|=
name|src
operator|.
name|replaceAll
argument_list|(
literal|"\n(  *\t)"
argument_list|,
literal|"\n<span class=\"wse\">$1</span>"
argument_list|)
expr_stmt|;
return|return
name|src
return|;
block|}
DECL|method|showTrailingWhitespace (SafeHtml src)
specifier|private
name|SafeHtml
name|showTrailingWhitespace
parameter_list|(
name|SafeHtml
name|src
parameter_list|)
block|{
specifier|final
name|String
name|r
init|=
literal|"<span class=\"wse\">$1</span>$2"
decl_stmt|;
name|src
operator|=
name|src
operator|.
name|replaceAll
argument_list|(
literal|"([ \t][ \t]*)(\r?\n)"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|src
operator|=
name|src
operator|.
name|replaceFirst
argument_list|(
literal|"([ \t][ \t]*)(\r?\n?)$"
argument_list|,
name|r
argument_list|)
expr_stmt|;
return|return
name|src
return|;
block|}
block|}
end_class

end_unit

