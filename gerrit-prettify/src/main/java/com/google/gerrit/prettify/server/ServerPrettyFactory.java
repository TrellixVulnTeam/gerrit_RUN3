begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2010 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.prettify.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|PrettyFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|PrettyFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|prettify
operator|.
name|common
operator|.
name|PrettySettings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Inject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Provider
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|Singleton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ContextFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|Scriptable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mozilla
operator|.
name|javascript
operator|.
name|ScriptableObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/** Runs prettify via Mozilla Rhino JavaScript engine. */
end_comment

begin_class
annotation|@
name|Singleton
DECL|class|ServerPrettyFactory
class|class
name|ServerPrettyFactory
implements|implements
name|PrettyFactory
implements|,
name|Provider
argument_list|<
name|PrettyFormatter
argument_list|>
block|{
DECL|field|contextFactory
specifier|private
specifier|final
name|ContextFactory
name|contextFactory
decl_stmt|;
DECL|field|sharedScope
specifier|private
specifier|final
name|ScriptableObject
name|sharedScope
decl_stmt|;
DECL|field|sharedWindow
specifier|private
specifier|final
name|Scriptable
name|sharedWindow
decl_stmt|;
annotation|@
name|Inject
DECL|method|ServerPrettyFactory ()
name|ServerPrettyFactory
parameter_list|()
block|{
name|contextFactory
operator|=
operator|new
name|ContextFactory
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|hasFeature
parameter_list|(
name|Context
name|cx
parameter_list|,
name|int
name|featureIndex
parameter_list|)
block|{
if|if
condition|(
name|featureIndex
operator|==
name|Context
operator|.
name|FEATURE_DYNAMIC_SCOPE
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|hasFeature
argument_list|(
name|cx
argument_list|,
name|featureIndex
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|Context
name|cx
init|=
name|contextFactory
operator|.
name|enterContext
argument_list|()
decl_stmt|;
try|try
block|{
name|cx
operator|.
name|setOptimizationLevel
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|sharedScope
operator|=
name|cx
operator|.
name|initStandardObjects
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sharedWindow
operator|=
name|cx
operator|.
name|newObject
argument_list|(
name|sharedScope
argument_list|)
expr_stmt|;
name|sharedScope
operator|.
name|put
argument_list|(
literal|"window"
argument_list|,
name|sharedScope
argument_list|,
name|sharedWindow
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"prettify.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"server-env.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-apollo.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-css.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-hs.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-lisp.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-lua.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-ml.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-proto.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-sql.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-vb.js"
argument_list|)
expr_stmt|;
name|compile
argument_list|(
name|cx
argument_list|,
literal|"lang-wiki.js"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|get ()
specifier|public
name|PrettyFormatter
name|get
parameter_list|()
block|{
return|return
operator|new
name|PrettyFormatter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|prettify
parameter_list|(
name|String
name|html
parameter_list|,
name|String
name|type
parameter_list|)
block|{
return|return
name|prettyPrintOne
argument_list|(
name|html
argument_list|,
name|type
argument_list|,
name|settings
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|prettyPrintOne (String srcText, String type, PrettySettings how)
specifier|private
name|String
name|prettyPrintOne
parameter_list|(
name|String
name|srcText
parameter_list|,
name|String
name|type
parameter_list|,
name|PrettySettings
name|how
parameter_list|)
block|{
name|Context
name|cx
init|=
name|contextFactory
operator|.
name|enterContext
argument_list|()
decl_stmt|;
try|try
block|{
name|Scriptable
name|callScope
init|=
name|cx
operator|.
name|newObject
argument_list|(
name|sharedScope
argument_list|)
decl_stmt|;
name|callScope
operator|.
name|setPrototype
argument_list|(
name|sharedScope
argument_list|)
expr_stmt|;
name|callScope
operator|.
name|setParentScope
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// We have to clone and shadow the window object, so we can
comment|// set a per-call window.PR_TAB_WIDTH value. Above we ensured
comment|// we compiled our code in a dynamic scope so the window object
comment|// resolution will happen to our shadowed value.
comment|//
name|Scriptable
name|callWindow
init|=
name|cx
operator|.
name|newObject
argument_list|(
name|callScope
argument_list|)
decl_stmt|;
name|callWindow
operator|.
name|setPrototype
argument_list|(
name|sharedWindow
argument_list|)
expr_stmt|;
name|callWindow
operator|.
name|put
argument_list|(
literal|"PR_TAB_WIDTH"
argument_list|,
name|callWindow
argument_list|,
name|how
operator|.
name|getTabSize
argument_list|()
argument_list|)
expr_stmt|;
name|callScope
operator|.
name|put
argument_list|(
literal|"window"
argument_list|,
name|callScope
argument_list|,
name|callWindow
argument_list|)
expr_stmt|;
name|callScope
operator|.
name|put
argument_list|(
literal|"srcText"
argument_list|,
name|callScope
argument_list|,
name|srcText
argument_list|)
expr_stmt|;
name|callScope
operator|.
name|put
argument_list|(
literal|"srcType"
argument_list|,
name|callScope
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|String
name|call
init|=
literal|"prettyPrintOne(srcText, srcType)"
decl_stmt|;
return|return
name|cx
operator|.
name|evaluateString
argument_list|(
name|callScope
argument_list|,
name|call
argument_list|,
literal|"<call>"
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|Context
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|compile (Context cx, String name)
specifier|private
name|void
name|compile
parameter_list|(
name|Context
name|cx
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|name
operator|=
literal|"com/google/gerrit/prettify/client/"
operator|+
name|name
expr_stmt|;
name|InputStream
name|in
init|=
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot find "
operator|+
name|name
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|InputStreamReader
name|r
init|=
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
try|try
block|{
name|cx
operator|.
name|compileReader
argument_list|(
name|r
argument_list|,
name|name
argument_list|,
literal|1
argument_list|,
literal|null
argument_list|)
operator|.
name|exec
argument_list|(
name|cx
argument_list|,
name|sharedScope
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot compile "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot compile "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

