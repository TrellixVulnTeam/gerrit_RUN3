begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ChangeHeader
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|ChangeTable
specifier|public
class|class
name|ChangeTable
extends|extends
name|FlexTable
block|{
DECL|field|C_ID
specifier|private
specifier|static
specifier|final
name|int
name|C_ID
init|=
literal|0
decl_stmt|;
DECL|field|C_SUBJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_SUBJECT
init|=
literal|1
decl_stmt|;
DECL|field|C_OWNER
specifier|private
specifier|static
specifier|final
name|int
name|C_OWNER
init|=
literal|2
decl_stmt|;
DECL|field|C_REVIEWERS
specifier|private
specifier|static
specifier|final
name|int
name|C_REVIEWERS
init|=
literal|3
decl_stmt|;
DECL|field|C_PROJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_PROJECT
init|=
literal|4
decl_stmt|;
DECL|field|C_LAST_UPDATE
specifier|private
specifier|static
specifier|final
name|int
name|C_LAST_UPDATE
init|=
literal|5
decl_stmt|;
DECL|field|COLUMNS
specifier|private
specifier|static
specifier|final
name|int
name|COLUMNS
init|=
literal|6
decl_stmt|;
DECL|field|sections
specifier|private
specifier|final
name|List
argument_list|<
name|Section
argument_list|>
name|sections
decl_stmt|;
DECL|method|ChangeTable ()
specifier|public
name|ChangeTable
parameter_list|()
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|addStyleName
argument_list|(
literal|"gerrit-ChangeTable"
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_ID
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnID
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_SUBJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnSubject
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_OWNER
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnOwner
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_REVIEWERS
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnReviewers
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_PROJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnProject
argument_list|()
argument_list|)
expr_stmt|;
name|setColumnHeader
argument_list|(
name|C_LAST_UPDATE
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|C_ID
argument_list|,
literal|"gerrit-ChangeTable-ColumnID"
argument_list|)
expr_stmt|;
block|}
DECL|method|setColumnHeader (final int col, final String text)
specifier|private
name|void
name|setColumnHeader
parameter_list|(
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|String
name|text
parameter_list|)
block|{
name|setText
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
literal|0
argument_list|,
name|col
argument_list|,
literal|"gerrit-ChangeTable-ColumnHeader"
argument_list|)
expr_stmt|;
block|}
DECL|method|insertNoneRow (final int row)
specifier|private
name|void
name|insertNoneRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableNone
argument_list|()
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
literal|"gerrit-ChangeTable-EmptySectionRow"
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChangeRow (final int row)
specifier|private
name|void
name|insertChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
name|row
argument_list|,
name|C_ID
argument_list|,
literal|"gerrit-ChangeTable-ColumnID"
argument_list|)
expr_stmt|;
block|}
DECL|method|populateChangeRow (final int row, final ChangeHeader c)
specifier|private
name|void
name|populateChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ChangeHeader
name|c
parameter_list|)
block|{
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_ID
argument_list|,
operator|new
name|ChangeLink
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|id
argument_list|)
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|c
operator|.
name|subject
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|status
operator|!=
literal|null
condition|)
block|{
name|s
operator|+=
literal|" ("
operator|+
name|c
operator|.
name|status
operator|+
literal|")"
expr_stmt|;
block|}
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_SUBJECT
argument_list|,
operator|new
name|ChangeLink
argument_list|(
name|s
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|row
argument_list|,
name|C_OWNER
argument_list|,
name|c
operator|.
name|owner
operator|.
name|fullName
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|row
argument_list|,
name|C_REVIEWERS
argument_list|,
literal|"TODO"
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|row
argument_list|,
name|C_PROJECT
argument_list|,
name|c
operator|.
name|project
operator|.
name|name
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|row
argument_list|,
name|C_LAST_UPDATE
argument_list|,
name|c
operator|.
name|lastUpdate
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setStyleName (final int row, final int col, final String name)
specifier|private
name|void
name|setStyleName
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|col
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
block|{
name|getFlexCellFormatter
argument_list|()
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|addSection (final Section s)
specifier|public
name|void
name|addSection
parameter_list|(
specifier|final
name|Section
name|s
parameter_list|)
block|{
assert|assert
name|s
operator|.
name|table
operator|==
literal|null
assert|;
if|if
condition|(
name|s
operator|.
name|titleText
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|titleRow
operator|=
name|getRowCount
argument_list|()
expr_stmt|;
name|setText
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|titleText
argument_list|)
expr_stmt|;
name|getFlexCellFormatter
argument_list|()
operator|.
name|setColSpan
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
name|setStyleName
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
literal|"gerrit-ChangeTable-SectionHeader"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|titleRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|s
operator|.
name|table
operator|=
name|this
expr_stmt|;
name|s
operator|.
name|dataBegin
operator|=
name|getRowCount
argument_list|()
expr_stmt|;
name|insertNoneRow
argument_list|(
name|s
operator|.
name|dataBegin
argument_list|)
expr_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|insertRow (final int beforeRow)
specifier|public
name|int
name|insertRow
parameter_list|(
specifier|final
name|int
name|beforeRow
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|beforeRow
operator|<=
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|beforeRow
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|++
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|insertRow
argument_list|(
name|beforeRow
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeRow (final int row)
specifier|public
name|void
name|removeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|--
expr_stmt|;
block|}
block|}
name|super
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
DECL|class|Section
specifier|public
specifier|static
class|class
name|Section
block|{
DECL|field|titleText
name|String
name|titleText
decl_stmt|;
DECL|field|table
name|ChangeTable
name|table
decl_stmt|;
DECL|field|titleRow
name|int
name|titleRow
decl_stmt|;
DECL|field|dataBegin
name|int
name|dataBegin
decl_stmt|;
DECL|field|rows
name|int
name|rows
decl_stmt|;
DECL|method|Section ()
specifier|public
name|Section
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Section (final String titleText)
specifier|public
name|Section
parameter_list|(
specifier|final
name|String
name|titleText
parameter_list|)
block|{
name|this
operator|.
name|titleText
operator|=
name|titleText
expr_stmt|;
block|}
DECL|method|display (final List<ChangeHeader> changeList)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|ChangeHeader
argument_list|>
name|changeList
parameter_list|)
block|{
specifier|final
name|int
name|sz
init|=
name|changeList
operator|!=
literal|null
condition|?
name|changeList
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|final
name|boolean
name|hadData
init|=
name|rows
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hadData
condition|)
block|{
while|while
condition|(
name|sz
operator|<
name|rows
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
name|rows
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hadData
condition|)
block|{
name|table
operator|.
name|insertNoneRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hadData
condition|)
block|{
name|table
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|<
name|sz
condition|)
block|{
name|table
operator|.
name|insertChangeRow
argument_list|(
name|dataBegin
operator|+
name|rows
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|table
operator|.
name|populateChangeRow
argument_list|(
name|dataBegin
operator|+
name|i
argument_list|,
name|changeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

