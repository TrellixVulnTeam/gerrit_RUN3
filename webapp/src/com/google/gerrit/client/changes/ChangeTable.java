begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.changes
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|changes
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Link
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|SignedInListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|ChangeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Change
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|AccountDashboardLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|ChangeLink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DeferredCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|AbstractImagePrototype
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|KeyboardListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|KeyboardListenerAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|SourcesTableEvents
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|TableListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
operator|.
name|FlexCellFormatter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|VoidResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
DECL|class|ChangeTable
specifier|public
class|class
name|ChangeTable
extends|extends
name|Composite
implements|implements
name|HasFocus
block|{
DECL|field|MY_STYLE
specifier|private
specifier|static
specifier|final
name|String
name|MY_STYLE
init|=
literal|"gerrit-ChangeTable"
decl_stmt|;
DECL|field|S
specifier|private
specifier|static
specifier|final
name|String
name|S
init|=
name|MY_STYLE
operator|+
literal|"-"
decl_stmt|;
DECL|field|S_ICON_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|S_ICON_HEADER
init|=
name|S
operator|+
literal|"IconHeader"
decl_stmt|;
DECL|field|S_DATA_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|S_DATA_HEADER
init|=
name|S
operator|+
literal|"DataHeader"
decl_stmt|;
DECL|field|S_SECTION_HEADER
specifier|private
specifier|static
specifier|final
name|String
name|S_SECTION_HEADER
init|=
name|S
operator|+
literal|"SectionHeader"
decl_stmt|;
DECL|field|S_EMPTY_SECTION
specifier|private
specifier|static
specifier|final
name|String
name|S_EMPTY_SECTION
init|=
name|S
operator|+
literal|"EmptySection"
decl_stmt|;
DECL|field|S_ICON_CELL
specifier|private
specifier|static
specifier|final
name|String
name|S_ICON_CELL
init|=
name|S
operator|+
literal|"IconCell"
decl_stmt|;
DECL|field|S_C_ID
specifier|private
specifier|static
specifier|final
name|String
name|S_C_ID
init|=
name|S
operator|+
literal|"C_ID"
decl_stmt|;
DECL|field|S_DATA_CELL
specifier|private
specifier|static
specifier|final
name|String
name|S_DATA_CELL
init|=
name|S
operator|+
literal|"DataCell"
decl_stmt|;
DECL|field|C_ARROW
specifier|private
specifier|static
specifier|final
name|int
name|C_ARROW
init|=
literal|0
decl_stmt|;
DECL|field|C_STAR
specifier|private
specifier|static
specifier|final
name|int
name|C_STAR
init|=
literal|1
decl_stmt|;
DECL|field|C_ID
specifier|private
specifier|static
specifier|final
name|int
name|C_ID
init|=
literal|2
decl_stmt|;
DECL|field|C_SUBJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_SUBJECT
init|=
literal|3
decl_stmt|;
DECL|field|C_OWNER
specifier|private
specifier|static
specifier|final
name|int
name|C_OWNER
init|=
literal|4
decl_stmt|;
DECL|field|C_REVIEWERS
specifier|private
specifier|static
specifier|final
name|int
name|C_REVIEWERS
init|=
literal|5
decl_stmt|;
DECL|field|C_PROJECT
specifier|private
specifier|static
specifier|final
name|int
name|C_PROJECT
init|=
literal|6
decl_stmt|;
DECL|field|C_LAST_UPDATE
specifier|private
specifier|static
specifier|final
name|int
name|C_LAST_UPDATE
init|=
literal|7
decl_stmt|;
DECL|field|COLUMNS
specifier|private
specifier|static
specifier|final
name|int
name|COLUMNS
init|=
literal|8
decl_stmt|;
DECL|field|savedPositions
specifier|private
specifier|static
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|savedPositions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
argument_list|(
literal|10
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Change
operator|.
name|Id
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>=
literal|5
return|;
block|}
block|}
decl_stmt|;
DECL|field|sections
specifier|private
specifier|final
name|List
argument_list|<
name|Section
argument_list|>
name|sections
decl_stmt|;
DECL|field|table
specifier|private
specifier|final
name|FlexTable
name|table
decl_stmt|;
DECL|field|focusy
specifier|private
specifier|final
name|FocusPanel
name|focusy
decl_stmt|;
DECL|field|pointer
specifier|private
specifier|final
name|Image
name|pointer
decl_stmt|;
DECL|field|signedInListener
specifier|private
specifier|final
name|SignedInListener
name|signedInListener
decl_stmt|;
DECL|field|saveId
specifier|private
name|String
name|saveId
decl_stmt|;
DECL|field|currentRow
specifier|private
name|int
name|currentRow
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|ChangeTable ()
specifier|public
name|ChangeTable
parameter_list|()
block|{
name|sections
operator|=
operator|new
name|ArrayList
argument_list|<
name|Section
argument_list|>
argument_list|()
expr_stmt|;
name|pointer
operator|=
name|Gerrit
operator|.
name|ICONS
operator|.
name|arrowRight
argument_list|()
operator|.
name|createImage
argument_list|()
expr_stmt|;
name|table
operator|=
operator|new
name|FlexTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|addStyleName
argument_list|(
name|MY_STYLE
argument_list|)
expr_stmt|;
name|focusy
operator|=
operator|new
name|FocusPanel
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|focusy
operator|.
name|addKeyboardListener
argument_list|(
operator|new
name|KeyboardListenerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|Widget
name|sender
parameter_list|,
name|char
name|keyCode
parameter_list|,
name|int
name|modifiers
parameter_list|)
block|{
name|boolean
name|consume
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|modifiers
operator|==
literal|0
condition|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
literal|'k'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_UP
case|:
name|consume
operator|=
literal|true
expr_stmt|;
name|onUp
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'j'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_DOWN
case|:
name|consume
operator|=
literal|true
expr_stmt|;
name|onDown
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_ENTER
case|:
name|consume
operator|=
literal|true
expr_stmt|;
name|onEnter
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
if|if
condition|(
name|currentRow
operator|>=
literal|0
condition|)
block|{
name|consume
operator|=
literal|true
expr_stmt|;
name|onStarClick
argument_list|(
name|currentRow
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|consume
condition|)
block|{
specifier|final
name|Event
name|event
init|=
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
decl_stmt|;
name|DOM
operator|.
name|eventCancelBubble
argument_list|(
name|event
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|eventPreventDefault
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|focusy
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusListener
argument_list|()
block|{
specifier|public
name|void
name|onFocus
parameter_list|(
specifier|final
name|Widget
name|sender
parameter_list|)
block|{
if|if
condition|(
name|currentRow
operator|<
literal|0
condition|)
block|{
name|onDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onLostFocus
parameter_list|(
specifier|final
name|Widget
name|sender
parameter_list|)
block|{       }
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|focusy
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_ARROW
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_STAR
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_ID
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnID
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_SUBJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnSubject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_OWNER
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnOwner
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_REVIEWERS
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnReviewers
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_PROJECT
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnProject
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_LAST_UPDATE
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableColumnLastUpdate
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|C_ID
argument_list|,
name|S_C_ID
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|C_ID
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
name|S_ICON_HEADER
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|C_ID
init|;
name|i
operator|<
name|COLUMNS
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|i
argument_list|,
name|S_DATA_HEADER
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|addTableListener
argument_list|(
operator|new
name|TableListener
argument_list|()
block|{
specifier|public
name|void
name|onCellClicked
parameter_list|(
name|SourcesTableEvents
name|sender
parameter_list|,
name|int
name|row
parameter_list|,
name|int
name|cell
parameter_list|)
block|{
if|if
condition|(
name|cell
operator|==
name|C_STAR
condition|)
block|{
name|onStarClick
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|signedInListener
operator|=
operator|new
name|SignedInListener
argument_list|()
block|{
specifier|public
name|void
name|onSignIn
parameter_list|()
block|{
if|if
condition|(
name|table
operator|.
name|getRowCount
argument_list|()
operator|<=
name|sections
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// There are no data rows in this table, so star status is
comment|// simply not relevant to the caller.
comment|//
return|return;
block|}
name|Util
operator|.
name|LIST_SVC
operator|.
name|myStarredChangeIds
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Set
argument_list|<
name|Change
operator|.
name|Id
argument_list|>
name|result
parameter_list|)
block|{
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getChangeInfo
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|c
operator|.
name|setStarred
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setStar
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onSignOut
parameter_list|()
block|{
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getChangeInfo
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|table
operator|.
name|clearCell
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
expr_stmt|;
block|}
DECL|method|setChangeInfo (final int row, final ChangeInfo c)
specifier|private
name|void
name|setChangeInfo
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ChangeInfo
name|c
parameter_list|)
block|{
name|setChangeInfo
argument_list|(
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|getChangeInfo (final int row)
specifier|protected
name|ChangeInfo
name|getChangeInfo
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
return|return
name|getChangeInfo
argument_list|(
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|)
argument_list|)
return|;
block|}
DECL|method|onStarClick (final int row)
specifier|protected
name|void
name|onStarClick
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getChangeInfo
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
specifier|final
name|boolean
name|prior
init|=
name|c
operator|.
name|isStarred
argument_list|()
decl_stmt|;
name|c
operator|.
name|setStarred
argument_list|(
operator|!
name|prior
argument_list|)
expr_stmt|;
name|setStar
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
specifier|final
name|ToggleStarRequest
name|req
init|=
operator|new
name|ToggleStarRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|toggle
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|,
name|c
operator|.
name|isStarred
argument_list|()
argument_list|)
expr_stmt|;
name|Util
operator|.
name|LIST_SVC
operator|.
name|toggleStars
argument_list|(
name|req
argument_list|,
operator|new
name|GerritCallback
argument_list|<
name|VoidResult
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|VoidResult
name|result
parameter_list|)
block|{         }
annotation|@
name|Override
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|caught
argument_list|)
expr_stmt|;
name|c
operator|.
name|setStarred
argument_list|(
name|prior
argument_list|)
expr_stmt|;
name|setStar
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|onUp ()
specifier|protected
name|void
name|onUp
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|currentRow
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|getChangeInfo
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|onDown ()
specifier|protected
name|void
name|onDown
parameter_list|()
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|currentRow
operator|+
literal|1
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getChangeInfo
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|onEnter ()
specifier|protected
name|void
name|onEnter
parameter_list|()
block|{
if|if
condition|(
name|currentRow
operator|>=
literal|0
condition|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getChangeInfo
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Link
operator|.
name|toChange
argument_list|(
name|c
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Gerrit
operator|.
name|display
argument_list|(
operator|new
name|ChangeScreen
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|movePointerTo (final int newRow)
specifier|protected
name|void
name|movePointerTo
parameter_list|(
specifier|final
name|int
name|newRow
parameter_list|)
block|{
if|if
condition|(
name|newRow
operator|>=
literal|0
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|newRow
argument_list|,
name|C_ARROW
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|newRow
argument_list|,
name|C_ARROW
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentRow
operator|>=
literal|0
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|currentRow
argument_list|,
name|C_ARROW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|currentRow
operator|=
name|newRow
expr_stmt|;
block|}
DECL|method|finishDisplay ()
specifier|public
name|void
name|finishDisplay
parameter_list|()
block|{
if|if
condition|(
name|saveId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Change
operator|.
name|Id
name|oldId
init|=
name|savedPositions
operator|.
name|get
argument_list|(
name|saveId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getChangeInfo
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|oldId
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getId
argument_list|()
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|currentRow
operator|<
literal|0
condition|)
block|{
name|onDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentRow
operator|>=
literal|0
condition|)
block|{
name|DeferredCommand
operator|.
name|addCommand
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSavePointerId (final String id)
specifier|public
name|void
name|setSavePointerId
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
name|saveId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onLoad ()
specifier|public
name|void
name|onLoad
parameter_list|()
block|{
name|super
operator|.
name|onLoad
argument_list|()
expr_stmt|;
name|Gerrit
operator|.
name|addSignedInListener
argument_list|(
name|signedInListener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|public
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|saveId
operator|!=
literal|null
operator|&&
name|currentRow
operator|>=
literal|0
condition|)
block|{
specifier|final
name|ChangeInfo
name|c
init|=
name|getChangeInfo
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|savedPositions
operator|.
name|put
argument_list|(
name|saveId
argument_list|,
name|c
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Gerrit
operator|.
name|removeSignedInListener
argument_list|(
name|signedInListener
argument_list|)
expr_stmt|;
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
DECL|method|insertNoneRow (final int row)
specifier|private
name|void
name|insertNoneRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|Util
operator|.
name|C
operator|.
name|changeTableNone
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setColSpan
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStyleName
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|S_EMPTY_SECTION
argument_list|)
expr_stmt|;
block|}
DECL|method|insertChangeRow (final int row)
specifier|private
name|void
name|insertChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|,
name|S_ICON_CELL
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|,
name|S_ICON_CELL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|C_ID
init|;
name|i
operator|<
name|COLUMNS
condition|;
name|i
operator|++
control|)
block|{
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|i
argument_list|,
name|S_DATA_CELL
argument_list|)
expr_stmt|;
block|}
name|fmt
operator|.
name|addStyleName
argument_list|(
name|row
argument_list|,
name|C_ID
argument_list|,
name|S_C_ID
argument_list|)
expr_stmt|;
block|}
DECL|method|populateChangeRow (final int row, final ChangeInfo c)
specifier|private
name|void
name|populateChangeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ChangeInfo
name|c
parameter_list|)
block|{
specifier|final
name|String
name|idstr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|c
operator|.
name|getId
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_ARROW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gerrit
operator|.
name|isSignedIn
argument_list|()
condition|)
block|{
name|setStar
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_ID
argument_list|,
operator|new
name|ChangeLink
argument_list|(
name|idstr
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|c
operator|.
name|getSubject
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|getStatus
argument_list|()
operator|!=
literal|null
operator|&&
name|c
operator|.
name|getStatus
argument_list|()
operator|!=
name|Change
operator|.
name|Status
operator|.
name|NEW
condition|)
block|{
name|s
operator|+=
literal|" ("
operator|+
name|c
operator|.
name|getStatus
argument_list|()
operator|.
name|name
argument_list|()
operator|+
literal|")"
expr_stmt|;
block|}
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_SUBJECT
argument_list|,
operator|new
name|ChangeLink
argument_list|(
name|s
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_OWNER
argument_list|,
operator|new
name|AccountDashboardLink
argument_list|(
name|c
operator|.
name|getOwner
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|C_REVIEWERS
argument_list|,
literal|"TODO"
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|C_PROJECT
argument_list|,
name|c
operator|.
name|getProject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|row
argument_list|,
name|C_LAST_UPDATE
argument_list|,
literal|"TODO"
argument_list|)
expr_stmt|;
name|setChangeInfo
argument_list|(
name|row
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
DECL|method|setStar (final int row, final ChangeInfo c)
specifier|private
name|void
name|setStar
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|ChangeInfo
name|c
parameter_list|)
block|{
specifier|final
name|AbstractImagePrototype
name|star
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isStarred
argument_list|()
condition|)
block|{
name|star
operator|=
name|Gerrit
operator|.
name|ICONS
operator|.
name|starFilled
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|star
operator|=
name|Gerrit
operator|.
name|ICONS
operator|.
name|starOpen
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Widget
name|i
init|=
name|table
operator|.
name|getWidget
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|instanceof
name|Image
condition|)
block|{
name|star
operator|.
name|applyTo
argument_list|(
operator|(
name|Image
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|row
argument_list|,
name|C_STAR
argument_list|,
name|star
operator|.
name|createImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addSection (final Section s)
specifier|public
name|void
name|addSection
parameter_list|(
specifier|final
name|Section
name|s
parameter_list|)
block|{
assert|assert
name|s
operator|.
name|parent
operator|==
literal|null
assert|;
if|if
condition|(
name|s
operator|.
name|titleText
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|titleRow
operator|=
name|table
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|titleText
argument_list|)
expr_stmt|;
specifier|final
name|FlexCellFormatter
name|fmt
init|=
name|table
operator|.
name|getFlexCellFormatter
argument_list|()
decl_stmt|;
name|fmt
operator|.
name|setColSpan
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|COLUMNS
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|addStyleName
argument_list|(
name|s
operator|.
name|titleRow
argument_list|,
literal|0
argument_list|,
name|S_SECTION_HEADER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|.
name|titleRow
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|s
operator|.
name|parent
operator|=
name|this
expr_stmt|;
name|s
operator|.
name|dataBegin
operator|=
name|table
operator|.
name|getRowCount
argument_list|()
expr_stmt|;
name|insertNoneRow
argument_list|(
name|s
operator|.
name|dataBegin
argument_list|)
expr_stmt|;
name|sections
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
DECL|method|insertRow (final int beforeRow)
specifier|private
name|int
name|insertRow
parameter_list|(
specifier|final
name|int
name|beforeRow
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
name|boolean
name|dirty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|beforeRow
operator|<=
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|beforeRow
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|++
expr_stmt|;
block|}
block|}
return|return
name|table
operator|.
name|insertRow
argument_list|(
name|beforeRow
argument_list|)
return|;
block|}
DECL|method|removeRow (final int row)
specifier|private
name|void
name|removeRow
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Section
name|s
range|:
name|sections
control|)
block|{
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|titleRow
condition|)
block|{
name|s
operator|.
name|titleRow
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|row
operator|<
name|s
operator|.
name|dataBegin
condition|)
block|{
name|s
operator|.
name|dataBegin
operator|--
expr_stmt|;
block|}
block|}
name|table
operator|.
name|removeRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
DECL|method|getTabIndex ()
specifier|public
name|int
name|getTabIndex
parameter_list|()
block|{
return|return
name|focusy
operator|.
name|getTabIndex
argument_list|()
return|;
block|}
DECL|method|setAccessKey (char key)
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|char
name|key
parameter_list|)
block|{
name|focusy
operator|.
name|setAccessKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|setFocus (boolean focused)
specifier|public
name|void
name|setFocus
parameter_list|(
name|boolean
name|focused
parameter_list|)
block|{
name|focusy
operator|.
name|setFocus
argument_list|(
name|focused
argument_list|)
expr_stmt|;
block|}
DECL|method|setTabIndex (int index)
specifier|public
name|void
name|setTabIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|focusy
operator|.
name|setTabIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|addFocusListener (FocusListener listener)
specifier|public
name|void
name|addFocusListener
parameter_list|(
name|FocusListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|addFocusListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|addKeyboardListener (KeyboardListener listener)
specifier|public
name|void
name|addKeyboardListener
parameter_list|(
name|KeyboardListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|addKeyboardListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFocusListener (FocusListener listener)
specifier|public
name|void
name|removeFocusListener
parameter_list|(
name|FocusListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|removeFocusListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeyboardListener (KeyboardListener listener)
specifier|public
name|void
name|removeKeyboardListener
parameter_list|(
name|KeyboardListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|removeKeyboardListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|class|Section
specifier|public
specifier|static
class|class
name|Section
block|{
DECL|field|titleText
name|String
name|titleText
decl_stmt|;
DECL|field|parent
name|ChangeTable
name|parent
decl_stmt|;
DECL|field|titleRow
name|int
name|titleRow
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|dataBegin
name|int
name|dataBegin
decl_stmt|;
DECL|field|rows
name|int
name|rows
decl_stmt|;
DECL|method|Section ()
specifier|public
name|Section
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|Section (final String titleText)
specifier|public
name|Section
parameter_list|(
specifier|final
name|String
name|titleText
parameter_list|)
block|{
name|setTitleText
argument_list|(
name|titleText
argument_list|)
expr_stmt|;
block|}
DECL|method|setTitleText (final String text)
specifier|public
name|void
name|setTitleText
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|titleText
operator|=
name|text
expr_stmt|;
if|if
condition|(
name|titleRow
operator|>=
literal|0
condition|)
block|{
name|parent
operator|.
name|table
operator|.
name|setText
argument_list|(
name|titleRow
argument_list|,
literal|0
argument_list|,
name|titleText
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|display (final List<ChangeInfo> changeList)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|ChangeInfo
argument_list|>
name|changeList
parameter_list|)
block|{
specifier|final
name|int
name|sz
init|=
name|changeList
operator|!=
literal|null
condition|?
name|changeList
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
specifier|final
name|boolean
name|hadData
init|=
name|rows
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|hadData
condition|)
block|{
while|while
condition|(
name|sz
operator|<
name|rows
condition|)
block|{
name|parent
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
name|rows
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|hadData
condition|)
block|{
name|parent
operator|.
name|insertNoneRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|hadData
condition|)
block|{
name|parent
operator|.
name|removeRow
argument_list|(
name|dataBegin
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rows
operator|<
name|sz
condition|)
block|{
name|parent
operator|.
name|insertChangeRow
argument_list|(
name|dataBegin
operator|+
name|rows
argument_list|)
expr_stmt|;
name|rows
operator|++
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|parent
operator|.
name|populateChangeRow
argument_list|(
name|dataBegin
operator|+
name|i
argument_list|,
name|changeList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|setChangeInfo (Element td, ChangeInfo c)
specifier|private
specifier|static
specifier|final
specifier|native
name|void
name|setChangeInfo
parameter_list|(
name|Element
name|td
parameter_list|,
name|ChangeInfo
name|c
parameter_list|)
comment|/*-{ td["__gerritChangeInfo"] = c; }-*/
function_decl|;
DECL|method|getChangeInfo (Element td)
specifier|private
specifier|static
specifier|final
specifier|native
name|ChangeInfo
name|getChangeInfo
parameter_list|(
name|Element
name|td
parameter_list|)
comment|/*-{ return td["__gerritChangeInfo"]; }-*/
function_decl|;
block|}
end_class

end_unit

