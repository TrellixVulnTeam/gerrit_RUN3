begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.data
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Branch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|http
operator|.
name|client
operator|.
name|URL
import|;
end_import

begin_comment
comment|/** Link to an external gitweb server. */
end_comment

begin_class
DECL|class|GitwebLink
specifier|public
class|class
name|GitwebLink
block|{
DECL|field|baseUrl
specifier|protected
name|String
name|baseUrl
decl_stmt|;
DECL|method|GitwebLink ()
specifier|protected
name|GitwebLink
parameter_list|()
block|{   }
DECL|method|GitwebLink (final String base)
specifier|public
name|GitwebLink
parameter_list|(
specifier|final
name|String
name|base
parameter_list|)
block|{
name|baseUrl
operator|=
name|base
operator|+
literal|"?"
expr_stmt|;
block|}
DECL|method|toRevision (final Project.NameKey project, final PatchSet ps)
specifier|public
name|String
name|toRevision
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|,
specifier|final
name|PatchSet
name|ps
parameter_list|)
block|{
specifier|final
name|StringBuffer
name|r
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|p
argument_list|(
name|r
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|h
argument_list|(
name|r
argument_list|,
name|ps
argument_list|)
expr_stmt|;
return|return
name|baseUrl
operator|+
name|r
return|;
block|}
DECL|method|toProject (final Project.NameKey project)
specifier|public
name|String
name|toProject
parameter_list|(
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
specifier|final
name|StringBuffer
name|r
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|p
argument_list|(
name|r
argument_list|,
name|project
argument_list|)
expr_stmt|;
name|a
argument_list|(
name|r
argument_list|,
literal|"summary"
argument_list|)
expr_stmt|;
return|return
name|baseUrl
operator|+
name|r
return|;
block|}
DECL|method|toBranch (final Branch.NameKey branch)
specifier|public
name|String
name|toBranch
parameter_list|(
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
specifier|final
name|StringBuffer
name|r
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|p
argument_list|(
name|r
argument_list|,
name|branch
operator|.
name|getParentKey
argument_list|()
argument_list|)
expr_stmt|;
name|h
argument_list|(
name|r
argument_list|,
name|branch
argument_list|)
expr_stmt|;
name|a
argument_list|(
name|r
argument_list|,
literal|"shortlog"
argument_list|)
expr_stmt|;
return|return
name|baseUrl
operator|+
name|r
return|;
block|}
DECL|method|p (final StringBuffer r, final Project.NameKey project)
specifier|private
specifier|static
name|void
name|p
parameter_list|(
specifier|final
name|StringBuffer
name|r
parameter_list|,
specifier|final
name|Project
operator|.
name|NameKey
name|project
parameter_list|)
block|{
name|String
name|n
init|=
name|project
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|endsWith
argument_list|(
literal|".git"
argument_list|)
condition|)
block|{
name|n
operator|+=
literal|".git"
expr_stmt|;
block|}
name|var
argument_list|(
name|r
argument_list|,
literal|"p"
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
DECL|method|h (final StringBuffer r, final PatchSet ps)
specifier|private
specifier|static
name|void
name|h
parameter_list|(
specifier|final
name|StringBuffer
name|r
parameter_list|,
specifier|final
name|PatchSet
name|ps
parameter_list|)
block|{
name|var
argument_list|(
name|r
argument_list|,
literal|"h"
argument_list|,
name|ps
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|h (final StringBuffer r, final Branch.NameKey branch)
specifier|private
specifier|static
name|void
name|h
parameter_list|(
specifier|final
name|StringBuffer
name|r
parameter_list|,
specifier|final
name|Branch
operator|.
name|NameKey
name|branch
parameter_list|)
block|{
name|var
argument_list|(
name|r
argument_list|,
literal|"h"
argument_list|,
name|branch
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|a (final StringBuffer r, final String where)
specifier|private
specifier|static
name|void
name|a
parameter_list|(
specifier|final
name|StringBuffer
name|r
parameter_list|,
specifier|final
name|String
name|where
parameter_list|)
block|{
name|var
argument_list|(
name|r
argument_list|,
literal|"a"
argument_list|,
name|where
argument_list|)
expr_stmt|;
block|}
DECL|method|var (final StringBuffer r, final String n, final String v)
specifier|private
specifier|static
name|void
name|var
parameter_list|(
specifier|final
name|StringBuffer
name|r
parameter_list|,
specifier|final
name|String
name|n
parameter_list|,
specifier|final
name|String
name|v
parameter_list|)
block|{
if|if
condition|(
name|r
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|r
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|r
operator|.
name|append
argument_list|(
name|URL
operator|.
name|encodeComponent
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

