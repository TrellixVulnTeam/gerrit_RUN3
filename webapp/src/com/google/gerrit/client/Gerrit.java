begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|EntryPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|WindowResizeListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ClickListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DockPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlowPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HTML
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Hyperlink
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Panel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|StackPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
DECL|class|Gerrit
specifier|public
class|class
name|Gerrit
implements|implements
name|EntryPoint
block|{
comment|/**    * Name of the Cookie our authentication data is stored in.    *<p>    * If this cookie has a value we assume we are signed in.    *     * @see #isSignedIn()    */
DECL|field|AUTH_COOKIE
specifier|public
specifier|static
specifier|final
name|String
name|AUTH_COOKIE
init|=
literal|"GerritAccount"
decl_stmt|;
DECL|field|C
specifier|public
specifier|static
name|GerritConstants
name|C
decl_stmt|;
DECL|field|linkManager
specifier|private
specifier|static
name|Link
name|linkManager
decl_stmt|;
DECL|field|body
specifier|private
specifier|static
name|DockPanel
name|body
decl_stmt|;
DECL|field|topMenu
specifier|private
specifier|static
name|Panel
name|topMenu
decl_stmt|;
DECL|field|leftMenu
specifier|private
specifier|static
name|StackPanel
name|leftMenu
decl_stmt|;
DECL|field|codeReviewMenu
specifier|private
specifier|static
name|FlowPanel
name|codeReviewMenu
decl_stmt|;
DECL|field|adminMenu
specifier|private
specifier|static
name|FlowPanel
name|adminMenu
decl_stmt|;
DECL|field|currentScreen
specifier|private
specifier|static
name|Screen
name|currentScreen
decl_stmt|;
DECL|method|display (final Screen view)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|Screen
name|view
parameter_list|)
block|{
if|if
condition|(
name|currentScreen
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|remove
argument_list|(
name|currentScreen
argument_list|)
expr_stmt|;
block|}
name|currentScreen
operator|=
name|view
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|currentScreen
argument_list|,
name|DockPanel
operator|.
name|CENTER
argument_list|)
expr_stmt|;
block|}
comment|/** @return true if the user is currently authenticated */
DECL|method|isSignedIn ()
specifier|public
specifier|static
name|boolean
name|isSignedIn
parameter_list|()
block|{
return|return
name|Cookies
operator|.
name|getCookie
argument_list|(
name|AUTH_COOKIE
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Sign the user into the application.    *     * @param callback optional; if sign in is successful the onSuccess method    *        will be called.    */
DECL|method|doSignIn (final AsyncCallback<?> callback)
specifier|public
specifier|static
name|void
name|doSignIn
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|?
argument_list|>
name|callback
parameter_list|)
block|{
operator|new
name|SignInDialog
argument_list|(
name|callback
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
comment|/** Sign the user out of the application (and discard the cookies). */
DECL|method|doSignOut ()
specifier|public
specifier|static
name|void
name|doSignOut
parameter_list|()
block|{
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|AUTH_COOKIE
argument_list|)
expr_stmt|;
name|refreshMenus
argument_list|()
expr_stmt|;
block|}
DECL|method|onModuleLoad ()
specifier|public
name|void
name|onModuleLoad
parameter_list|()
block|{
name|C
operator|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritConstants
operator|.
name|class
argument_list|)
expr_stmt|;
name|linkManager
operator|=
operator|new
name|Link
argument_list|()
expr_stmt|;
name|History
operator|.
name|addHistoryListener
argument_list|(
name|linkManager
argument_list|)
expr_stmt|;
name|body
operator|=
operator|new
name|DockPanel
argument_list|()
expr_stmt|;
name|body
operator|.
name|setWidth
argument_list|(
literal|"95%"
argument_list|)
expr_stmt|;
name|body
operator|.
name|setHeight
argument_list|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|Window
operator|.
name|addWindowResizeListener
argument_list|(
operator|new
name|WindowResizeListener
argument_list|()
block|{
specifier|public
name|void
name|onWindowResized
parameter_list|(
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|height
parameter_list|)
block|{
name|body
operator|.
name|setHeight
argument_list|(
name|height
operator|+
literal|"px"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_body"
argument_list|)
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|topMenu
operator|=
operator|new
name|FlowPanel
argument_list|()
expr_stmt|;
name|topMenu
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-TopMenu"
argument_list|)
expr_stmt|;
name|codeReviewMenu
operator|=
name|createMenuList
argument_list|()
expr_stmt|;
name|leftMenu
operator|=
operator|new
name|StackPanel
argument_list|()
expr_stmt|;
name|leftMenu
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-LeftMenu"
argument_list|)
expr_stmt|;
name|leftMenu
operator|.
name|add
argument_list|(
name|codeReviewMenu
argument_list|,
name|C
operator|.
name|leftMenuCodeReviews
argument_list|()
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|topMenu
argument_list|,
name|DockPanel
operator|.
name|NORTH
argument_list|)
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|leftMenu
argument_list|,
name|DockPanel
operator|.
name|LINE_START
argument_list|)
expr_stmt|;
name|body
operator|.
name|setCellHeight
argument_list|(
name|topMenu
argument_list|,
literal|"20px"
argument_list|)
expr_stmt|;
name|body
operator|.
name|setCellWidth
argument_list|(
name|leftMenu
argument_list|,
literal|"150px"
argument_list|)
expr_stmt|;
name|refreshMenus
argument_list|()
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
condition|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Link
operator|.
name|MINE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|History
operator|.
name|fireCurrentHistoryState
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Hook from {@link SignInDialog} to let us know to refresh the UI. */
DECL|method|postSignIn ()
specifier|static
name|void
name|postSignIn
parameter_list|()
block|{
name|refreshMenus
argument_list|()
expr_stmt|;
block|}
DECL|method|refreshMenus ()
specifier|private
specifier|static
name|void
name|refreshMenus
parameter_list|()
block|{
name|refreshTopMenu
argument_list|()
expr_stmt|;
name|refreshCodeReviewMenu
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSignedIn
argument_list|()
condition|)
block|{
if|if
condition|(
name|adminMenu
operator|==
literal|null
condition|)
block|{
name|adminMenu
operator|=
name|createAdminMenu
argument_list|()
expr_stmt|;
name|leftMenu
operator|.
name|add
argument_list|(
name|adminMenu
argument_list|,
name|C
operator|.
name|leftMenuAdmin
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|adminMenu
operator|!=
literal|null
condition|)
block|{
name|leftMenu
operator|.
name|remove
argument_list|(
name|adminMenu
argument_list|)
expr_stmt|;
name|adminMenu
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
DECL|method|refreshTopMenu ()
specifier|private
specifier|static
name|void
name|refreshTopMenu
parameter_list|()
block|{
specifier|final
name|Panel
name|m
init|=
name|topMenu
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|isSignedIn
argument_list|()
condition|)
block|{
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuSettings
argument_list|()
argument_list|,
name|Link
operator|.
name|SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|HTML
argument_list|(
literal|"&nbsp;|&nbsp;"
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|final
name|Hyperlink
name|signout
init|=
operator|new
name|Hyperlink
argument_list|()
decl_stmt|;
name|signout
operator|.
name|setText
argument_list|(
name|C
operator|.
name|menuSignOut
argument_list|()
argument_list|)
expr_stmt|;
name|signout
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-Hyperlink"
argument_list|)
expr_stmt|;
name|signout
operator|.
name|addClickListener
argument_list|(
operator|new
name|ClickListener
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|Widget
name|sender
parameter_list|)
block|{
name|doSignOut
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|signout
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
block|{
specifier|final
name|Hyperlink
name|signin
init|=
operator|new
name|Hyperlink
argument_list|()
decl_stmt|;
name|signin
operator|.
name|setText
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|)
expr_stmt|;
name|signin
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-Hyperlink"
argument_list|)
expr_stmt|;
name|signin
operator|.
name|addClickListener
argument_list|(
operator|new
name|ClickListener
argument_list|()
block|{
specifier|public
name|void
name|onClick
parameter_list|(
name|Widget
name|sender
parameter_list|)
block|{
name|doSignIn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
name|signin
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|createMenuList ()
specifier|private
specifier|static
name|FlowPanel
name|createMenuList
parameter_list|()
block|{
specifier|final
name|FlowPanel
name|m
init|=
operator|new
name|FlowPanel
argument_list|()
decl_stmt|;
name|m
operator|.
name|setStyleName
argument_list|(
literal|"gerrit-MenuList"
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
DECL|method|refreshCodeReviewMenu ()
specifier|private
specifier|static
name|void
name|refreshCodeReviewMenu
parameter_list|()
block|{
specifier|final
name|boolean
name|signedIn
init|=
name|isSignedIn
argument_list|()
decl_stmt|;
specifier|final
name|FlowPanel
name|m
init|=
name|codeReviewMenu
decl_stmt|;
name|m
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuMyChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuMyUnclaimedChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE_UNCLAIMED
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuAllRecentChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuAllUnclaimedChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|ALL_UNCLAIMED
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuMyStarredChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE_STARRED
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createAdminMenu ()
specifier|private
specifier|static
name|FlowPanel
name|createAdminMenu
parameter_list|()
block|{
specifier|final
name|FlowPanel
name|m
init|=
name|createMenuList
argument_list|()
decl_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuPeople
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_PEOPLE
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuGroups
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_GROUPS
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|add
argument_list|(
operator|new
name|Hyperlink
argument_list|(
name|C
operator|.
name|menuProjects
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_PROJECTS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|m
return|;
block|}
block|}
end_class

end_unit

