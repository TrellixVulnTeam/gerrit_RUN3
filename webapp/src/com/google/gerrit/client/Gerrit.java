begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|GerritConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|SystemInfoService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|GerritCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|LinkMenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
operator|.
name|Screen
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|EntryPoint
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|client
operator|.
name|GWT
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Cookies
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DeferredCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|History
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Window
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|WindowResizeListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|rpc
operator|.
name|AsyncCallback
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuBar
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|MenuItem
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|RootPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|client
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
DECL|class|Gerrit
specifier|public
class|class
name|Gerrit
implements|implements
name|EntryPoint
block|{
comment|/**    * Name of the Cookie our authentication data is stored in.    *<p>    * If this cookie has a value we assume we are signed in.    *     * @see #isSignedIn()    */
DECL|field|ACCOUNT_COOKIE
specifier|public
specifier|static
specifier|final
name|String
name|ACCOUNT_COOKIE
init|=
literal|"GerritAccount"
decl_stmt|;
DECL|field|OPENIDUSER_COOKIE
specifier|public
specifier|static
specifier|final
name|String
name|OPENIDUSER_COOKIE
init|=
literal|"GerritOpenIdUser"
decl_stmt|;
DECL|field|C
specifier|public
specifier|static
specifier|final
name|GerritConstants
name|C
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritConstants
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ICONS
specifier|public
specifier|static
specifier|final
name|GerritIcons
name|ICONS
init|=
name|GWT
operator|.
name|create
argument_list|(
name|GerritIcons
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|SYSTEM_SVC
specifier|public
specifier|static
specifier|final
name|SystemInfoService
name|SYSTEM_SVC
decl_stmt|;
DECL|field|config
specifier|private
specifier|static
name|GerritConfig
name|config
decl_stmt|;
DECL|field|myAccount
specifier|private
specifier|static
name|Account
name|myAccount
decl_stmt|;
DECL|field|signedInListeners
specifier|private
specifier|static
specifier|final
name|ArrayList
argument_list|<
name|SignedInListener
argument_list|>
name|signedInListeners
init|=
operator|new
name|ArrayList
argument_list|<
name|SignedInListener
argument_list|>
argument_list|()
decl_stmt|;
DECL|field|menuBar
specifier|private
specifier|static
name|LinkMenuBar
name|menuBar
decl_stmt|;
DECL|field|body
specifier|private
specifier|static
name|RootPanel
name|body
decl_stmt|;
DECL|field|currentScreen
specifier|private
specifier|static
name|Screen
name|currentScreen
decl_stmt|;
DECL|field|priorScreens
specifier|private
specifier|static
specifier|final
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Screen
argument_list|>
name|priorScreens
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Screen
argument_list|>
argument_list|(
literal|10
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
specifier|final
name|Entry
argument_list|<
name|Object
argument_list|,
name|Screen
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
literal|3
operator|<=
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
static|static
block|{
name|SYSTEM_SVC
operator|=
name|GWT
operator|.
name|create
argument_list|(
name|SystemInfoService
operator|.
name|class
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|bind
argument_list|(
name|SYSTEM_SVC
argument_list|,
literal|"rpc/SystemInfoService"
argument_list|)
expr_stmt|;
block|}
DECL|method|display (final Screen view)
specifier|public
specifier|static
name|void
name|display
parameter_list|(
specifier|final
name|Screen
name|view
parameter_list|)
block|{
if|if
condition|(
name|view
operator|.
name|isRequiresSignIn
argument_list|()
operator|&&
operator|!
name|isSignedIn
argument_list|()
condition|)
block|{
name|doSignIn
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Object
name|result
parameter_list|)
block|{
name|display
argument_list|(
name|view
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{         }
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|currentScreen
operator|!=
literal|null
condition|)
block|{
name|body
operator|.
name|remove
argument_list|(
name|currentScreen
argument_list|)
expr_stmt|;
specifier|final
name|Object
name|sct
init|=
name|currentScreen
operator|.
name|getScreenCacheToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|sct
operator|!=
literal|null
condition|)
block|{
name|priorScreens
operator|.
name|put
argument_list|(
name|sct
argument_list|,
name|currentScreen
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Screen
name|p
init|=
name|priorScreens
operator|.
name|get
argument_list|(
name|view
operator|.
name|getScreenCacheToken
argument_list|()
argument_list|)
decl_stmt|;
name|currentScreen
operator|=
name|p
operator|!=
literal|null
condition|?
name|p
operator|.
name|recycleThis
argument_list|(
name|view
argument_list|)
else|:
name|view
expr_stmt|;
name|body
operator|.
name|add
argument_list|(
name|currentScreen
argument_list|)
expr_stmt|;
block|}
comment|/** Get the public configuration data used by this Gerrit server. */
DECL|method|getGerritConfig ()
specifier|public
specifier|static
name|GerritConfig
name|getGerritConfig
parameter_list|()
block|{
return|return
name|config
return|;
block|}
comment|/** @return the currently signed in user's account data; null if no account */
DECL|method|getUserAccount ()
specifier|public
specifier|static
name|Account
name|getUserAccount
parameter_list|()
block|{
return|return
name|myAccount
return|;
block|}
comment|/** @return true if the user is currently authenticated */
DECL|method|isSignedIn ()
specifier|public
specifier|static
name|boolean
name|isSignedIn
parameter_list|()
block|{
return|return
name|getUserAccount
argument_list|()
operator|!=
literal|null
return|;
block|}
comment|/**    * Sign the user into the application.    *     * @param callback optional; if sign in is successful the onSuccess method    *        will be called.    */
DECL|method|doSignIn (final AsyncCallback<?> callback)
specifier|public
specifier|static
name|void
name|doSignIn
parameter_list|(
specifier|final
name|AsyncCallback
argument_list|<
name|?
argument_list|>
name|callback
parameter_list|)
block|{
operator|new
name|SignInDialog
argument_list|(
name|callback
argument_list|)
operator|.
name|center
argument_list|()
expr_stmt|;
block|}
comment|/** Sign the user out of the application (and discard the cookies). */
DECL|method|doSignOut ()
specifier|public
specifier|static
name|void
name|doSignOut
parameter_list|()
block|{
name|myAccount
operator|=
literal|null
expr_stmt|;
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|ACCOUNT_COOKIE
argument_list|)
expr_stmt|;
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|OPENIDUSER_COOKIE
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SignedInListener
name|l
range|:
name|signedInListeners
control|)
block|{
name|l
operator|.
name|onSignOut
argument_list|()
expr_stmt|;
block|}
name|refreshMenuBar
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentScreen
operator|!=
literal|null
operator|&&
name|currentScreen
operator|.
name|isRequiresSignIn
argument_list|()
condition|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Link
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Add a listener to monitor sign-in status. */
DECL|method|addSignedInListener (final SignedInListener l)
specifier|public
specifier|static
name|void
name|addSignedInListener
parameter_list|(
specifier|final
name|SignedInListener
name|l
parameter_list|)
block|{
if|if
condition|(
operator|!
name|signedInListeners
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
block|{
name|signedInListeners
operator|.
name|add
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Remove a previously added sign in listener. */
DECL|method|removeSignedInListener (final SignedInListener l)
specifier|public
specifier|static
name|void
name|removeSignedInListener
parameter_list|(
specifier|final
name|SignedInListener
name|l
parameter_list|)
block|{
name|signedInListeners
operator|.
name|remove
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
DECL|method|onModuleLoad ()
specifier|public
name|void
name|onModuleLoad
parameter_list|()
block|{
specifier|final
name|RootPanel
name|topMenu
init|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_topmenu"
argument_list|)
decl_stmt|;
name|menuBar
operator|=
operator|new
name|LinkMenuBar
argument_list|()
expr_stmt|;
name|topMenu
operator|.
name|add
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
name|body
operator|=
name|RootPanel
operator|.
name|get
argument_list|(
literal|"gerrit_body"
argument_list|)
expr_stmt|;
name|body
operator|.
name|setHeight
argument_list|(
name|Window
operator|.
name|getClientHeight
argument_list|()
operator|+
literal|"px"
argument_list|)
expr_stmt|;
name|Window
operator|.
name|addWindowResizeListener
argument_list|(
operator|new
name|WindowResizeListener
argument_list|()
block|{
specifier|public
name|void
name|onWindowResized
parameter_list|(
specifier|final
name|int
name|width
parameter_list|,
specifier|final
name|int
name|height
parameter_list|)
block|{
name|body
operator|.
name|setHeight
argument_list|(
name|height
operator|+
literal|"px"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|JsonUtil
operator|.
name|addRpcStatusListener
argument_list|(
operator|new
name|RpcStatus
argument_list|(
name|topMenu
argument_list|)
argument_list|)
expr_stmt|;
name|SYSTEM_SVC
operator|.
name|loadGerritConfig
argument_list|(
operator|new
name|GerritCallback
argument_list|<
name|GerritConfig
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|GerritConfig
name|result
parameter_list|)
block|{
name|config
operator|=
name|result
expr_stmt|;
name|onModuleLoad2
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|onModuleLoad2 ()
specifier|private
name|void
name|onModuleLoad2
parameter_list|()
block|{
if|if
condition|(
name|Cookies
operator|.
name|getCookie
argument_list|(
name|ACCOUNT_COOKIE
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// If the user is likely to already be signed into their account,
comment|// load the account data and update the UI with that.
comment|//
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|account
operator|.
name|Util
operator|.
name|ACCOUNT_SVC
operator|.
name|myAccount
argument_list|(
operator|new
name|AsyncCallback
argument_list|<
name|Account
argument_list|>
argument_list|()
block|{
specifier|public
name|void
name|onSuccess
parameter_list|(
specifier|final
name|Account
name|result
parameter_list|)
block|{
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|postSignIn
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Cookies
operator|.
name|removeCookie
argument_list|(
name|ACCOUNT_COOKIE
argument_list|)
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
block|}
name|showInitialScreen
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|caught
parameter_list|)
block|{
name|GWT
operator|.
name|log
argument_list|(
literal|"Unexpected failure from validating account"
argument_list|,
name|caught
argument_list|)
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
name|showInitialScreen
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|refreshMenuBar
argument_list|()
expr_stmt|;
name|showInitialScreen
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|showInitialScreen ()
specifier|private
name|void
name|showInitialScreen
parameter_list|()
block|{
name|History
operator|.
name|addHistoryListener
argument_list|(
operator|new
name|Link
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|History
operator|.
name|getToken
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSignedIn
argument_list|()
condition|)
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Link
operator|.
name|MINE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|History
operator|.
name|newItem
argument_list|(
name|Link
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|History
operator|.
name|fireCurrentHistoryState
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Hook from {@link SignInDialog} to let us know to refresh the UI. */
DECL|method|postSignIn (final Account acct)
specifier|static
name|void
name|postSignIn
parameter_list|(
specifier|final
name|Account
name|acct
parameter_list|)
block|{
name|myAccount
operator|=
name|acct
expr_stmt|;
name|refreshMenuBar
argument_list|()
expr_stmt|;
name|DeferredCommand
operator|.
name|addCommand
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
for|for
control|(
specifier|final
name|SignedInListener
name|l
range|:
name|signedInListeners
control|)
block|{
name|l
operator|.
name|onSignIn
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|refreshMenuBar ()
specifier|private
specifier|static
name|void
name|refreshMenuBar
parameter_list|()
block|{
name|menuBar
operator|.
name|clearItems
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|signedIn
init|=
name|isSignedIn
argument_list|()
decl_stmt|;
name|MenuBar
name|m
decl_stmt|;
name|m
operator|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllRecentChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|ALL
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuAllUnclaimedChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|ALL_UNCLAIMED
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuAll
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyUnclaimedChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE_UNCLAIMED
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuMyStarredChanges
argument_list|()
argument_list|,
name|Link
operator|.
name|MINE_STARRED
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuMine
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|signedIn
condition|)
block|{
name|m
operator|=
operator|new
name|MenuBar
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuPeople
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_PEOPLE
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuGroups
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_GROUPS
argument_list|)
expr_stmt|;
name|addLink
argument_list|(
name|m
argument_list|,
name|C
operator|.
name|menuProjects
argument_list|()
argument_list|,
name|Link
operator|.
name|ADMIN_PROJECTS
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuAdmin
argument_list|()
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
name|menuBar
operator|.
name|lastInGroup
argument_list|()
expr_stmt|;
name|menuBar
operator|.
name|addGlue
argument_list|()
expr_stmt|;
if|if
condition|(
name|signedIn
condition|)
block|{
name|whoAmI
argument_list|()
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|C
operator|.
name|menuSettings
argument_list|()
argument_list|,
name|Link
operator|.
name|SETTINGS
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignOut
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignOut
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menuBar
operator|.
name|addItem
argument_list|(
name|C
operator|.
name|menuSignIn
argument_list|()
argument_list|,
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|doSignIn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|menuBar
operator|.
name|lastInGroup
argument_list|()
expr_stmt|;
block|}
DECL|method|whoAmI ()
specifier|private
specifier|static
name|void
name|whoAmI
parameter_list|()
block|{
specifier|final
name|String
name|name
init|=
name|FormatUtil
operator|.
name|nameEmail
argument_list|(
name|getUserAccount
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MenuItem
name|me
init|=
name|menuBar
operator|.
name|addItem
argument_list|(
name|name
argument_list|,
operator|(
name|Command
operator|)
literal|null
argument_list|)
decl_stmt|;
name|me
operator|.
name|removeStyleName
argument_list|(
literal|"gwt-MenuItem"
argument_list|)
expr_stmt|;
name|me
operator|.
name|addStyleName
argument_list|(
literal|"gerrit-MenuBarUserName"
argument_list|)
expr_stmt|;
block|}
DECL|method|addLink (final MenuBar m, final String text, final String historyToken)
specifier|private
specifier|static
name|void
name|addLink
parameter_list|(
specifier|final
name|MenuBar
name|m
parameter_list|,
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|String
name|historyToken
parameter_list|)
block|{
name|m
operator|.
name|addItem
argument_list|(
operator|new
name|LinkMenuItem
argument_list|(
name|text
argument_list|,
name|historyToken
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

