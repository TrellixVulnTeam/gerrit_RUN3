begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Command
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DeferredCommand
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FlexTable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FocusPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|HasFocus
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Image
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|KeyboardListener
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|KeyboardListenerAdapter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_class
DECL|class|FancyFlexTable
specifier|public
specifier|abstract
class|class
name|FancyFlexTable
parameter_list|<
name|RowItem
parameter_list|>
extends|extends
name|Composite
implements|implements
name|HasFocus
block|{
DECL|field|MY_STYLE
specifier|protected
specifier|static
specifier|final
name|String
name|MY_STYLE
init|=
literal|"gerrit-ChangeTable"
decl_stmt|;
DECL|field|S_ICON_HEADER
specifier|protected
specifier|static
specifier|final
name|String
name|S_ICON_HEADER
init|=
literal|"IconHeader"
decl_stmt|;
DECL|field|S_DATA_HEADER
specifier|protected
specifier|static
specifier|final
name|String
name|S_DATA_HEADER
init|=
literal|"DataHeader"
decl_stmt|;
DECL|field|S_ICON_CELL
specifier|protected
specifier|static
specifier|final
name|String
name|S_ICON_CELL
init|=
literal|"IconCell"
decl_stmt|;
DECL|field|S_DATA_CELL
specifier|protected
specifier|static
specifier|final
name|String
name|S_DATA_CELL
init|=
literal|"DataCell"
decl_stmt|;
DECL|field|C_ARROW
specifier|protected
specifier|static
specifier|final
name|int
name|C_ARROW
init|=
literal|0
decl_stmt|;
DECL|field|savedPositions
specifier|private
specifier|static
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|savedPositions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|10
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|eldest
parameter_list|)
block|{
return|return
name|size
argument_list|()
operator|>=
literal|20
return|;
block|}
block|}
decl_stmt|;
DECL|field|table
specifier|protected
specifier|final
name|MyFlexTable
name|table
decl_stmt|;
DECL|field|focusy
specifier|private
specifier|final
name|FocusPanel
name|focusy
decl_stmt|;
DECL|field|pointer
specifier|private
specifier|final
name|Image
name|pointer
decl_stmt|;
DECL|field|saveId
specifier|private
name|String
name|saveId
decl_stmt|;
DECL|field|currentRow
specifier|private
name|int
name|currentRow
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|FancyFlexTable ()
specifier|protected
name|FancyFlexTable
parameter_list|()
block|{
name|pointer
operator|=
name|Gerrit
operator|.
name|ICONS
operator|.
name|arrowRight
argument_list|()
operator|.
name|createImage
argument_list|()
expr_stmt|;
name|table
operator|=
operator|new
name|MyFlexTable
argument_list|()
expr_stmt|;
name|table
operator|.
name|addStyleName
argument_list|(
name|MY_STYLE
argument_list|)
expr_stmt|;
name|focusy
operator|=
operator|new
name|FocusPanel
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|focusy
operator|.
name|addKeyboardListener
argument_list|(
operator|new
name|KeyboardListenerAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onKeyPress
parameter_list|(
name|Widget
name|sender
parameter_list|,
name|char
name|keyCode
parameter_list|,
name|int
name|modifiers
parameter_list|)
block|{
if|if
condition|(
name|FancyFlexTable
operator|.
name|this
operator|.
name|onKeyPress
argument_list|(
name|keyCode
argument_list|,
name|modifiers
argument_list|)
condition|)
block|{
specifier|final
name|Event
name|event
init|=
name|DOM
operator|.
name|eventGetCurrentEvent
argument_list|()
decl_stmt|;
name|DOM
operator|.
name|eventCancelBubble
argument_list|(
name|event
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|eventPreventDefault
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|focusy
operator|.
name|addFocusListener
argument_list|(
operator|new
name|FocusListener
argument_list|()
block|{
specifier|public
name|void
name|onFocus
parameter_list|(
specifier|final
name|Widget
name|sender
parameter_list|)
block|{
if|if
condition|(
name|currentRow
operator|<
literal|0
condition|)
block|{
name|onDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|onLostFocus
parameter_list|(
specifier|final
name|Widget
name|sender
parameter_list|)
block|{       }
block|}
argument_list|)
expr_stmt|;
name|initWidget
argument_list|(
name|focusy
argument_list|)
expr_stmt|;
name|table
operator|.
name|setText
argument_list|(
literal|0
argument_list|,
name|C_ARROW
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
literal|0
argument_list|,
name|C_ARROW
argument_list|,
name|S_ICON_HEADER
argument_list|)
expr_stmt|;
block|}
DECL|method|getRowItem (final int row)
specifier|protected
name|RowItem
name|getRowItem
parameter_list|(
specifier|final
name|int
name|row
parameter_list|)
block|{
return|return
name|FancyFlexTable
operator|.
expr|<
name|RowItem
operator|>
name|getRowItem
argument_list|(
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|)
return|;
block|}
DECL|method|setRowItem (final int row, final RowItem item)
specifier|protected
name|void
name|setRowItem
parameter_list|(
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|RowItem
name|item
parameter_list|)
block|{
name|setRowItem
argument_list|(
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
DECL|method|resetHtml (final String body)
specifier|protected
name|void
name|resetHtml
parameter_list|(
specifier|final
name|String
name|body
parameter_list|)
block|{
name|DOM
operator|.
name|setInnerHTML
argument_list|(
name|table
operator|.
name|getBodyElement
argument_list|()
argument_list|,
name|body
argument_list|)
expr_stmt|;
block|}
DECL|method|onKeyPress (final char keyCode, final int modifiers)
specifier|protected
name|boolean
name|onKeyPress
parameter_list|(
specifier|final
name|char
name|keyCode
parameter_list|,
specifier|final
name|int
name|modifiers
parameter_list|)
block|{
if|if
condition|(
name|modifiers
operator|==
literal|0
condition|)
block|{
switch|switch
condition|(
name|keyCode
condition|)
block|{
case|case
literal|'k'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_UP
case|:
name|onUp
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
literal|'j'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_DOWN
case|:
name|onDown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
literal|'o'
case|:
case|case
name|KeyboardListener
operator|.
name|KEY_ENTER
case|:
name|onOpen
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|onUp ()
specifier|private
name|void
name|onUp
parameter_list|()
block|{
for|for
control|(
name|int
name|row
init|=
name|currentRow
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
name|row
operator|--
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|onDown ()
specifier|private
name|void
name|onDown
parameter_list|()
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|currentRow
operator|+
literal|1
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
if|if
condition|(
name|getRowItem
argument_list|(
name|row
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
DECL|method|onOpen ()
specifier|private
name|void
name|onOpen
parameter_list|()
block|{
if|if
condition|(
literal|0
operator|<=
name|currentRow
operator|&&
name|currentRow
operator|<
name|table
operator|.
name|getRowCount
argument_list|()
condition|)
block|{
specifier|final
name|RowItem
name|item
init|=
name|getRowItem
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|null
condition|)
block|{
name|onOpenItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|onOpenItem (final RowItem item)
specifier|protected
name|void
name|onOpenItem
parameter_list|(
specifier|final
name|RowItem
name|item
parameter_list|)
block|{   }
DECL|method|getRowItemKey (RowItem item)
specifier|protected
specifier|abstract
name|Object
name|getRowItemKey
parameter_list|(
name|RowItem
name|item
parameter_list|)
function_decl|;
DECL|method|getCurrentRow ()
specifier|protected
name|int
name|getCurrentRow
parameter_list|()
block|{
return|return
name|currentRow
return|;
block|}
DECL|method|movePointerTo (final int newRow)
specifier|protected
name|void
name|movePointerTo
parameter_list|(
specifier|final
name|int
name|newRow
parameter_list|)
block|{
if|if
condition|(
name|newRow
operator|>=
literal|0
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|newRow
argument_list|,
name|C_ARROW
argument_list|,
name|pointer
argument_list|)
expr_stmt|;
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|getElement
argument_list|(
name|newRow
argument_list|,
name|C_ARROW
argument_list|)
operator|.
name|scrollIntoView
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentRow
operator|>=
literal|0
condition|)
block|{
name|table
operator|.
name|setWidget
argument_list|(
name|currentRow
argument_list|,
name|C_ARROW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|currentRow
operator|=
name|newRow
expr_stmt|;
block|}
DECL|method|applyDataRowStyle (final int newRow)
specifier|protected
name|void
name|applyDataRowStyle
parameter_list|(
specifier|final
name|int
name|newRow
parameter_list|)
block|{
name|table
operator|.
name|getCellFormatter
argument_list|()
operator|.
name|addStyleName
argument_list|(
name|newRow
argument_list|,
name|C_ARROW
argument_list|,
name|S_ICON_CELL
argument_list|)
expr_stmt|;
block|}
DECL|method|finishDisplay (final boolean requestFocus)
specifier|public
name|void
name|finishDisplay
parameter_list|(
specifier|final
name|boolean
name|requestFocus
parameter_list|)
block|{
if|if
condition|(
name|saveId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|oldId
init|=
name|savedPositions
operator|.
name|get
argument_list|(
name|saveId
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|max
init|=
name|table
operator|.
name|getRowCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|max
condition|;
name|row
operator|++
control|)
block|{
specifier|final
name|RowItem
name|c
init|=
name|getRowItem
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
operator|&&
name|oldId
operator|.
name|equals
argument_list|(
name|getRowItemKey
argument_list|(
name|c
argument_list|)
argument_list|)
condition|)
block|{
name|movePointerTo
argument_list|(
name|row
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|currentRow
operator|<
literal|0
condition|)
block|{
name|onDown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|requestFocus
operator|&&
name|currentRow
operator|>=
literal|0
condition|)
block|{
name|DeferredCommand
operator|.
name|addCommand
argument_list|(
operator|new
name|Command
argument_list|()
block|{
specifier|public
name|void
name|execute
parameter_list|()
block|{
name|setFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setSavePointerId (final String id)
specifier|public
name|void
name|setSavePointerId
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
block|{
name|saveId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onUnload ()
specifier|public
name|void
name|onUnload
parameter_list|()
block|{
if|if
condition|(
name|saveId
operator|!=
literal|null
operator|&&
name|currentRow
operator|>=
literal|0
condition|)
block|{
specifier|final
name|RowItem
name|c
init|=
name|getRowItem
argument_list|(
name|currentRow
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
block|{
name|savedPositions
operator|.
name|put
argument_list|(
name|saveId
argument_list|,
name|getRowItemKey
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|super
operator|.
name|onUnload
argument_list|()
expr_stmt|;
block|}
DECL|method|getTabIndex ()
specifier|public
name|int
name|getTabIndex
parameter_list|()
block|{
return|return
name|focusy
operator|.
name|getTabIndex
argument_list|()
return|;
block|}
DECL|method|setAccessKey (char key)
specifier|public
name|void
name|setAccessKey
parameter_list|(
name|char
name|key
parameter_list|)
block|{
name|focusy
operator|.
name|setAccessKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
DECL|method|setFocus (boolean focused)
specifier|public
name|void
name|setFocus
parameter_list|(
name|boolean
name|focused
parameter_list|)
block|{
name|focusy
operator|.
name|setFocus
argument_list|(
name|focused
argument_list|)
expr_stmt|;
block|}
DECL|method|setTabIndex (int index)
specifier|public
name|void
name|setTabIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|focusy
operator|.
name|setTabIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|method|addFocusListener (FocusListener listener)
specifier|public
name|void
name|addFocusListener
parameter_list|(
name|FocusListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|addFocusListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|addKeyboardListener (KeyboardListener listener)
specifier|public
name|void
name|addKeyboardListener
parameter_list|(
name|KeyboardListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|addKeyboardListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeFocusListener (FocusListener listener)
specifier|public
name|void
name|removeFocusListener
parameter_list|(
name|FocusListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|removeFocusListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|method|removeKeyboardListener (KeyboardListener listener)
specifier|public
name|void
name|removeKeyboardListener
parameter_list|(
name|KeyboardListener
name|listener
parameter_list|)
block|{
name|focusy
operator|.
name|removeKeyboardListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
DECL|class|MyFlexTable
specifier|protected
specifier|static
class|class
name|MyFlexTable
extends|extends
name|FlexTable
block|{
annotation|@
name|Override
DECL|method|getBodyElement ()
specifier|public
name|Element
name|getBodyElement
parameter_list|()
block|{
return|return
name|super
operator|.
name|getBodyElement
argument_list|()
return|;
block|}
block|}
DECL|method|setRowItem (Element td, ItemType c)
specifier|private
specifier|static
specifier|final
specifier|native
parameter_list|<
name|ItemType
parameter_list|>
name|void
name|setRowItem
parameter_list|(
name|Element
name|td
parameter_list|,
name|ItemType
name|c
parameter_list|)
comment|/*-{ td["__gerritRowItem"] = c; }-*/
function_decl|;
DECL|method|getRowItem (Element td)
specifier|private
specifier|static
specifier|final
specifier|native
parameter_list|<
name|ItemType
parameter_list|>
name|ItemType
name|getRowItem
parameter_list|(
name|Element
name|td
parameter_list|)
comment|/*-{ return td["__gerritRowItem"]; }-*/
function_decl|;
block|}
end_class

end_unit

