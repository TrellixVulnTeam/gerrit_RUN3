begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.ui
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|ui
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|DOM
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|ComplexPanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Composite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosureHandler
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|DisclosurePanel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|FiresDisclosureEvents
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Panel
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|user
operator|.
name|client
operator|.
name|ui
operator|.
name|Widget
import|;
end_import

begin_class
DECL|class|ComplexDisclosurePanel
specifier|public
class|class
name|ComplexDisclosurePanel
extends|extends
name|Composite
implements|implements
name|FiresDisclosureEvents
block|{
DECL|field|main
specifier|private
specifier|final
name|DisclosurePanel
name|main
decl_stmt|;
DECL|field|header
specifier|private
specifier|final
name|Panel
name|header
decl_stmt|;
DECL|method|ComplexDisclosurePanel (final String text, final boolean isOpen)
specifier|public
name|ComplexDisclosurePanel
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|boolean
name|isOpen
parameter_list|)
block|{
comment|// Ick. GWT's DisclosurePanel won't let us subclass it, or do any
comment|// other modification of its header. We're stuck with injecting
comment|// into the DOM directly.
comment|//
name|main
operator|=
operator|new
name|DisclosurePanel
argument_list|(
name|text
argument_list|,
name|isOpen
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|headerParent
decl_stmt|;
block|{
specifier|final
name|Element
name|table
init|=
name|main
operator|.
name|getElement
argument_list|()
decl_stmt|;
specifier|final
name|Element
name|tbody
init|=
name|DOM
operator|.
name|getFirstChild
argument_list|(
name|table
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|tr1
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|tbody
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Element
name|tr2
init|=
name|DOM
operator|.
name|getChild
argument_list|(
name|tbody
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|DOM
operator|.
name|setElementProperty
argument_list|(
name|DOM
operator|.
name|getChild
argument_list|(
name|tr1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"width"
argument_list|,
literal|"20px"
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setElementPropertyInt
argument_list|(
name|DOM
operator|.
name|getChild
argument_list|(
name|tr2
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"colSpan"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|headerParent
operator|=
name|tr1
expr_stmt|;
block|}
name|header
operator|=
operator|new
name|ComplexPanel
argument_list|()
block|{
block|{
name|setElement
argument_list|(
name|DOM
operator|.
name|createTD
argument_list|()
argument_list|)
expr_stmt|;
name|DOM
operator|.
name|setInnerHTML
argument_list|(
name|getElement
argument_list|()
argument_list|,
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|addStyleName
argument_list|(
literal|"complexHeader"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
name|Widget
name|w
parameter_list|)
block|{
name|add
argument_list|(
name|w
argument_list|,
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|initWidget
argument_list|(
operator|new
name|ComplexPanel
argument_list|()
block|{
block|{
specifier|final
name|DisclosurePanel
name|main
init|=
name|ComplexDisclosurePanel
operator|.
name|this
operator|.
name|main
decl_stmt|;
name|setElement
argument_list|(
name|main
operator|.
name|getElement
argument_list|()
argument_list|)
expr_stmt|;
name|getChildren
argument_list|()
operator|.
name|add
argument_list|(
name|main
argument_list|)
expr_stmt|;
name|adopt
parameter_list|(
name|main
parameter_list|)
constructor_decl|;
name|add
parameter_list|(
name|ComplexDisclosurePanel
operator|.
name|this
operator|.
name|header
parameter_list|,
name|headerParent
parameter_list|)
constructor_decl|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getHeader ()
specifier|public
name|Panel
name|getHeader
parameter_list|()
block|{
return|return
name|header
return|;
block|}
DECL|method|setContent (final Widget w)
specifier|public
name|void
name|setContent
parameter_list|(
specifier|final
name|Widget
name|w
parameter_list|)
block|{
name|main
operator|.
name|setContent
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
DECL|method|getContent ()
specifier|public
name|Widget
name|getContent
parameter_list|()
block|{
return|return
name|main
operator|.
name|getContent
argument_list|()
return|;
block|}
DECL|method|addEventHandler (final DisclosureHandler handler)
specifier|public
name|void
name|addEventHandler
parameter_list|(
specifier|final
name|DisclosureHandler
name|handler
parameter_list|)
block|{
name|main
operator|.
name|addEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
DECL|method|removeEventHandler (final DisclosureHandler handler)
specifier|public
name|void
name|removeEventHandler
parameter_list|(
specifier|final
name|DisclosureHandler
name|handler
parameter_list|)
block|{
name|main
operator|.
name|removeEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
comment|/** @return true if the panel's content is visible. */
DECL|method|isOpen ()
specifier|public
name|boolean
name|isOpen
parameter_list|()
block|{
return|return
name|main
operator|.
name|isOpen
argument_list|()
return|;
block|}
comment|/**    * Changes the visible state of this panel's content.    *     * @param isOpen<code>true</code> to open,<code>false</code> to close    */
DECL|method|setOpen (final boolean isOpen)
specifier|public
name|void
name|setOpen
parameter_list|(
specifier|final
name|boolean
name|isOpen
parameter_list|)
block|{
name|main
operator|.
name|setOpen
argument_list|(
name|isOpen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

