begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.reviewdb
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Column
import|;
end_import

begin_comment
comment|/** Compressed file content referenced by a {@link Patch}. */
end_comment

begin_class
DECL|class|DeltaContent
specifier|public
specifier|final
class|class
name|DeltaContent
block|{
DECL|enum|Type
specifier|public
specifier|static
enum|enum
name|Type
block|{
DECL|enumConstant|PATCH
name|PATCH
argument_list|(
literal|'p'
argument_list|)
block|,
DECL|enumConstant|CONTENT
name|CONTENT
argument_list|(
literal|'c'
argument_list|)
block|;
DECL|field|code
specifier|private
specifier|final
name|char
name|code
decl_stmt|;
DECL|method|Type (final char c)
specifier|private
name|Type
parameter_list|(
specifier|final
name|char
name|c
parameter_list|)
block|{
name|code
operator|=
name|c
expr_stmt|;
block|}
DECL|method|getCode ()
specifier|public
name|char
name|getCode
parameter_list|()
block|{
return|return
name|code
return|;
block|}
DECL|method|forCode (final char c)
specifier|public
specifier|static
name|Type
name|forCode
parameter_list|(
specifier|final
name|char
name|c
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Type
name|s
range|:
name|Type
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|code
operator|==
name|c
condition|)
block|{
return|return
name|s
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|Key
specifier|public
specifier|static
class|class
name|Key
implements|implements
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
comment|/** See {@link DeltaContent.Type}. */
annotation|@
name|Column
DECL|field|type
specifier|protected
name|char
name|type
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|length
operator|=
literal|40
argument_list|)
DECL|field|hash
specifier|protected
name|String
name|hash
decl_stmt|;
DECL|method|Key ()
specifier|protected
name|Key
parameter_list|()
block|{     }
DECL|method|Key (final DeltaContent.Type type, final String hash)
specifier|public
name|Key
parameter_list|(
specifier|final
name|DeltaContent
operator|.
name|Type
name|type
parameter_list|,
specifier|final
name|String
name|hash
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
operator|.
name|getCode
argument_list|()
expr_stmt|;
name|this
operator|.
name|hash
operator|=
name|hash
expr_stmt|;
block|}
DECL|method|getParentKey ()
specifier|public
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|Key
argument_list|<
name|?
argument_list|>
name|getParentKey
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode ()
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hash
operator|.
name|hashCode
argument_list|()
operator|+
name|type
return|;
block|}
annotation|@
name|Override
DECL|method|equals (final Object o)
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Key
operator|&&
operator|(
operator|(
name|Key
operator|)
name|o
operator|)
operator|.
name|type
operator|==
name|type
operator|&&
operator|(
operator|(
name|Key
operator|)
name|o
operator|)
operator|.
name|hash
operator|.
name|equals
argument_list|(
name|hash
argument_list|)
return|;
block|}
block|}
annotation|@
name|Column
argument_list|(
name|name
operator|=
literal|"content"
argument_list|)
DECL|field|key
specifier|protected
name|DeltaContent
operator|.
name|Key
name|key
decl_stmt|;
comment|/**    * Depth (how many times you can recurse until {@link #base} is null).    *<p>    * This property determines how {@link #data} is treated.    */
annotation|@
name|Column
DECL|field|chainDepth
specifier|protected
name|short
name|chainDepth
decl_stmt|;
annotation|@
name|Column
argument_list|(
name|notNull
operator|=
literal|false
argument_list|)
DECL|field|base
specifier|protected
name|DeltaContent
operator|.
name|Key
name|base
decl_stmt|;
comment|/**    * Raw compressed binary data; {@link java.util.zip.DeflaterOutputStream}    *<p>    * If {@link #chainDepth} = 0 this field has the full content of the file.    *<p>    * If {@link #chainDepth}&lt; 0 this field has a unified format patch which    * must be applied to the full content of {@link #base} in order to get the    * full content of this object.    */
annotation|@
name|Column
DECL|field|data
specifier|protected
name|byte
index|[]
name|data
decl_stmt|;
DECL|method|DeltaContent ()
specifier|protected
name|DeltaContent
parameter_list|()
block|{   }
DECL|method|DeltaContent (final DeltaContent.Key newKey, final short newDepth, final DeltaContent.Key newBase, final byte[] newData)
specifier|public
name|DeltaContent
parameter_list|(
specifier|final
name|DeltaContent
operator|.
name|Key
name|newKey
parameter_list|,
specifier|final
name|short
name|newDepth
parameter_list|,
specifier|final
name|DeltaContent
operator|.
name|Key
name|newBase
parameter_list|,
specifier|final
name|byte
index|[]
name|newData
parameter_list|)
block|{
name|key
operator|=
name|newKey
expr_stmt|;
name|chainDepth
operator|=
name|newDepth
expr_stmt|;
name|base
operator|=
name|newBase
expr_stmt|;
name|data
operator|=
name|newData
expr_stmt|;
block|}
DECL|method|getKey ()
specifier|public
name|DeltaContent
operator|.
name|Key
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
DECL|method|getType ()
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|forCode
argument_list|(
name|key
operator|.
name|type
argument_list|)
return|;
block|}
DECL|method|getBase ()
specifier|public
name|DeltaContent
operator|.
name|Key
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
DECL|method|getChainDepth ()
specifier|public
name|short
name|getChainDepth
parameter_list|()
block|{
return|return
name|chainDepth
return|;
block|}
comment|/** Get the data array<b>(note this is not a copy!)</b> */
DECL|method|getData ()
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

