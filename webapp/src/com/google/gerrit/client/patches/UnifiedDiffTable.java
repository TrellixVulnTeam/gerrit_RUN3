begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.client.patches
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|patches
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|data
operator|.
name|PatchLine
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|PatchLineComment
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|UnifiedDiffTable
specifier|public
class|class
name|UnifiedDiffTable
extends|extends
name|AbstractPatchContentTable
block|{
DECL|method|display (final List<PatchLine> list)
specifier|public
name|void
name|display
parameter_list|(
specifier|final
name|List
argument_list|<
name|PatchLine
argument_list|>
name|list
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|nc
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|PatchLine
name|pLine
range|:
name|list
control|)
block|{
name|appendLine
argument_list|(
name|nc
argument_list|,
name|pLine
argument_list|)
expr_stmt|;
block|}
name|resetHtml
argument_list|(
name|nc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|PatchLine
name|pLine
range|:
name|list
control|)
block|{
name|setRowItem
argument_list|(
name|row
argument_list|,
name|pLine
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
specifier|final
name|List
argument_list|<
name|PatchLineComment
argument_list|>
name|comments
init|=
name|pLine
operator|.
name|getComments
argument_list|()
decl_stmt|;
if|if
condition|(
name|comments
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|PatchLineComment
argument_list|>
name|ci
init|=
name|comments
operator|.
name|iterator
argument_list|()
init|;
name|ci
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|PatchLineComment
name|c
init|=
name|ci
operator|.
name|next
argument_list|()
decl_stmt|;
name|table
operator|.
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|bindComment
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|c
argument_list|,
operator|!
name|ci
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|appendLine (final StringBuilder nc, final PatchLine line)
specifier|private
name|void
name|appendLine
parameter_list|(
specifier|final
name|StringBuilder
name|nc
parameter_list|,
specifier|final
name|PatchLine
name|line
parameter_list|)
block|{
name|nc
operator|.
name|append
argument_list|(
literal|"<tr>"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
literal|"<td class=\""
operator|+
name|S_ICON_CELL
operator|+
literal|"\">&nbsp;</td>"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
literal|"<td class=\"DiffText DiffText-"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
name|line
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|line
operator|.
name|getText
argument_list|()
argument_list|)
condition|)
name|nc
operator|.
name|append
argument_list|(
name|PatchUtil
operator|.
name|lineToHTML
argument_list|(
name|line
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|nc
operator|.
name|append
argument_list|(
literal|"&nbsp;"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
literal|"</td>"
argument_list|)
expr_stmt|;
name|nc
operator|.
name|append
argument_list|(
literal|"</tr>"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

