begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright 2008 Google Inc.
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.server
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|Gerrit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|reviewdb
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RpcUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|client
operator|.
name|rpc
operator|.
name|RpcUtil
operator|.
name|CurrentAccountImpl
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|ActiveCall
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtjsonrpc
operator|.
name|server
operator|.
name|ValidToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwtorm
operator|.
name|client
operator|.
name|OrmException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_class
DECL|class|GerritCall
specifier|public
class|class
name|GerritCall
extends|extends
name|ActiveCall
block|{
static|static
block|{
name|RpcUtil
operator|.
name|setCurrentAccountImpl
argument_list|(
operator|new
name|CurrentAccountImpl
argument_list|()
block|{
specifier|public
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
specifier|final
name|GerritCall
name|c
init|=
name|GerritJsonServlet
operator|.
name|getCurrentCall
argument_list|()
decl_stmt|;
return|return
name|c
operator|!=
literal|null
condition|?
name|c
operator|.
name|getAccountId
argument_list|()
else|:
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|field|server
specifier|private
specifier|final
name|GerritServer
name|server
decl_stmt|;
DECL|field|accountRead
specifier|private
name|boolean
name|accountRead
decl_stmt|;
DECL|field|accountInfo
specifier|private
name|ValidToken
name|accountInfo
decl_stmt|;
DECL|field|accountId
specifier|private
name|Account
operator|.
name|Id
name|accountId
decl_stmt|;
DECL|method|GerritCall (final GerritServer gs, final HttpServletRequest i, final HttpServletResponse o)
specifier|public
name|GerritCall
parameter_list|(
specifier|final
name|GerritServer
name|gs
parameter_list|,
specifier|final
name|HttpServletRequest
name|i
parameter_list|,
specifier|final
name|HttpServletResponse
name|o
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|,
name|o
argument_list|)
expr_stmt|;
name|server
operator|=
name|gs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onFailure (final Throwable error)
specifier|public
name|void
name|onFailure
parameter_list|(
specifier|final
name|Throwable
name|error
parameter_list|)
block|{
if|if
condition|(
name|error
operator|instanceof
name|OrmException
condition|)
block|{
name|onInternalFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|onFailure
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getUser ()
specifier|public
name|String
name|getUser
parameter_list|()
block|{
name|initAccount
argument_list|()
expr_stmt|;
return|return
name|accountInfo
operator|!=
literal|null
condition|?
name|accountInfo
operator|.
name|getData
argument_list|()
else|:
literal|null
return|;
block|}
DECL|method|getAccountId ()
specifier|public
name|Account
operator|.
name|Id
name|getAccountId
parameter_list|()
block|{
name|initAccount
argument_list|()
expr_stmt|;
return|return
name|accountId
return|;
block|}
DECL|method|initAccount ()
specifier|private
name|void
name|initAccount
parameter_list|()
block|{
if|if
condition|(
name|accountRead
condition|)
block|{
return|return;
block|}
name|accountRead
operator|=
literal|true
expr_stmt|;
name|accountInfo
operator|=
name|getCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|,
name|server
operator|.
name|getAccountToken
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|accountInfo
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|getCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// The cookie is bogus, but it was sent. Send an expired cookie
comment|// back to clear it out of the browser's cookie store.
comment|//
name|removeCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
try|try
block|{
name|accountId
operator|=
operator|new
name|Account
operator|.
name|Id
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|accountInfo
operator|.
name|getData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// Whoa, did we change our cookie format or something? This should
comment|// never happen on a valid acocunt token, but discard it anyway.
comment|//
name|removeCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|)
expr_stmt|;
name|accountInfo
operator|=
literal|null
expr_stmt|;
name|accountId
operator|=
literal|null
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|accountInfo
operator|.
name|needsRefresh
argument_list|()
condition|)
block|{
comment|// The cookie is valid, but its getting stale. Update it with a
comment|// newer date so it doesn't expire on an active user.
comment|//
specifier|final
name|String
name|idstr
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|accountId
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
name|setCookie
argument_list|(
name|Gerrit
operator|.
name|ACCOUNT_COOKIE
argument_list|,
name|idstr
argument_list|,
name|server
operator|.
name|getAccountToken
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

