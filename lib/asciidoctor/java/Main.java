begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2013 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|Asciidoctor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|AttributesBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|OptionsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|internal
operator|.
name|JRubyAsciidoctor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|CmdLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|kohsuke
operator|.
name|args4j
operator|.
name|Option
import|;
end_import

begin_class
DECL|class|Main
specifier|public
class|class
name|Main
block|{
DECL|field|BUFSIZ
specifier|private
specifier|static
specifier|final
name|int
name|BUFSIZ
init|=
literal|4096
decl_stmt|;
DECL|field|DOCTYPE
specifier|private
specifier|static
specifier|final
name|String
name|DOCTYPE
init|=
literal|"article"
decl_stmt|;
DECL|field|ERUBY
specifier|private
specifier|static
specifier|final
name|String
name|ERUBY
init|=
literal|"erb"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-b"
argument_list|,
name|usage
operator|=
literal|"set output format backend"
argument_list|)
DECL|field|backend
specifier|private
name|String
name|backend
init|=
literal|"html5"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-z"
argument_list|,
name|usage
operator|=
literal|"output zip file"
argument_list|)
DECL|field|zipFile
specifier|private
name|String
name|zipFile
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--in-ext"
argument_list|,
name|usage
operator|=
literal|"extension for input files"
argument_list|)
DECL|field|inExt
specifier|private
name|String
name|inExt
init|=
literal|".txt"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"--out-ext"
argument_list|,
name|usage
operator|=
literal|"extension for output files"
argument_list|)
DECL|field|outExt
specifier|private
name|String
name|outExt
init|=
literal|".html"
decl_stmt|;
annotation|@
name|Option
argument_list|(
name|name
operator|=
literal|"-a"
argument_list|,
name|usage
operator|=
literal|"a list of attributes, in the form key or key=value pair"
argument_list|)
DECL|field|attributes
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|attributes
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Argument
argument_list|(
name|usage
operator|=
literal|"input files"
argument_list|)
DECL|field|inputFiles
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|inputFiles
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|mapInFileToOutFile (String inFile)
specifier|private
name|String
name|mapInFileToOutFile
parameter_list|(
name|String
name|inFile
parameter_list|)
block|{
name|String
name|basename
init|=
operator|new
name|File
argument_list|(
name|inFile
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|basename
operator|.
name|endsWith
argument_list|(
name|inExt
argument_list|)
condition|)
block|{
name|basename
operator|=
name|basename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|basename
operator|.
name|length
argument_list|()
operator|-
name|inExt
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Strip out the last extension
name|int
name|pos
init|=
name|basename
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
block|{
name|basename
operator|=
name|basename
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|basename
operator|+
name|outExt
return|;
block|}
DECL|method|createOptions (File tmpFile)
specifier|private
name|Options
name|createOptions
parameter_list|(
name|File
name|tmpFile
parameter_list|)
block|{
name|OptionsBuilder
name|optionsBuilder
init|=
name|OptionsBuilder
operator|.
name|options
argument_list|()
decl_stmt|;
name|optionsBuilder
operator|.
name|backend
argument_list|(
name|backend
argument_list|)
operator|.
name|docType
argument_list|(
name|DOCTYPE
argument_list|)
operator|.
name|eruby
argument_list|(
name|ERUBY
argument_list|)
expr_stmt|;
comment|// XXX(fishywang): ideally we should just output to a string and add the
comment|// content into zip. But asciidoctor will actually ignore all attributes if
comment|// not output to a file. So we *have* to output to a file then read the
comment|// content of the file into zip.
name|optionsBuilder
operator|.
name|toFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|AttributesBuilder
name|attributesBuilder
init|=
name|AttributesBuilder
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|attributesBuilder
operator|.
name|attributes
argument_list|(
name|getAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|optionsBuilder
operator|.
name|attributes
argument_list|(
name|attributesBuilder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|optionsBuilder
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getAttributes ()
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getAttributes
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributeValues
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|attribute
range|:
name|attributes
control|)
block|{
name|int
name|equalsIndex
init|=
name|attribute
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
decl_stmt|;
if|if
condition|(
name|equalsIndex
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|name
init|=
name|attribute
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|equalsIndex
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|attribute
operator|.
name|substring
argument_list|(
name|equalsIndex
operator|+
literal|1
argument_list|,
name|attribute
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|attributeValues
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributeValues
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|attributeValues
return|;
block|}
DECL|method|invoke (String... parameters)
specifier|private
name|void
name|invoke
parameter_list|(
name|String
modifier|...
name|parameters
parameter_list|)
throws|throws
name|IOException
block|{
name|CmdLineParser
name|parser
init|=
operator|new
name|CmdLineParser
argument_list|(
name|this
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parseArgument
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|CmdLineException
argument_list|(
name|parser
argument_list|,
literal|"asciidoctor: FAILED: input file missing"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CmdLineException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|printUsage
argument_list|(
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|ZipOutputStream
name|zip
init|=
operator|new
name|ZipOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|zipFile
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|BUFSIZ
index|]
decl_stmt|;
for|for
control|(
name|String
name|inputFile
range|:
name|inputFiles
control|)
block|{
name|File
name|tmp
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"doc"
argument_list|,
literal|".html"
argument_list|)
decl_stmt|;
name|Options
name|options
init|=
name|createOptions
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|renderInput
argument_list|(
name|options
argument_list|,
name|inputFile
argument_list|)
expr_stmt|;
name|FileInputStream
name|input
init|=
operator|new
name|FileInputStream
argument_list|(
name|tmp
argument_list|)
decl_stmt|;
name|int
name|len
decl_stmt|;
name|zip
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|mapInFileToOutFile
argument_list|(
name|inputFile
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|input
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|zip
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|input
operator|.
name|close
argument_list|()
expr_stmt|;
name|tmp
operator|.
name|delete
argument_list|()
expr_stmt|;
name|zip
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
name|zip
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|renderInput (Options options, String inputFile)
specifier|private
name|void
name|renderInput
parameter_list|(
name|Options
name|options
parameter_list|,
name|String
name|inputFile
parameter_list|)
block|{
name|Asciidoctor
name|asciidoctor
init|=
name|JRubyAsciidoctor
operator|.
name|create
argument_list|()
decl_stmt|;
name|asciidoctor
operator|.
name|renderFile
argument_list|(
operator|new
name|File
argument_list|(
name|inputFile
argument_list|)
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
DECL|method|main (String[] args)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
operator|new
name|Main
argument_list|()
operator|.
name|invoke
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

