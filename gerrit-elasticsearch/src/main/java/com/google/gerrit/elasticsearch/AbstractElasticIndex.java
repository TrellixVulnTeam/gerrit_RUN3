begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.elasticsearch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|MoreObjects
operator|.
name|firstNonNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentFactory
operator|.
name|jsonBuilder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|GerritServerConfig
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|config
operator|.
name|SitePaths
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldDef
operator|.
name|FillArgs
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|IndexUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Schema
operator|.
name|Values
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jgit
operator|.
name|lib
operator|.
name|Config
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|common
operator|.
name|xcontent
operator|.
name|XContentBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|client
operator|.
name|JestClientFactory
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|client
operator|.
name|JestResult
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|client
operator|.
name|config
operator|.
name|HttpClientConfig
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|client
operator|.
name|http
operator|.
name|JestHttpClient
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|core
operator|.
name|Bulk
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|core
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|indices
operator|.
name|CreateIndex
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|indices
operator|.
name|DeleteIndex
import|;
end_import

begin_import
import|import
name|io
operator|.
name|searchbox
operator|.
name|indices
operator|.
name|IndicesExists
import|;
end_import

begin_class
DECL|class|AbstractElasticIndex
specifier|abstract
class|class
name|AbstractElasticIndex
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Index
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
block|{
DECL|field|DEFAULT_INDEX_NAME
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_INDEX_NAME
init|=
literal|"gerrit"
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
decl_stmt|;
DECL|field|fillArgs
specifier|private
specifier|final
name|FillArgs
name|fillArgs
decl_stmt|;
DECL|field|sitePaths
specifier|private
specifier|final
name|SitePaths
name|sitePaths
decl_stmt|;
DECL|field|refresh
specifier|protected
specifier|final
name|boolean
name|refresh
decl_stmt|;
DECL|field|indexName
specifier|protected
specifier|final
name|String
name|indexName
decl_stmt|;
DECL|field|client
specifier|protected
specifier|final
name|JestHttpClient
name|client
decl_stmt|;
DECL|method|AbstractElasticIndex (@erritServerConfig Config cfg, FillArgs fillArgs, SitePaths sitePaths, Schema<V> schema)
name|AbstractElasticIndex
parameter_list|(
annotation|@
name|GerritServerConfig
name|Config
name|cfg
parameter_list|,
name|FillArgs
name|fillArgs
parameter_list|,
name|SitePaths
name|sitePaths
parameter_list|,
name|Schema
argument_list|<
name|V
argument_list|>
name|schema
parameter_list|)
block|{
name|this
operator|.
name|fillArgs
operator|=
name|fillArgs
expr_stmt|;
name|this
operator|.
name|sitePaths
operator|=
name|sitePaths
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|String
name|protocol
init|=
name|getRequiredConfigOption
argument_list|(
name|cfg
argument_list|,
literal|"protocol"
argument_list|)
decl_stmt|;
name|String
name|hostname
init|=
name|getRequiredConfigOption
argument_list|(
name|cfg
argument_list|,
literal|"hostname"
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|getRequiredConfigOption
argument_list|(
name|cfg
argument_list|,
literal|"port"
argument_list|)
decl_stmt|;
name|this
operator|.
name|indexName
operator|=
name|firstNonNull
argument_list|(
name|cfg
operator|.
name|getString
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
literal|"name"
argument_list|)
argument_list|,
name|DEFAULT_INDEX_NAME
argument_list|)
expr_stmt|;
comment|// By default Elasticsearch has a 1s delay before changes are available in
comment|// the index.  Setting refresh(true) on calls to the index makes the index
comment|// refresh immediately.
comment|//
comment|// Discovery should be disabled during test mode to prevent spurious
comment|// connection failures caused by the client starting up and being ready
comment|// before the test node.
comment|//
comment|// This setting should only be set to true during testing, and is not
comment|// documented.
name|this
operator|.
name|refresh
operator|=
name|cfg
operator|.
name|getBoolean
argument_list|(
literal|"index"
argument_list|,
literal|"elasticsearch"
argument_list|,
literal|"test"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|buildUrl
argument_list|(
name|protocol
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|JestClientFactory
name|factory
init|=
operator|new
name|JestClientFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setHttpClientConfig
argument_list|(
operator|new
name|HttpClientConfig
operator|.
name|Builder
argument_list|(
name|url
argument_list|)
operator|.
name|multiThreaded
argument_list|(
literal|true
argument_list|)
operator|.
name|discoveryEnabled
argument_list|(
operator|!
name|refresh
argument_list|)
operator|.
name|discoveryFrequency
argument_list|(
literal|1L
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
operator|(
name|JestHttpClient
operator|)
name|factory
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSchema ()
specifier|public
name|Schema
argument_list|<
name|V
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|schema
return|;
block|}
annotation|@
name|Override
DECL|method|close ()
specifier|public
name|void
name|close
parameter_list|()
block|{
name|client
operator|.
name|shutdownClient
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|markReady (boolean ready)
specifier|public
name|void
name|markReady
parameter_list|(
name|boolean
name|ready
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexUtils
operator|.
name|setReady
argument_list|(
name|sitePaths
argument_list|,
name|indexName
argument_list|,
name|schema
operator|.
name|getVersion
argument_list|()
argument_list|,
name|ready
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|delete (K c)
specifier|public
name|void
name|delete
parameter_list|(
name|K
name|c
parameter_list|)
throws|throws
name|IOException
block|{
name|Bulk
name|bulk
init|=
name|addActions
argument_list|(
operator|new
name|Bulk
operator|.
name|Builder
argument_list|()
argument_list|,
name|c
argument_list|)
operator|.
name|refresh
argument_list|(
name|refresh
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|JestResult
name|result
init|=
name|client
operator|.
name|execute
argument_list|(
name|bulk
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isSucceeded
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to delete change %s in index %s: %s"
argument_list|,
name|c
argument_list|,
name|indexName
argument_list|,
name|result
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|deleteAll ()
specifier|public
name|void
name|deleteAll
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Delete the index, if it exists.
name|JestResult
name|result
init|=
name|client
operator|.
name|execute
argument_list|(
operator|new
name|IndicesExists
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isSucceeded
argument_list|()
condition|)
block|{
name|result
operator|=
name|client
operator|.
name|execute
argument_list|(
operator|new
name|DeleteIndex
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isSucceeded
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Failed to delete index %s: %s"
argument_list|,
name|indexName
argument_list|,
name|result
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// Recreate the index.
name|result
operator|=
name|client
operator|.
name|execute
argument_list|(
operator|new
name|CreateIndex
operator|.
name|Builder
argument_list|(
name|indexName
argument_list|)
operator|.
name|settings
argument_list|(
name|getMappings
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isSucceeded
argument_list|()
condition|)
block|{
name|String
name|error
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Failed to create index %s: %s"
argument_list|,
name|indexName
argument_list|,
name|result
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|error
argument_list|)
throw|;
block|}
block|}
DECL|method|addActions (Bulk.Builder builder, K c)
specifier|protected
specifier|abstract
name|Bulk
operator|.
name|Builder
name|addActions
parameter_list|(
name|Bulk
operator|.
name|Builder
name|builder
parameter_list|,
name|K
name|c
parameter_list|)
function_decl|;
DECL|method|getMappings ()
specifier|protected
specifier|abstract
name|String
name|getMappings
parameter_list|()
function_decl|;
DECL|method|getId (V v)
specifier|protected
specifier|abstract
name|String
name|getId
parameter_list|(
name|V
name|v
parameter_list|)
function_decl|;
DECL|method|delete (String type, K c)
specifier|protected
name|Delete
name|delete
parameter_list|(
name|String
name|type
parameter_list|,
name|K
name|c
parameter_list|)
block|{
name|String
name|id
init|=
name|c
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|Delete
operator|.
name|Builder
argument_list|(
name|id
argument_list|)
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|insert (String type, V v)
specifier|protected
name|io
operator|.
name|searchbox
operator|.
name|core
operator|.
name|Index
name|insert
parameter_list|(
name|String
name|type
parameter_list|,
name|V
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|getId
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|String
name|doc
init|=
name|toDoc
argument_list|(
name|v
argument_list|)
decl_stmt|;
return|return
operator|new
name|io
operator|.
name|searchbox
operator|.
name|core
operator|.
name|Index
operator|.
name|Builder
argument_list|(
name|doc
argument_list|)
operator|.
name|index
argument_list|(
name|indexName
argument_list|)
operator|.
name|type
argument_list|(
name|type
argument_list|)
operator|.
name|id
argument_list|(
name|id
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|toDoc (V v)
specifier|private
name|String
name|toDoc
parameter_list|(
name|V
name|v
parameter_list|)
throws|throws
name|IOException
block|{
name|XContentBuilder
name|builder
init|=
name|jsonBuilder
argument_list|()
operator|.
name|startObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Values
argument_list|<
name|V
argument_list|>
name|values
range|:
name|schema
operator|.
name|buildFields
argument_list|(
name|v
argument_list|,
name|fillArgs
argument_list|)
control|)
block|{
name|String
name|name
init|=
name|values
operator|.
name|getField
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|getField
argument_list|()
operator|.
name|isRepeatable
argument_list|()
condition|)
block|{
name|builder
operator|.
name|array
argument_list|(
name|name
argument_list|,
name|values
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|element
init|=
name|Iterables
operator|.
name|getOnlyElement
argument_list|(
name|values
operator|.
name|getValues
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|element
operator|instanceof
name|String
operator|)
operator|||
operator|!
operator|(
operator|(
name|String
operator|)
name|element
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|field
argument_list|(
name|name
argument_list|,
name|element
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|endObject
argument_list|()
operator|.
name|string
argument_list|()
return|;
block|}
DECL|method|getRequiredConfigOption (Config cfg, String name)
specifier|private
name|String
name|getRequiredConfigOption
parameter_list|(
name|Config
name|cfg
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|option
init|=
name|cfg
operator|.
name|getString
argument_list|(
literal|"index"
argument_list|,
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|option
argument_list|)
argument_list|,
literal|"index."
operator|+
name|name
operator|+
literal|" must be supplied"
argument_list|)
expr_stmt|;
return|return
name|option
return|;
block|}
DECL|method|buildUrl (String protocol, String hostname, String port)
specifier|private
name|String
name|buildUrl
parameter_list|(
name|String
name|protocol
parameter_list|,
name|String
name|hostname
parameter_list|,
name|String
name|port
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|URL
argument_list|(
name|protocol
argument_list|,
name|hostname
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|port
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
decl||
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot build url to Elasticsearch from values: protocol="
operator|+
name|protocol
operator|+
literal|" hostname="
operator|+
name|hostname
operator|+
literal|" port="
operator|+
name|port
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

