begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2016 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.elasticsearch
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|elasticsearch
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldDef
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|server
operator|.
name|index
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ElasticMapping
class|class
name|ElasticMapping
block|{
DECL|method|createMapping (Schema<?> schema)
specifier|static
name|MappingProperties
name|createMapping
parameter_list|(
name|Schema
argument_list|<
name|?
argument_list|>
name|schema
parameter_list|)
block|{
name|ElasticMapping
operator|.
name|Builder
name|mapping
init|=
operator|new
name|ElasticMapping
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldDef
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|field
range|:
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|FieldType
argument_list|<
name|?
argument_list|>
name|fieldType
init|=
name|field
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
name|FieldType
operator|.
name|EXACT
condition|)
block|{
name|mapping
operator|.
name|addExactField
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|==
name|FieldType
operator|.
name|TIMESTAMP
condition|)
block|{
name|mapping
operator|.
name|addTimestamp
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|==
name|FieldType
operator|.
name|INTEGER
operator|||
name|fieldType
operator|==
name|FieldType
operator|.
name|INTEGER_RANGE
operator|||
name|fieldType
operator|==
name|FieldType
operator|.
name|LONG
condition|)
block|{
name|mapping
operator|.
name|addNumber
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldType
operator|==
name|FieldType
operator|.
name|PREFIX
operator|||
name|fieldType
operator|==
name|FieldType
operator|.
name|FULL_TEXT
operator|||
name|fieldType
operator|==
name|FieldType
operator|.
name|STORED_ONLY
condition|)
block|{
name|mapping
operator|.
name|addString
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unsupported field type: "
operator|+
name|fieldType
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|mapping
operator|.
name|build
argument_list|()
return|;
block|}
DECL|class|Builder
specifier|static
class|class
name|Builder
block|{
DECL|field|fields
specifier|private
specifier|final
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|FieldProperties
argument_list|>
name|fields
init|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|build ()
name|MappingProperties
name|build
parameter_list|()
block|{
name|MappingProperties
name|properties
init|=
operator|new
name|MappingProperties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|properties
operator|=
name|fields
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|properties
return|;
block|}
DECL|method|addExactField (String name)
name|Builder
name|addExactField
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldProperties
name|key
init|=
operator|new
name|FieldProperties
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|key
operator|.
name|index
operator|=
literal|"not_analyzed"
expr_stmt|;
name|FieldProperties
name|properties
init|=
operator|new
name|FieldProperties
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
name|properties
operator|.
name|fields
operator|=
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"key"
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addTimestamp (String name)
name|Builder
name|addTimestamp
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|FieldProperties
name|properties
init|=
operator|new
name|FieldProperties
argument_list|(
literal|"date"
argument_list|)
decl_stmt|;
name|properties
operator|.
name|type
operator|=
literal|"date"
expr_stmt|;
name|properties
operator|.
name|format
operator|=
literal|"dateOptionalTime"
expr_stmt|;
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|properties
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addNumber (String name)
name|Builder
name|addNumber
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|FieldProperties
argument_list|(
literal|"long"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|addString (String name)
name|Builder
name|addString
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|FieldProperties
argument_list|(
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|add (String name, String type)
name|Builder
name|add
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
block|{
name|fields
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|FieldProperties
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
DECL|class|MappingProperties
specifier|static
class|class
name|MappingProperties
block|{
DECL|field|properties
name|Map
argument_list|<
name|String
argument_list|,
name|FieldProperties
argument_list|>
name|properties
decl_stmt|;
block|}
DECL|class|FieldProperties
specifier|static
class|class
name|FieldProperties
block|{
DECL|field|type
name|String
name|type
decl_stmt|;
DECL|field|index
name|String
name|index
decl_stmt|;
DECL|field|format
name|String
name|format
decl_stmt|;
DECL|field|fields
name|Map
argument_list|<
name|String
argument_list|,
name|FieldProperties
argument_list|>
name|fields
decl_stmt|;
DECL|method|FieldProperties (String type)
name|FieldProperties
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

