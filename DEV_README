Gerrit 2 - Developer Notes
--------------------------

You will need to have the GWT (Google Web Toolkit) SDK installed on
your system.  A Java 5 or later SDK is also required to run GWT's
compiler and runtime.

To create a new client workspace:

  mkdir gerrit2
  cd gerrit2
  repo init \
    -u git://android.git.kernel.org/tools/manifest.git \
    -b gerrit2

  echo 'GWT_SDK = path/to/your/gwt' >gwtjsonrpc/config.mak
  echo 'GWT_SDK = path/to/your/gwt' >gerrit/config.mak


Setting up Eclipse
------------------

Bootstrap the build by compiling the libraries:

  make -C gerrit web-lib

Setup the "GWT" user library (see gerrit/README_ECLIPSE).

Import the 'Gerrit-webapp' project from "gerrit/webapp/".


Debugging the Application
-------------------------

From Eclipse:

  Use the "Gerrit-webapp" launch profile.

From the command line:

  make -C gerrit web-shell


Client-Server RPC
-----------------

The client-server RPC implementation is gwtjsonrpc, not the stock RPC
system that comes with GWT.  This buys us automatic XSRF protection.
It also makes all of the messages readable and writable by any JSON
implementation, facilitating "mashups" and 3rd party clients.

The programming API is virtually identical (you just need to extend
RemoteJsonService instead of RemoteService).


Why GWT?
--------

We like it.  Plus we can write Java code once and run it both in
the browser and on the server side.  This will be very useful as
we implement offline support in Gerrit.


Feature Roadmap
---------------

* Everything Gerrit does today.

  This list is long so I'm not listing it all here.

* Offline Support

  Initially we will use Google Gears, but HTML 5 will include
  standardized offline application support that we should make
  use of.  With GWT we can target both.  The plan is to initially
  target Google Gears, and add HTML 5 support once Gerrit 2 is
  mostly functional and/if at least one major browser supports it.

* Arbitrary SQL Database

  Gerrit 2 should support any standard SQL database, including
  popular open source (PostgreSQL, MySQL, SQLite) and pure Java
  implementations (H2).  Some commerical servers may wind up being
  supported, but only by virtue of Gerrit 2 sticking to a very small,
  commonly implemented subset of SQL.
