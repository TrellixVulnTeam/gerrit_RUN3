begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|// Copyright (C) 2014 The Android Open Source Project
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Licensed under the Apache License, Version 2.0 (the "License");
end_comment

begin_comment
comment|// you may not use this file except in compliance with the License.
end_comment

begin_comment
comment|// You may obtain a copy of the License at
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// http://www.apache.org/licenses/LICENSE-2.0
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// Unless required by applicable law or agreed to in writing, software
end_comment

begin_comment
comment|// distributed under the License is distributed on an "AS IS" BASIS,
end_comment

begin_comment
comment|// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
end_comment

begin_comment
comment|// See the License for the specific language governing permissions and
end_comment

begin_comment
comment|// limitations under the License.
end_comment

begin_package
DECL|package|com.google.gerrit.gwtdebug
package|package
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|gwtdebug
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gerrit
operator|.
name|pgm
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|codeserver
operator|.
name|CodeServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|codeserver
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
DECL|class|GerritSDMLauncher
class|class
name|GerritSDMLauncher
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GerritSDMLauncher
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|main (String[] argv)
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
throws|throws
name|Exception
block|{
name|GerritSDMLauncher
name|launcher
init|=
operator|new
name|GerritSDMLauncher
argument_list|()
decl_stmt|;
name|launcher
operator|.
name|mainImpl
argument_list|(
name|argv
argument_list|)
expr_stmt|;
block|}
DECL|method|mainImpl (String[] argv)
specifier|private
name|int
name|mainImpl
parameter_list|(
name|String
index|[]
name|argv
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|sdmLauncherOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|daemonLauncherOptions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Separator between Daemon and Codeserver parameters is "--"
name|boolean
name|daemonArgumentSeparator
init|=
literal|false
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|argv
index|[
name|i
index|]
operator|.
name|equals
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
name|sdmLauncherOptions
operator|.
name|add
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|daemonArgumentSeparator
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|daemonArgumentSeparator
condition|)
block|{
operator|++
name|i
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|argv
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|daemonLauncherOptions
operator|.
name|add
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|parseArgs
argument_list|(
name|sdmLauncherOptions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|sdmLauncherOptions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to parse codeserver arguments"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|CodeServer
operator|.
name|main
argument_list|(
name|options
argument_list|)
expr_stmt|;
try|try
block|{
name|int
name|r
init|=
operator|new
name|Daemon
argument_list|()
operator|.
name|main
argument_list|(
name|daemonLauncherOptions
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|daemonLauncherOptions
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Daemon exited with return code: "
operator|+
name|r
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cannot start daemon"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

