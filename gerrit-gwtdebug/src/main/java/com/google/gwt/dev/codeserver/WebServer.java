begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2011 Google Inc.  *  * Licensed under the Apache License, Version 2.0 (the "License"); you may not  * use this file except in compliance with the License. You may obtain a copy of  * the License at  *  * http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the  * License for the specific language governing permissions and limitations under  * the License.  */
end_comment

begin_package
DECL|package|com.google.gwt.dev.codeserver
package|package
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|codeserver
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|TreeLogger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|TreeLogger
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|core
operator|.
name|ext
operator|.
name|UnableToCompleteException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|codeserver
operator|.
name|CompileDir
operator|.
name|PolicyFile
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|codeserver
operator|.
name|Pages
operator|.
name|ErrorPage
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|gwt
operator|.
name|dev
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|http
operator|.
name|MimeTypes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|HttpConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Server
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|ServerConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletContextHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlets
operator|.
name|GzipFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_comment
comment|/**  * The web server for Super Dev Mode, also known as the code server. The URLs handled include:  *<ul>  *<li>HTML pages for the front page and module pages</li>  *<li>JavaScript that implementing the bookmarklets</li>  *<li>The web API for recompiling a GWT app</li>  *<li>The output files and log files from the GWT compiler</li>  *<li>Java source code (for source-level debugging)</li>  *</ul>  *  *<p>EXPERIMENTAL. There is no authentication, encryption, or XSS protection, so this server is  * only safe to run on localhost.</p>  */
end_comment

begin_comment
comment|// This file was copied from GWT project and adjusted to run against
end_comment

begin_comment
comment|// Jetty 9.2.2. The original diff can be found here:
end_comment

begin_comment
comment|// https://gwt-review.googlesource.com/#/c/7857/13/dev/codeserver/java/com/google/gwt/dev/codeserver/WebServer.java
end_comment

begin_class
DECL|class|WebServer
specifier|public
class|class
name|WebServer
block|{
DECL|field|SAFE_DIRECTORY
specifier|private
specifier|static
specifier|final
name|Pattern
name|SAFE_DIRECTORY
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-zA-Z0-9_-]+\\.)*[a-zA-Z0-9_-]+"
argument_list|)
decl_stmt|;
comment|// no extension needed
DECL|field|SAFE_FILENAME
specifier|private
specifier|static
specifier|final
name|Pattern
name|SAFE_FILENAME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([a-zA-Z0-9_-]+\\.)+[a-zA-Z0-9_-]+"
argument_list|)
decl_stmt|;
comment|// an extension is required
DECL|field|SAFE_MODULE_PATH
specifier|private
specifier|static
specifier|final
name|Pattern
name|SAFE_MODULE_PATH
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/("
operator|+
name|SAFE_DIRECTORY
operator|+
literal|")/$"
argument_list|)
decl_stmt|;
DECL|field|SAFE_DIRECTORY_PATH
specifier|static
specifier|final
name|Pattern
name|SAFE_DIRECTORY_PATH
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/("
operator|+
name|SAFE_DIRECTORY
operator|+
literal|"/)+$"
argument_list|)
decl_stmt|;
comment|/* visible for testing */
DECL|field|SAFE_FILE_PATH
specifier|static
specifier|final
name|Pattern
name|SAFE_FILE_PATH
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/("
operator|+
name|SAFE_DIRECTORY
operator|+
literal|"/)+"
operator|+
name|SAFE_FILENAME
operator|+
literal|"$"
argument_list|)
decl_stmt|;
DECL|field|STRONG_NAME
specifier|static
specifier|final
name|Pattern
name|STRONG_NAME
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[\\dA-F]{32}"
argument_list|)
decl_stmt|;
DECL|field|CACHE_JS_FILE
specifier|private
specifier|static
specifier|final
name|Pattern
name|CACHE_JS_FILE
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"/("
operator|+
name|STRONG_NAME
operator|+
literal|").cache.js$"
argument_list|)
decl_stmt|;
DECL|field|MIME_TYPES
specifier|private
specifier|static
specifier|final
name|MimeTypes
name|MIME_TYPES
init|=
operator|new
name|MimeTypes
argument_list|()
decl_stmt|;
DECL|field|TIME_IN_THE_PAST
specifier|private
specifier|static
specifier|final
name|String
name|TIME_IN_THE_PAST
init|=
literal|"Mon, 01 Jan 1990 00:00:00 GMT"
decl_stmt|;
DECL|field|handler
specifier|private
specifier|final
name|SourceHandler
name|handler
decl_stmt|;
DECL|field|jsonExporter
specifier|private
specifier|final
name|JsonExporter
name|jsonExporter
decl_stmt|;
DECL|field|outboxes
specifier|private
specifier|final
name|OutboxTable
name|outboxes
decl_stmt|;
DECL|field|runner
specifier|private
specifier|final
name|JobRunner
name|runner
decl_stmt|;
DECL|field|eventTable
specifier|private
specifier|final
name|JobEventTable
name|eventTable
decl_stmt|;
DECL|field|bindAddress
specifier|private
specifier|final
name|String
name|bindAddress
decl_stmt|;
DECL|field|port
specifier|private
specifier|final
name|int
name|port
decl_stmt|;
DECL|field|server
specifier|private
name|Server
name|server
decl_stmt|;
DECL|method|WebServer (SourceHandler handler, JsonExporter jsonExporter, OutboxTable outboxes, JobRunner runner, JobEventTable eventTable, String bindAddress, int port)
name|WebServer
parameter_list|(
name|SourceHandler
name|handler
parameter_list|,
name|JsonExporter
name|jsonExporter
parameter_list|,
name|OutboxTable
name|outboxes
parameter_list|,
name|JobRunner
name|runner
parameter_list|,
name|JobEventTable
name|eventTable
parameter_list|,
name|String
name|bindAddress
parameter_list|,
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|jsonExporter
operator|=
name|jsonExporter
expr_stmt|;
name|this
operator|.
name|outboxes
operator|=
name|outboxes
expr_stmt|;
name|this
operator|.
name|runner
operator|=
name|runner
expr_stmt|;
name|this
operator|.
name|eventTable
operator|=
name|eventTable
expr_stmt|;
name|this
operator|.
name|bindAddress
operator|=
name|bindAddress
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|method|start (final TreeLogger logger)
name|void
name|start
parameter_list|(
specifier|final
name|TreeLogger
name|logger
parameter_list|)
throws|throws
name|UnableToCompleteException
block|{
name|Server
name|newServer
init|=
operator|new
name|Server
argument_list|()
decl_stmt|;
name|ServerConnector
name|connector
init|=
operator|new
name|ServerConnector
argument_list|(
name|newServer
argument_list|)
decl_stmt|;
name|connector
operator|.
name|setHost
argument_list|(
name|bindAddress
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setReuseAddress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connector
operator|.
name|setSoLingerTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|newServer
operator|.
name|addConnector
argument_list|(
name|connector
argument_list|)
expr_stmt|;
name|ServletContextHandler
name|newHandler
init|=
operator|new
name|ServletContextHandler
argument_list|(
name|ServletContextHandler
operator|.
name|SESSIONS
argument_list|)
decl_stmt|;
name|newHandler
operator|.
name|setContextPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|newHandler
operator|.
name|addServlet
argument_list|(
operator|new
name|ServletHolder
argument_list|(
operator|new
name|HttpServlet
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|handleRequest
argument_list|(
name|request
operator|.
name|getPathInfo
argument_list|()
argument_list|,
name|request
argument_list|,
name|response
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
argument_list|,
literal|"/*"
argument_list|)
expr_stmt|;
name|newHandler
operator|.
name|addFilter
argument_list|(
name|GzipFilter
operator|.
name|class
argument_list|,
literal|"/*"
argument_list|,
name|EnumSet
operator|.
name|allOf
argument_list|(
name|DispatcherType
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|newServer
operator|.
name|setHandler
argument_list|(
name|newHandler
argument_list|)
expr_stmt|;
try|try
block|{
name|newServer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|ERROR
argument_list|,
literal|"cannot start web server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|UnableToCompleteException
argument_list|()
throw|;
block|}
name|this
operator|.
name|server
operator|=
name|newServer
expr_stmt|;
block|}
DECL|method|getPort ()
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|port
return|;
block|}
DECL|method|stop ()
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|server
operator|.
name|stop
argument_list|()
expr_stmt|;
name|server
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * Returns the location of the compiler output. (Changes after every recompile.)    * @param outputModuleName the module name that the GWT compiler used in its output.    */
DECL|method|getCurrentWarDir (String outputModuleName)
specifier|public
name|File
name|getCurrentWarDir
parameter_list|(
name|String
name|outputModuleName
parameter_list|)
block|{
return|return
name|outboxes
operator|.
name|findByOutputModuleName
argument_list|(
name|outputModuleName
argument_list|)
operator|.
name|getWarDir
argument_list|()
return|;
block|}
DECL|method|handleRequest (String target, HttpServletRequest request, HttpServletResponse response, TreeLogger parentLogger)
specifier|private
name|void
name|handleRequest
parameter_list|(
name|String
name|target
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|TreeLogger
name|parentLogger
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
name|TreeLogger
name|logger
init|=
name|parentLogger
operator|.
name|branch
argument_list|(
name|Type
operator|.
name|TRACE
argument_list|,
literal|"GET "
operator|+
name|target
argument_list|)
decl_stmt|;
name|Response
name|page
init|=
name|doGet
argument_list|(
name|target
argument_list|,
name|request
argument_list|,
name|logger
argument_list|)
decl_stmt|;
if|if
condition|(
name|page
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|log
argument_list|(
name|Type
operator|.
name|WARN
argument_list|,
literal|"not handled: "
operator|+
name|target
argument_list|)
expr_stmt|;
return|return;
block|}
name|setHandled
argument_list|(
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|endsWith
argument_list|(
literal|".cache.js"
argument_list|)
condition|)
block|{
comment|// Make sure IE9 doesn't cache any pages.
comment|// (Nearly all pages may change on server restart.)
name|response
operator|.
name|setHeader
argument_list|(
literal|"Cache-Control"
argument_list|,
literal|"no-cache, no-store, max-age=0, must-revalidate"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Pragma"
argument_list|,
literal|"no-cache"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Expires"
argument_list|,
name|TIME_IN_THE_PAST
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDateHeader
argument_list|(
literal|"Date"
argument_list|,
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|page
operator|.
name|send
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Returns the page that should be sent in response to a GET request, or null for no response.    */
DECL|method|doGet (String target, HttpServletRequest request, TreeLogger logger)
specifier|private
name|Response
name|doGet
parameter_list|(
name|String
name|target
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|TreeLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|JsonObject
name|json
init|=
name|jsonExporter
operator|.
name|exportFrontPageVars
argument_list|()
decl_stmt|;
return|return
name|Pages
operator|.
name|newHtmlPage
argument_list|(
literal|"config"
argument_list|,
name|json
argument_list|,
literal|"frontpage.html"
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/dev_mode_on.js"
argument_list|)
condition|)
block|{
name|JsonObject
name|json
init|=
name|jsonExporter
operator|.
name|exportDevModeOnVars
argument_list|()
decl_stmt|;
return|return
name|Responses
operator|.
name|newJavascriptResponse
argument_list|(
literal|"__gwt_codeserver_config"
argument_list|,
name|json
argument_list|,
literal|"dev_mode_on.js"
argument_list|)
return|;
block|}
comment|// Recompile on request from the bookmarklet.
comment|// This is a GET because a bookmarklet can call it from a different origin (JSONP).
if|if
condition|(
name|target
operator|.
name|startsWith
argument_list|(
literal|"/recompile/"
argument_list|)
condition|)
block|{
name|String
name|moduleName
init|=
name|target
operator|.
name|substring
argument_list|(
literal|"/recompile/"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Outbox
name|box
init|=
name|outboxes
operator|.
name|findByOutputModuleName
argument_list|(
name|moduleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"No such module: "
operator|+
name|moduleName
argument_list|)
return|;
block|}
comment|// We are passing properties from an unauthenticated GET request directly to the compiler.
comment|// This should be safe, but only because these are binding properties. For each binding
comment|// property, you can only choose from a set of predefined values. So all an attacker can do is
comment|// cause a spurious recompile, resulting in an unexpected permutation being loaded later.
comment|//
comment|// It would be unsafe to allow a configuration property to be changed.
name|Job
name|job
init|=
name|box
operator|.
name|makeJob
argument_list|(
name|getBindingProperties
argument_list|(
name|request
argument_list|)
argument_list|,
name|logger
argument_list|)
decl_stmt|;
name|runner
operator|.
name|submit
argument_list|(
name|job
argument_list|)
expr_stmt|;
name|Job
operator|.
name|Result
name|result
init|=
name|job
operator|.
name|waitForResult
argument_list|()
decl_stmt|;
name|JsonObject
name|json
init|=
name|jsonExporter
operator|.
name|exportRecompileResponse
argument_list|(
name|result
argument_list|)
decl_stmt|;
return|return
name|Responses
operator|.
name|newJsonResponse
argument_list|(
name|json
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|.
name|startsWith
argument_list|(
literal|"/log/"
argument_list|)
condition|)
block|{
name|String
name|moduleName
init|=
name|target
operator|.
name|substring
argument_list|(
literal|"/log/"
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|Outbox
name|box
init|=
name|outboxes
operator|.
name|findByOutputModuleName
argument_list|(
name|moduleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"No such module: "
operator|+
name|moduleName
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|box
operator|.
name|containsStubCompile
argument_list|()
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"This module hasn't been compiled yet."
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|makeLogPage
argument_list|(
name|box
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/favicon.ico"
argument_list|)
condition|)
block|{
name|InputStream
name|faviconStream
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"favicon.ico"
argument_list|)
decl_stmt|;
if|if
condition|(
name|faviconStream
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"icon not found"
argument_list|)
return|;
block|}
comment|// IE8 will not load the favicon in an img tag with the default MIME type,
comment|// so use "image/x-icon" instead.
return|return
name|Responses
operator|.
name|newBinaryStreamResponse
argument_list|(
literal|"image/x-icon"
argument_list|,
name|faviconStream
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/policies/"
argument_list|)
condition|)
block|{
return|return
name|makePolicyIndexPage
argument_list|()
return|;
block|}
if|if
condition|(
name|target
operator|.
name|equals
argument_list|(
literal|"/progress"
argument_list|)
condition|)
block|{
comment|// TODO: return a list of progress objects here, one for each job.
name|JobEvent
name|event
init|=
name|eventTable
operator|.
name|getCompilingJobEvent
argument_list|()
decl_stmt|;
name|JsonObject
name|json
decl_stmt|;
if|if
condition|(
name|event
operator|==
literal|null
condition|)
block|{
name|json
operator|=
operator|new
name|JsonObject
argument_list|()
expr_stmt|;
name|json
operator|.
name|put
argument_list|(
literal|"status"
argument_list|,
literal|"idle"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|json
operator|=
name|jsonExporter
operator|.
name|exportProgressResponse
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
name|Responses
operator|.
name|newJsonResponse
argument_list|(
name|json
argument_list|)
return|;
block|}
name|Matcher
name|matcher
init|=
name|SAFE_MODULE_PATH
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
name|makeModulePage
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
name|matcher
operator|=
name|SAFE_DIRECTORY_PATH
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
operator|&&
name|SourceHandler
operator|.
name|isSourceMapRequest
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
name|handler
operator|.
name|handle
argument_list|(
name|target
argument_list|,
name|request
argument_list|,
name|logger
argument_list|)
return|;
block|}
name|matcher
operator|=
name|SAFE_FILE_PATH
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
if|if
condition|(
name|SourceHandler
operator|.
name|isSourceMapRequest
argument_list|(
name|target
argument_list|)
condition|)
block|{
return|return
name|handler
operator|.
name|handle
argument_list|(
name|target
argument_list|,
name|request
argument_list|,
name|logger
argument_list|)
return|;
block|}
if|if
condition|(
name|target
operator|.
name|startsWith
argument_list|(
literal|"/policies/"
argument_list|)
condition|)
block|{
return|return
name|makePolicyFilePage
argument_list|(
name|target
argument_list|)
return|;
block|}
return|return
name|makeCompilerOutputPage
argument_list|(
name|target
argument_list|)
return|;
block|}
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|WARN
argument_list|,
literal|"ignored get request: "
operator|+
name|target
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// not handled
block|}
comment|/**    * Returns a file that the compiler wrote to its war directory.    */
DECL|method|makeCompilerOutputPage (String target)
specifier|private
name|Response
name|makeCompilerOutputPage
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|int
name|secondSlash
init|=
name|target
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|moduleName
init|=
name|target
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|secondSlash
argument_list|)
decl_stmt|;
name|Outbox
name|box
init|=
name|outboxes
operator|.
name|findByOutputModuleName
argument_list|(
name|moduleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"No such module: "
operator|+
name|moduleName
argument_list|)
return|;
block|}
specifier|final
name|String
name|contentEncoding
decl_stmt|;
name|File
name|file
init|=
name|box
operator|.
name|getOutputFile
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
comment|// perhaps it's compressed
name|file
operator|=
name|box
operator|.
name|getOutputFile
argument_list|(
name|target
operator|+
literal|".gz"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"not found: "
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|contentEncoding
operator|=
literal|"gzip"
expr_stmt|;
block|}
else|else
block|{
name|contentEncoding
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|String
name|sourceMapUrl
decl_stmt|;
name|Matcher
name|match
init|=
name|CACHE_JS_FILE
operator|.
name|matcher
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|match
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|strongName
init|=
name|match
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|String
name|template
init|=
name|SourceHandler
operator|.
name|sourceMapLocationTemplate
argument_list|(
name|moduleName
argument_list|)
decl_stmt|;
name|sourceMapUrl
operator|=
name|template
operator|.
name|replace
argument_list|(
literal|"__HASH__"
argument_list|,
name|strongName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sourceMapUrl
operator|=
literal|null
expr_stmt|;
block|}
name|String
name|mimeType
init|=
name|guessMimeType
argument_list|(
name|target
argument_list|)
decl_stmt|;
specifier|final
name|Response
name|barePage
init|=
name|Responses
operator|.
name|newFileResponse
argument_list|(
name|mimeType
argument_list|,
name|file
argument_list|)
decl_stmt|;
comment|// Wrap the response to send the extra headers.
return|return
operator|new
name|Response
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|TreeLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO: why do we need this? Looks like Ray added it a long time ago.
name|response
operator|.
name|setHeader
argument_list|(
literal|"Access-Control-Allow-Origin"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceMapUrl
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-SourceMap"
argument_list|,
name|sourceMapUrl
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"SourceMap"
argument_list|,
name|sourceMapUrl
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contentEncoding
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|request
operator|.
name|getHeader
argument_list|(
literal|"Accept-Encoding"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"gzip"
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_IMPLEMENTED
argument_list|)
expr_stmt|;
name|logger
operator|.
name|log
argument_list|(
name|TreeLogger
operator|.
name|WARN
argument_list|,
literal|"client doesn't accept gzip; bailing"
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Encoding"
argument_list|,
literal|"gzip"
argument_list|)
expr_stmt|;
block|}
name|barePage
operator|.
name|send
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|logger
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|makeModulePage (String moduleName)
specifier|private
name|Response
name|makeModulePage
parameter_list|(
name|String
name|moduleName
parameter_list|)
block|{
name|Outbox
name|box
init|=
name|outboxes
operator|.
name|findByOutputModuleName
argument_list|(
name|moduleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|box
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"No such module: "
operator|+
name|moduleName
argument_list|)
return|;
block|}
name|JsonObject
name|json
init|=
name|jsonExporter
operator|.
name|exportModulePageVars
argument_list|(
name|box
argument_list|)
decl_stmt|;
return|return
name|Pages
operator|.
name|newHtmlPage
argument_list|(
literal|"config"
argument_list|,
name|json
argument_list|,
literal|"modulepage.html"
argument_list|)
return|;
block|}
DECL|method|makePolicyIndexPage ()
specifier|private
name|Response
name|makePolicyIndexPage
parameter_list|()
block|{
return|return
operator|new
name|Response
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|TreeLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|HtmlWriter
name|out
init|=
operator|new
name|HtmlWriter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"html"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"head"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"title"
argument_list|)
operator|.
name|text
argument_list|(
literal|"Policy Files"
argument_list|)
operator|.
name|endTag
argument_list|(
literal|"title"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"head"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"body"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|text
argument_list|(
literal|"Policy Files"
argument_list|)
operator|.
name|endTag
argument_list|(
literal|"h1"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
for|for
control|(
name|Outbox
name|box
range|:
name|outboxes
operator|.
name|getOutboxes
argument_list|()
control|)
block|{
name|List
argument_list|<
name|PolicyFile
argument_list|>
name|policies
init|=
name|box
operator|.
name|readRpcPolicyManifest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|policies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|.
name|startTag
argument_list|(
literal|"h2"
argument_list|)
operator|.
name|text
argument_list|(
name|box
operator|.
name|getOutputModuleName
argument_list|()
argument_list|)
operator|.
name|endTag
argument_list|(
literal|"h2"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"table"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
for|for
control|(
name|PolicyFile
name|policy
range|:
name|policies
control|)
block|{
name|out
operator|.
name|startTag
argument_list|(
literal|"tr"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"a"
argument_list|,
literal|"href="
argument_list|,
name|policy
operator|.
name|getServiceSourceUrl
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|text
argument_list|(
name|policy
operator|.
name|getServiceName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"a"
argument_list|,
literal|"href="
argument_list|,
name|policy
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|text
argument_list|(
name|policy
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"td"
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"tr"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|endTag
argument_list|(
literal|"table"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
block|}
name|out
operator|.
name|endTag
argument_list|(
literal|"body"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"html"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|makePolicyFilePage (String target)
specifier|private
name|Response
name|makePolicyFilePage
parameter_list|(
name|String
name|target
parameter_list|)
block|{
name|int
name|secondSlash
init|=
name|target
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|secondSlash
operator|<
literal|1
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"invalid URL for policy file: "
operator|+
name|target
argument_list|)
return|;
block|}
name|String
name|rest
init|=
name|target
operator|.
name|substring
argument_list|(
name|secondSlash
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
operator|||
operator|!
name|rest
operator|.
name|endsWith
argument_list|(
literal|".gwt.rpc"
argument_list|)
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"invalid name for policy file: "
operator|+
name|rest
argument_list|)
return|;
block|}
name|File
name|fileToSend
init|=
name|outboxes
operator|.
name|findPolicyFile
argument_list|(
name|rest
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileToSend
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"Policy file not found: "
operator|+
name|rest
argument_list|)
return|;
block|}
return|return
name|Responses
operator|.
name|newFileResponse
argument_list|(
literal|"text/plain"
argument_list|,
name|fileToSend
argument_list|)
return|;
block|}
comment|/**    * Sends the log file as html with errors highlighted in red.    */
DECL|method|makeLogPage (final Outbox box)
specifier|private
name|Response
name|makeLogPage
parameter_list|(
specifier|final
name|Outbox
name|box
parameter_list|)
block|{
specifier|final
name|File
name|file
init|=
name|box
operator|.
name|getCompileLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
operator|new
name|ErrorPage
argument_list|(
literal|"log file not found"
argument_list|)
return|;
block|}
return|return
operator|new
name|Response
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|send
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|,
name|TreeLogger
name|logger
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"text/html"
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Content-Style-Type"
argument_list|,
literal|"text/css"
argument_list|)
expr_stmt|;
name|HtmlWriter
name|out
init|=
operator|new
name|HtmlWriter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"html"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"head"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"title"
argument_list|)
operator|.
name|text
argument_list|(
name|box
operator|.
name|getOutputModuleName
argument_list|()
operator|+
literal|" compile log"
argument_list|)
operator|.
name|endTag
argument_list|(
literal|"title"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"style"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|text
argument_list|(
literal|".error { color: red; font-weight: bold; }"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"style"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"head"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|startTag
argument_list|(
literal|"body"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|sendLogAsHtml
argument_list|(
name|reader
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"body"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|out
operator|.
name|endTag
argument_list|(
literal|"html"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|field|ERROR_PATTERN
specifier|private
specifier|static
specifier|final
name|Pattern
name|ERROR_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\[ERROR\\]"
argument_list|)
decl_stmt|;
comment|/**    * Copies in to out line by line, escaping each line for html characters and highlighting    * error lines. Closes<code>in</code> when done.    */
DECL|method|sendLogAsHtml (BufferedReader in, HtmlWriter out)
specifier|private
specifier|static
name|void
name|sendLogAsHtml
parameter_list|(
name|BufferedReader
name|in
parameter_list|,
name|HtmlWriter
name|out
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|out
operator|.
name|startTag
argument_list|(
literal|"pre"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
name|String
name|line
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|Matcher
name|m
init|=
name|ERROR_PATTERN
operator|.
name|matcher
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|boolean
name|error
init|=
name|m
operator|.
name|find
argument_list|()
decl_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|out
operator|.
name|startTag
argument_list|(
literal|"span"
argument_list|,
literal|"class="
argument_list|,
literal|"error"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|text
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|out
operator|.
name|endTag
argument_list|(
literal|"span"
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|nl
argument_list|()
expr_stmt|;
comment|// the readLine doesn't include the newline.
name|line
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
name|out
operator|.
name|endTag
argument_list|(
literal|"pre"
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* visible for testing */
DECL|method|guessMimeType (String filename)
specifier|static
name|String
name|guessMimeType
parameter_list|(
name|String
name|filename
parameter_list|)
block|{
name|String
name|mimeType
init|=
name|MIME_TYPES
operator|.
name|getMimeByExtension
argument_list|(
name|filename
argument_list|)
decl_stmt|;
return|return
name|mimeType
operator|!=
literal|null
condition|?
name|mimeType
else|:
literal|""
return|;
block|}
comment|/**    * Returns the binding properties from the web page where dev mode is being used. (As passed in    * by dev_mode_on.js in a JSONP request to "/recompile".)    */
DECL|method|getBindingProperties (HttpServletRequest request)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getBindingProperties
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|request
operator|.
name|getParameterMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|key
decl_stmt|;
if|if
condition|(
operator|!
name|propName
operator|.
name|equals
argument_list|(
literal|"_callback"
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
DECL|method|setHandled (HttpServletRequest request)
specifier|private
specifier|static
name|void
name|setHandled
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|Request
name|baseRequest
init|=
operator|(
name|request
operator|instanceof
name|Request
operator|)
condition|?
operator|(
name|Request
operator|)
name|request
else|:
name|HttpConnection
operator|.
name|getCurrentConnection
argument_list|()
operator|.
name|getHttpChannel
argument_list|()
operator|.
name|getRequest
argument_list|()
decl_stmt|;
name|baseRequest
operator|.
name|setHandled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

